parameter (or (or (or (pair %borrowreq (int %dur) (nat %qty)) (nat %defaultor)) (or (address %getAdministrator) (or (pair %getBalance (address %arg) (address %contractAddress)) (address %getLoans)))) (or (or (address %getTotalSupply) (nat %lend)) (or (pair %mint (address %address) (nat %value)) (or (pair %paid (nat %amount) (nat %index)) (address %setAdministrator)))));
storage   (pair (pair (address %administrator) (big_map %balances address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))));
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                # == borrowreq ==
                # sp.verify((self.data.balances[sp.sender].balance - params.qty) >= 0) # @parameter%borrowreq : @storage
                DUP;        # @parameter%borrowreq : @parameter%borrowreq : @storage
                CDR;        # nat : @parameter%borrowreq : @storage
                PUSH int 0; # int : nat : @parameter%borrowreq : @storage
                SWAP;       # nat : int : @parameter%borrowreq : @storage
                DIG 3;      # @storage : nat : int : @parameter%borrowreq
                DUP;        # @storage : @storage : nat : int : @parameter%borrowreq
                DUG 4;      # @storage : nat : int : @parameter%borrowreq : @storage
                CADR;       # big_map address nat : nat : int : @parameter%borrowreq : @storage
                SENDER;     # address : big_map address nat : nat : int : @parameter%borrowreq : @storage
                GET;        # option nat : nat : int : @parameter%borrowreq : @storage
                IF_SOME
                  {
                    # of_some: Get-item:-1 # @some : nat : int : @parameter%borrowreq : @storage
                  }
                  {
                    PUSH string "Get-item:-1"; # string : nat : int : @parameter%borrowreq : @storage
                    FAILWITH;   # FAILED
                  }; # @some : nat : int : @parameter%borrowreq : @storage
                SUB;        # int : int : @parameter%borrowreq : @storage
                COMPARE;    # int : @parameter%borrowreq : @storage
                GE;         # bool : @parameter%borrowreq : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: (self.data.balances[sp.sender].balance - params.qty) >= 0"; # string : @parameter%borrowreq : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%borrowreq : @storage
                SWAP;       # @storage : @parameter%borrowreq
                # self.data.noLoans += 1 # @storage : @parameter%borrowreq
                DUP;        # @storage : @storage : @parameter%borrowreq
                DUG 2;      # @storage : @parameter%borrowreq : @storage
                DUP;        # @storage : @storage : @parameter%borrowreq : @storage
                CAR;        # pair (address %administrator) (big_map %balances address nat) : @storage : @parameter%borrowreq : @storage
                SWAP;       # @storage : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : @storage
                CDR;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : @storage
                DUP;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : @storage
                CAR;        # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : @storage
                SWAP;       # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : @storage
                CDDR;       # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : @storage
                PUSH nat 1; # nat : nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : @storage
                DIG 5;      # @storage : nat : nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq
                CDDAR;      # nat : nat : nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq
                ADD;        # nat : nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq
                PAIR;       # pair nat nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq
                SWAP;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq
                PAIR;       # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq
                SWAP;       # pair (address %administrator) (big_map %balances address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                PAIR;       # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq
                # self.data.loans[self.data.noLoans] = sp.record(amount = params.qty, borrower = sp.sender, collateral = params.qty, duration = params.dur, lender = sp.sender, lent = False, paid = False, payback = (params.qty * 108) // 100, req = True, starttime = sp.timestamp(0)) # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq
                DUP;        # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq
                DUG 2;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CAR;        # pair (address %administrator) (big_map %balances address nat) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                SWAP;       # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CDR;        # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CDR;        # pair nat nat : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                SWAP;       # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CAR;        # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                PUSH (pair (bool %req) (timestamp %starttime)) (Pair True "0"); # pair (bool %req) (timestamp %starttime) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                PUSH nat 100; # nat : pair (bool %req) (timestamp %starttime) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                PUSH nat 108; # nat : nat : pair (bool %req) (timestamp %starttime) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DIG 6;      # @parameter%borrowreq : nat : nat : pair (bool %req) (timestamp %starttime) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # @parameter%borrowreq : @parameter%borrowreq : nat : nat : pair (bool %req) (timestamp %starttime) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUG 7;      # @parameter%borrowreq : nat : nat : pair (bool %req) (timestamp %starttime) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CDR;        # nat : nat : nat : pair (bool %req) (timestamp %starttime) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                MUL;        # nat : nat : pair (bool %req) (timestamp %starttime) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                EDIV;       # option (pair nat nat) : pair (bool %req) (timestamp %starttime) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                IF_SOME
                  {
                    CAR;        # nat : pair (bool %req) (timestamp %starttime) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                  }
                  {
                    PUSH string "division by zero"; # string : pair (bool %req) (timestamp %starttime) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                    FAILWITH;   # FAILED
                  }; # nat : pair (bool %req) (timestamp %starttime) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                PAIR %payback; # pair (nat %payback) (pair (bool %req) (timestamp %starttime)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                PUSH (pair (bool %lent) (bool %paid)) (Pair False False); # pair (bool %lent) (bool %paid) : pair (nat %payback) (pair (bool %req) (timestamp %starttime)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                PAIR;       # pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                SENDER;     # address : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DIG 5;      # @parameter%borrowreq : address : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # @parameter%borrowreq : @parameter%borrowreq : address : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUG 6;      # @parameter%borrowreq : address : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CAR;        # int : address : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                PAIR %duration %lender; # pair (int %duration) (address %lender) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DIG 5;      # @parameter%borrowreq : pair (int %duration) (address %lender) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # @parameter%borrowreq : @parameter%borrowreq : pair (int %duration) (address %lender) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUG 6;      # @parameter%borrowreq : pair (int %duration) (address %lender) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CDR;        # nat : pair (int %duration) (address %lender) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                PAIR %collateral; # pair (nat %collateral) (pair (int %duration) (address %lender)) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                SENDER;     # address : pair (nat %collateral) (pair (int %duration) (address %lender)) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DIG 6;      # @parameter%borrowreq : address : pair (nat %collateral) (pair (int %duration) (address %lender)) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # @parameter%borrowreq : @parameter%borrowreq : address : pair (nat %collateral) (pair (int %duration) (address %lender)) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUG 7;      # @parameter%borrowreq : address : pair (nat %collateral) (pair (int %duration) (address %lender)) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CDR;        # nat : address : pair (nat %collateral) (pair (int %duration) (address %lender)) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                PAIR %amount %borrower; # pair (nat %amount) (address %borrower) : pair (nat %collateral) (pair (int %duration) (address %lender)) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                PAIR;       # pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                PAIR;       # pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                SOME;       # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DIG 5;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq
                CDDAR;      # nat : option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq
                UPDATE;     # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq
                PAIR;       # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : pair (address %administrator) (big_map %balances address nat) : @parameter%borrowreq
                SWAP;       # pair (address %administrator) (big_map %balances address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                PAIR;       # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq
                # self.data.balances[self.data.administrator].balance += params.qty # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq
                DUP;        # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq
                DUG 2;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CDR;        # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                SWAP;       # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CAR;        # pair (address %administrator) (big_map %balances address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # pair (address %administrator) (big_map %balances address nat) : pair (address %administrator) (big_map %balances address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CAR;        # address : pair (address %administrator) (big_map %balances address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                SWAP;       # pair (address %administrator) (big_map %balances address nat) : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CDR;        # big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DIG 5;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                DUP;        # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                DUG 6;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CAAR;       # address : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # address : address : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUG 2;      # address : big_map address nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                GET;        # option nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                IF_SOME
                  {
                    DROP;       # address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                    # of_some: set_in_top-any # address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                  }
                  {
                    PUSH string "set_in_top-any"; # string : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                    FAILWITH;   # FAILED
                  }; # address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DIG 4;      # @parameter%borrowreq : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # @parameter%borrowreq : @parameter%borrowreq : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUG 5;      # @parameter%borrowreq : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CDR;        # nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DIG 6;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                DUP;        # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                DUG 7;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CADR;       # big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DIG 7;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                CAAR;       # address : big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                GET;        # option nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                IF_SOME
                  {
                    # of_some: Get-item:48 # @some : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                  }
                  {
                    PUSH string "Get-item:48"; # string : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                    FAILWITH;   # FAILED
                  }; # @some : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                ADD;        # nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                SOME;       # option nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                SWAP;       # address : option nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                UPDATE;     # big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                SWAP;       # address : big_map address nat : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                PAIR;       # pair address (big_map address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq
                PAIR;       # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq
                # self.data.balances[sp.sender].balance = sp.as_nat(self.data.balances[sp.sender].balance - params.qty) # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq
                DUP;        # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq
                DUG 2;      # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CDR;        # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                SWAP;       # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CAR;        # pair address (big_map address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # pair address (big_map address nat) : pair address (big_map address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CAR;        # address : pair address (big_map address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                SWAP;       # pair address (big_map address nat) : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CDR;        # big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                SENDER;     # address : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUP;        # address : address : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DUG 2;      # address : big_map address nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                GET;        # option nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                IF_SOME
                  {
                    DROP;       # address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                    # of_some: set_in_top-any # address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                  }
                  {
                    PUSH string "set_in_top-any"; # string : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                    FAILWITH;   # FAILED
                  }; # address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : @parameter%borrowreq : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DIG 4;      # @parameter%borrowreq : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                CDR;        # nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
                DIG 5;      # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)) : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                CADR;       # big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                SENDER;     # address : big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                GET;        # option nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                IF_SOME
                  {
                    # of_some: Get-item:-1 # @some : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                  }
                  {
                    PUSH string "Get-item:-1"; # string : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                    FAILWITH;   # FAILED
                  }; # @some : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                SUB;        # int : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                ISNAT;      # option nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                    FAILWITH;   # FAILED
                  }; # @some : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                SOME;       # option nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                SWAP;       # address : option nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                UPDATE;     # big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                SWAP;       # address : big_map address nat : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                PAIR;       # pair address (big_map address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                PAIR;       # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
              }
              {
                SWAP;       # @storage : @parameter%defaultor
                # == defaultor ==
                # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%defaultor
                DUP;        # @storage : @storage : @parameter%defaultor
                DUG 2;      # @storage : @parameter%defaultor : @storage
                CAAR;       # address : @parameter%defaultor : @storage
                SENDER;     # address : address : @parameter%defaultor : @storage
                COMPARE;    # int : @parameter%defaultor : @storage
                EQ;         # bool : @parameter%defaultor : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%defaultor : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%defaultor : @storage
                SWAP;       # @storage : @parameter%defaultor
                # sp.verify(self.data.loans[params].duration > (sp.timestamp(1595752470) - self.data.loans[params].starttime)) # @storage : @parameter%defaultor
                DUP;        # @storage : @storage : @parameter%defaultor
                DUG 2;      # @storage : @parameter%defaultor : @storage
                CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%defaultor : @storage
                SWAP;       # @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @storage
                DUP;        # @parameter%defaultor : @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @storage
                DUG 2;      # @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%defaultor : @storage
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%defaultor : @storage
                IF_SOME
                  {
                    # of_some: Get-item:77 # @some : @parameter%defaultor : @storage
                  }
                  {
                    PUSH string "Get-item:77"; # string : @parameter%defaultor : @storage
                    FAILWITH;   # FAILED
                  }; # @some : @parameter%defaultor : @storage
                CDDDDR;     # timestamp : @parameter%defaultor : @storage
                PUSH timestamp "1595752470"; # timestamp : timestamp : @parameter%defaultor : @storage
                SUB;        # int : @parameter%defaultor : @storage
                DIG 2;      # @storage : int : @parameter%defaultor
                DUP;        # @storage : @storage : int : @parameter%defaultor
                DUG 3;      # @storage : int : @parameter%defaultor : @storage
                CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : int : @parameter%defaultor : @storage
                DIG 2;      # @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : int : @storage
                DUP;        # @parameter%defaultor : @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : int : @storage
                DUG 3;      # @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : int : @parameter%defaultor : @storage
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : int : @parameter%defaultor : @storage
                IF_SOME
                  {
                    # of_some: Get-item:77 # @some : int : @parameter%defaultor : @storage
                  }
                  {
                    PUSH string "Get-item:77"; # string : int : @parameter%defaultor : @storage
                    FAILWITH;   # FAILED
                  }; # @some : int : @parameter%defaultor : @storage
                CADDAR;     # int : int : @parameter%defaultor : @storage
                COMPARE;    # int : @parameter%defaultor : @storage
                GT;         # bool : @parameter%defaultor : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.loans[params].duration > (sp.timestamp(1595752470) - self.data.loans[params].starttime)"; # string : @parameter%defaultor : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%defaultor : @storage
                # sp.verify(self.data.loans[params].lent == True) # @parameter%defaultor : @storage
                PUSH bool True; # bool : @parameter%defaultor : @storage
                DIG 2;      # @storage : bool : @parameter%defaultor
                DUP;        # @storage : @storage : bool : @parameter%defaultor
                DUG 3;      # @storage : bool : @parameter%defaultor : @storage
                CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @parameter%defaultor : @storage
                DIG 2;      # @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @storage
                DUP;        # @parameter%defaultor : @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @storage
                DUG 3;      # @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @parameter%defaultor : @storage
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @parameter%defaultor : @storage
                IF_SOME
                  {
                    # of_some: Get-item:77 # @some : bool : @parameter%defaultor : @storage
                  }
                  {
                    PUSH string "Get-item:77"; # string : bool : @parameter%defaultor : @storage
                    FAILWITH;   # FAILED
                  }; # @some : bool : @parameter%defaultor : @storage
                CDAAR;      # bool : bool : @parameter%defaultor : @storage
                COMPARE;    # int : @parameter%defaultor : @storage
                EQ;         # bool : @parameter%defaultor : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.loans[params].lent == True"; # string : @parameter%defaultor : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%defaultor : @storage
                SWAP;       # @storage : @parameter%defaultor
                # self.data.balances[sp.sender].balance = sp.as_nat(self.data.balances[sp.sender].balance - self.data.loans[params].collateral) # @storage : @parameter%defaultor
                DUP;        # @storage : @storage : @parameter%defaultor
                DUG 2;      # @storage : @parameter%defaultor : @storage
                DUP;        # @storage : @storage : @parameter%defaultor : @storage
                CDR;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @storage : @parameter%defaultor : @storage
                SWAP;       # @storage : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                CAR;        # pair (address %administrator) (big_map %balances address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                DUP;        # pair (address %administrator) (big_map %balances address nat) : pair (address %administrator) (big_map %balances address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                CAR;        # address : pair (address %administrator) (big_map %balances address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                SWAP;       # pair (address %administrator) (big_map %balances address nat) : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                CDR;        # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                DUP;        # big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                SENDER;     # address : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                DUP;        # address : address : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                DUG 2;      # address : big_map address nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                GET;        # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                IF_SOME
                  {
                    DROP;       # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                    # of_some: set_in_top-any # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                  }
                  {
                    PUSH string "set_in_top-any"; # string : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                    FAILWITH;   # FAILED
                  }; # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                DIG 5;      # @storage : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                DUP;        # @storage : @storage : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                DUG 6;      # @storage : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                DIG 5;      # @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @storage
                DUP;        # @parameter%defaultor : @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @storage
                DUG 6;      # @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                IF_SOME
                  {
                    # of_some: Get-item:77 # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                  }
                  {
                    PUSH string "Get-item:77"; # string : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                    FAILWITH;   # FAILED
                  }; # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                CADAR;      # nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : @storage
                DIG 6;      # @storage : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                CADR;       # big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                SENDER;     # address : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                GET;        # option nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                IF_SOME
                  {
                    # of_some: Get-item:-1 # @some : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                  }
                  {
                    PUSH string "Get-item:-1"; # string : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                    FAILWITH;   # FAILED
                  }; # @some : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                SUB;        # int : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                ISNAT;      # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                    FAILWITH;   # FAILED
                  }; # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                SOME;       # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                SWAP;       # address : option nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                UPDATE;     # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                SWAP;       # address : big_map address nat : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                PAIR;       # pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                PAIR;       # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%defaultor
                # self.data.balances[self.data.loans[params].lender].balance += self.data.loans[params].collateral # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%defaultor
                DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%defaultor
                DUG 2;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CDR;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                SWAP;       # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CAR;        # pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # pair address (big_map address nat) : pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CAR;        # address : pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                SWAP;       # pair address (big_map address nat) : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CDR;        # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 5;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                DUG 6;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 5;      # @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # @parameter%defaultor : @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUG 6;      # @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                IF_SOME
                  {
                    # of_some: Get-item:77 # @some : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                  }
                  {
                    PUSH string "Get-item:77"; # string : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    FAILWITH;   # FAILED
                  }; # @some : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CADDDR;     # address : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # address : address : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUG 2;      # address : big_map address nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                GET;        # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                IF_SOME
                  {
                    DROP;       # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    # of_some: set_in_top-any # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                  }
                  {
                    PUSH string "set_in_top-any"; # string : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    FAILWITH;   # FAILED
                  }; # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 5;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                DUG 6;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 5;      # @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # @parameter%defaultor : @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUG 6;      # @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                IF_SOME
                  {
                    # of_some: Get-item:77 # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                  }
                  {
                    PUSH string "Get-item:77"; # string : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    FAILWITH;   # FAILED
                  }; # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CADAR;      # nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 6;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                DUG 7;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CADR;       # big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 7;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%defaultor
                DIG 7;      # @parameter%defaultor : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                IF_SOME
                  {
                    # of_some: Get-item:77 # @some : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                  }
                  {
                    PUSH string "Get-item:77"; # string : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    FAILWITH;   # FAILED
                  }; # @some : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                CADDDR;     # address : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                GET;        # option nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                IF_SOME
                  {
                    # of_some: Get-item:85 # @some : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                  }
                  {
                    PUSH string "Get-item:85"; # string : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    FAILWITH;   # FAILED
                  }; # @some : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                ADD;        # nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                SOME;       # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                SWAP;       # address : option nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                UPDATE;     # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                SWAP;       # address : big_map address nat : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                PAIR;       # pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                PAIR;       # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
              }; # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
            NIL operation; # list operation : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
          }
          {
            IF_LEFT
              {
                # == getAdministrator ==
                # sp.transfer(self.data.administrator, sp.tez(0), sp.contract(sp.TAddress, params.contractAddress, entry_point='viewAdministrator').open_some()) # @parameter%getAdministrator : @storage
                CONTRACT %viewAdministrator address; # option (contract address) : @storage
                NIL operation; # list operation : option (contract address) : @storage
                SWAP;       # option (contract address) : list operation : @storage
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # @some : list operation : @storage
                PUSH mutez 0; # mutez : @some : list operation : @storage
                DIG 3;      # @storage : mutez : @some : list operation
                DUP;        # @storage : @storage : mutez : @some : list operation
                DUG 4;      # @storage : mutez : @some : list operation : @storage
                CAAR;       # address : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    # == getBalance ==
                    # sp.transfer(self.data.balances[params.arg.owner].balance, sp.tez(0), sp.contract(sp.TNat, params.contractAddress, entry_point='viewBalance').open_some()) # @parameter%getBalance : @storage
                    DUP;        # @parameter%getBalance : @parameter%getBalance : @storage
                    CDR;        # address : @parameter%getBalance : @storage
                    CONTRACT %viewBalance nat; # option (contract nat) : @parameter%getBalance : @storage
                    NIL operation; # list operation : option (contract nat) : @parameter%getBalance : @storage
                    SWAP;       # option (contract nat) : list operation : @parameter%getBalance : @storage
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : list operation : @parameter%getBalance : @storage
                        FAILWITH;   # FAILED
                      }; # @some : list operation : @parameter%getBalance : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%getBalance : @storage
                    DIG 4;      # @storage : mutez : @some : list operation : @parameter%getBalance
                    DUP;        # @storage : @storage : mutez : @some : list operation : @parameter%getBalance
                    DUG 5;      # @storage : mutez : @some : list operation : @parameter%getBalance : @storage
                    CADR;       # big_map address nat : mutez : @some : list operation : @parameter%getBalance : @storage
                    DIG 4;      # @parameter%getBalance : big_map address nat : mutez : @some : list operation : @storage
                    CAR;        # address : big_map address nat : mutez : @some : list operation : @storage
                    GET;        # option nat : mutez : @some : list operation : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:103 # @some : mutez : @some : list operation : @storage
                      }
                      {
                        PUSH string "Get-item:103"; # string : mutez : @some : list operation : @storage
                        FAILWITH;   # FAILED
                      }; # @some : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    # == getLoans ==
                    # sp.transfer(self.data.noLoans, sp.tez(0), sp.contract(sp.TNat, params.contractAddress, entry_point='viewLoans').open_some()) # @parameter%getLoans : @storage
                    CONTRACT %viewLoans nat; # option (contract nat) : @storage
                    NIL operation; # list operation : option (contract nat) : @storage
                    SWAP;       # option (contract nat) : list operation : @storage
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : list operation : @storage
                        FAILWITH;   # FAILED
                      }; # @some : list operation : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @storage
                    DIG 3;      # @storage : mutez : @some : list operation
                    DUP;        # @storage : @storage : mutez : @some : list operation
                    DUG 4;      # @storage : mutez : @some : list operation : @storage
                    CDDAR;      # nat : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : @storage
          }; # list operation : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                # == getTotalSupply ==
                # sp.transfer(self.data.totalSupply, sp.tez(0), sp.contract(sp.TNat, params.contractAddress, entry_point='viewTotalSupply').open_some()) # @parameter%getTotalSupply : @storage
                CONTRACT %viewTotalSupply nat; # option (contract nat) : @storage
                NIL operation; # list operation : option (contract nat) : @storage
                SWAP;       # option (contract nat) : list operation : @storage
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : list operation : @storage
                    FAILWITH;   # FAILED
                  }; # @some : list operation : @storage
                PUSH mutez 0; # mutez : @some : list operation : @storage
                DIG 3;      # @storage : mutez : @some : list operation
                DUP;        # @storage : @storage : mutez : @some : list operation
                DUG 4;      # @storage : mutez : @some : list operation : @storage
                CDDDR;      # nat : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }
              {
                SWAP;       # @storage : @parameter%lend
                # == lend ==
                # sp.verify(self.data.loans[params].amount >= self.data.balances[sp.sender].balance) # @storage : @parameter%lend
                DUP;        # @storage : @storage : @parameter%lend
                DUG 2;      # @storage : @parameter%lend : @storage
                CADR;       # big_map address nat : @parameter%lend : @storage
                SENDER;     # address : big_map address nat : @parameter%lend : @storage
                GET;        # option nat : @parameter%lend : @storage
                IF_SOME
                  {
                    # of_some: Get-item:-1 # @some : @parameter%lend : @storage
                  }
                  {
                    PUSH string "Get-item:-1"; # string : @parameter%lend : @storage
                    FAILWITH;   # FAILED
                  }; # @some : @parameter%lend : @storage
                DIG 2;      # @storage : @some : @parameter%lend
                DUP;        # @storage : @storage : @some : @parameter%lend
                DUG 3;      # @storage : @some : @parameter%lend : @storage
                CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @some : @parameter%lend : @storage
                DIG 2;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @some : @storage
                DUP;        # @parameter%lend : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @some : @storage
                DUG 3;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @some : @parameter%lend : @storage
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @some : @parameter%lend : @storage
                IF_SOME
                  {
                    # of_some: Get-item:51 # @some : @some : @parameter%lend : @storage
                  }
                  {
                    PUSH string "Get-item:51"; # string : @some : @parameter%lend : @storage
                    FAILWITH;   # FAILED
                  }; # @some : @some : @parameter%lend : @storage
                CAAAR;      # nat : @some : @parameter%lend : @storage
                COMPARE;    # int : @parameter%lend : @storage
                GE;         # bool : @parameter%lend : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.loans[params].amount >= self.data.balances[sp.sender].balance"; # string : @parameter%lend : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%lend : @storage
                # sp.verify(self.data.loans[params].req == True) # @parameter%lend : @storage
                PUSH bool True; # bool : @parameter%lend : @storage
                DIG 2;      # @storage : bool : @parameter%lend
                DUP;        # @storage : @storage : bool : @parameter%lend
                DUG 3;      # @storage : bool : @parameter%lend : @storage
                CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @parameter%lend : @storage
                DIG 2;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @storage
                DUP;        # @parameter%lend : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @storage
                DUG 3;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @parameter%lend : @storage
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @parameter%lend : @storage
                IF_SOME
                  {
                    # of_some: Get-item:51 # @some : bool : @parameter%lend : @storage
                  }
                  {
                    PUSH string "Get-item:51"; # string : bool : @parameter%lend : @storage
                    FAILWITH;   # FAILED
                  }; # @some : bool : @parameter%lend : @storage
                CDDDAR;     # bool : bool : @parameter%lend : @storage
                COMPARE;    # int : @parameter%lend : @storage
                EQ;         # bool : @parameter%lend : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.loans[params].req == True"; # string : @parameter%lend : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%lend : @storage
                SWAP;       # @storage : @parameter%lend
                # self.data.loans[params].lent = True # @storage : @parameter%lend
                DUP;        # @storage : @storage : @parameter%lend
                CAR;        # pair (address %administrator) (big_map %balances address nat) : @storage : @parameter%lend
                SWAP;       # @storage : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CDR;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DUP;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CDR;        # pair (nat %noLoans) (nat %totalSupply) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CAR;        # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DUP;        # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DIG 4;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat)
                DUP;        # @parameter%lend : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat)
                DUG 5;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DUP;        # @parameter%lend : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DUG 2;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                IF_SOME
                  {
                    # of_some: set_in_top-any # @some : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                  }
                  {
                    PUSH string "set_in_top-any"; # string : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                    FAILWITH;   # FAILED
                  }; # @some : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DUP;        # @some : @some : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : @some : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # @some : pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CDR;        # pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DUP;        # pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CDR;        # pair (nat %payback) (pair (bool %req) (timestamp %starttime)) : pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : pair (nat %payback) (pair (bool %req) (timestamp %starttime)) : pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CADR;       # bool : pair (nat %payback) (pair (bool %req) (timestamp %starttime)) : pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                PUSH bool True; # bool : bool : pair (nat %payback) (pair (bool %req) (timestamp %starttime)) : pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                PAIR;       # pair bool bool : pair (nat %payback) (pair (bool %req) (timestamp %starttime)) : pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                PAIR;       # pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                PAIR;       # pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SOME;       # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # @parameter%lend : option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                UPDATE;     # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                PAIR;       # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # pair (address %administrator) (big_map %balances address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                PAIR;       # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend
                # self.data.loans[params].lender = sp.sender # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend
                DUP;        # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend
                CAR;        # pair (address %administrator) (big_map %balances address nat) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend
                SWAP;       # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CDR;        # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DUP;        # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CDR;        # pair (nat %noLoans) (nat %totalSupply) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CAR;        # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DUP;        # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DIG 4;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat)
                DUP;        # @parameter%lend : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat)
                DUG 5;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DUP;        # @parameter%lend : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DUG 2;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                IF_SOME
                  {
                    # of_some: set_in_top-any # @some : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                  }
                  {
                    PUSH string "set_in_top-any"; # string : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                    FAILWITH;   # FAILED
                  }; # @some : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DUP;        # @some : @some : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CDR;        # pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @some : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # @some : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DUP;        # pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CAR;        # pair (nat %amount) (address %borrower) : pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender))) : pair (nat %amount) (address %borrower) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CDR;        # pair (nat %collateral) (pair (int %duration) (address %lender)) : pair (nat %amount) (address %borrower) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                DUP;        # pair (nat %collateral) (pair (int %duration) (address %lender)) : pair (nat %collateral) (pair (int %duration) (address %lender)) : pair (nat %amount) (address %borrower) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CAR;        # nat : pair (nat %collateral) (pair (int %duration) (address %lender)) : pair (nat %amount) (address %borrower) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # pair (nat %collateral) (pair (int %duration) (address %lender)) : nat : pair (nat %amount) (address %borrower) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                CDAR;       # int : nat : pair (nat %amount) (address %borrower) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SENDER;     # address : int : nat : pair (nat %amount) (address %borrower) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # int : address : nat : pair (nat %amount) (address %borrower) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                PAIR;       # pair int address : nat : pair (nat %amount) (address %borrower) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # nat : pair int address : pair (nat %amount) (address %borrower) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                PAIR;       # pair nat (pair int address) : pair (nat %amount) (address %borrower) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # pair (nat %amount) (address %borrower) : pair nat (pair int address) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                PAIR;       # pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                PAIR;       # pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SOME;       # option (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # @parameter%lend : option (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                UPDATE;     # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                PAIR;       # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (address %administrator) (big_map %balances address nat) : @parameter%lend
                SWAP;       # pair (address %administrator) (big_map %balances address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                PAIR;       # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend
                # self.data.balances[self.data.loans[params].borrower].balance += self.data.loans[params].amount # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend
                DUP;        # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend
                DUG 2;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CDR;        # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                SWAP;       # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CAR;        # pair (address %administrator) (big_map %balances address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # pair (address %administrator) (big_map %balances address nat) : pair (address %administrator) (big_map %balances address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CAR;        # address : pair (address %administrator) (big_map %balances address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                SWAP;       # pair (address %administrator) (big_map %balances address nat) : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CDR;        # big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 5;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                DUP;        # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                DUG 6;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 5;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # @parameter%lend : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUG 6;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                IF_SOME
                  {
                    # of_some: Get-item:51 # @some : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                  }
                  {
                    PUSH string "Get-item:51"; # string : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    FAILWITH;   # FAILED
                  }; # @some : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CAADR;      # address : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # address : address : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUG 2;      # address : big_map address nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                GET;        # option nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                IF_SOME
                  {
                    DROP;       # address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    # of_some: set_in_top-any # address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                  }
                  {
                    PUSH string "set_in_top-any"; # string : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    FAILWITH;   # FAILED
                  }; # address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 5;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                DUP;        # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                DUG 6;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 5;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # @parameter%lend : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUG 6;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                IF_SOME
                  {
                    # of_some: Get-item:51 # @some : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                  }
                  {
                    PUSH string "Get-item:51"; # string : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    FAILWITH;   # FAILED
                  }; # @some : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CAAAR;      # nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 6;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                DUP;        # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                DUG 7;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CADR;       # big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 7;      # pair (pair (address %administrator) (big_map %balances address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                DIG 7;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                DUP;        # @parameter%lend : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                DUG 8;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                IF_SOME
                  {
                    # of_some: Get-item:51 # @some : big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                  }
                  {
                    PUSH string "Get-item:51"; # string : big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                    FAILWITH;   # FAILED
                  }; # @some : big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                CAADR;      # address : big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                GET;        # option nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                IF_SOME
                  {
                    # of_some: Get-item:58 # @some : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                  }
                  {
                    PUSH string "Get-item:58"; # string : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                    FAILWITH;   # FAILED
                  }; # @some : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                ADD;        # nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                SOME;       # option nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                SWAP;       # address : option nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                UPDATE;     # big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                SWAP;       # address : big_map address nat : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                PAIR;       # pair address (big_map address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                PAIR;       # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend
                # self.data.balances[sp.sender].balance = sp.as_nat(self.data.balances[sp.sender].balance - self.data.loans[params].amount) # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend
                DUP;        # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend
                DUG 2;      # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CDR;        # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                SWAP;       # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CAR;        # pair address (big_map address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # pair address (big_map address nat) : pair address (big_map address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CAR;        # address : pair address (big_map address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                SWAP;       # pair address (big_map address nat) : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CDR;        # big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                SENDER;     # address : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # address : address : big_map address nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUG 2;      # address : big_map address nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                GET;        # option nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                IF_SOME
                  {
                    DROP;       # address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    # of_some: set_in_top-any # address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                  }
                  {
                    PUSH string "set_in_top-any"; # string : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    FAILWITH;   # FAILED
                  }; # address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 5;      # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                DUP;        # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                DUG 6;      # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 5;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # @parameter%lend : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUG 6;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                IF_SOME
                  {
                    # of_some: Get-item:51 # @some : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                  }
                  {
                    PUSH string "Get-item:51"; # string : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    FAILWITH;   # FAILED
                  }; # @some : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CAAAR;      # nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 6;      # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                CADR;       # big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                SENDER;     # address : big_map address nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                GET;        # option nat : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                IF_SOME
                  {
                    # of_some: Get-item:-1 # @some : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                  }
                  {
                    PUSH string "Get-item:-1"; # string : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                    FAILWITH;   # FAILED
                  }; # @some : nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                SUB;        # int : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                ISNAT;      # option nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                IF_SOME
                  {}
                  {
                    UNIT;       # unit : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                    FAILWITH;   # FAILED
                  }; # @some : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                SOME;       # option nat : address : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                SWAP;       # address : option nat : big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                UPDATE;     # big_map address nat : address : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                SWAP;       # address : big_map address nat : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                PAIR;       # pair address (big_map address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%lend
                PAIR;       # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend
                # self.data.loans[params].starttime = sp.timestamp(1595752470) # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend
                DUP;        # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend
                CAR;        # pair address (big_map address nat) : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%lend
                SWAP;       # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair address (big_map address nat) : @parameter%lend
                CDR;        # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair address (big_map address nat) : @parameter%lend
                DUP;        # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair address (big_map address nat) : @parameter%lend
                CDR;        # pair (nat %noLoans) (nat %totalSupply) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair address (big_map address nat) : @parameter%lend
                SWAP;       # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat) : @parameter%lend
                CAR;        # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat) : @parameter%lend
                DUP;        # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat) : @parameter%lend
                DIG 4;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                DUP;        # @parameter%lend : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                DUG 2;      # @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                IF_SOME
                  {
                    # of_some: set_in_top-any # @some : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                  }
                  {
                    PUSH string "set_in_top-any"; # string : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                    FAILWITH;   # FAILED
                  }; # @some : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                DUP;        # @some : @some : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                CAR;        # pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @some : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                SWAP;       # @some : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                CDR;        # pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                DUP;        # pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                CAR;        # pair bool bool : pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                SWAP;       # pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))) : pair bool bool : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                CDR;        # pair (nat %payback) (pair (bool %req) (timestamp %starttime)) : pair bool bool : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                DUP;        # pair (nat %payback) (pair (bool %req) (timestamp %starttime)) : pair (nat %payback) (pair (bool %req) (timestamp %starttime)) : pair bool bool : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                CAR;        # nat : pair (nat %payback) (pair (bool %req) (timestamp %starttime)) : pair bool bool : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                SWAP;       # pair (nat %payback) (pair (bool %req) (timestamp %starttime)) : nat : pair bool bool : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                CDAR;       # bool : nat : pair bool bool : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                PUSH timestamp "1595752470"; # timestamp : bool : nat : pair bool bool : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                SWAP;       # bool : timestamp : nat : pair bool bool : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                PAIR;       # pair bool timestamp : nat : pair bool bool : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                SWAP;       # nat : pair bool timestamp : pair bool bool : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                PAIR;       # pair nat (pair bool timestamp) : pair bool bool : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                SWAP;       # pair bool bool : pair nat (pair bool timestamp) : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                PAIR;       # pair (pair bool bool) (pair nat (pair bool timestamp)) : pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                SWAP;       # pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address)) : pair (pair bool bool) (pair nat (pair bool timestamp)) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                PAIR;       # pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair nat (pair bool timestamp))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                SOME;       # option (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair nat (pair bool timestamp)))) : @parameter%lend : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                SWAP;       # @parameter%lend : option (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair nat (pair bool timestamp)))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                UPDATE;     # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair nat (pair bool timestamp)))) : pair (nat %noLoans) (nat %totalSupply) : pair address (big_map address nat)
                PAIR;       # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair nat (pair bool timestamp))))) (pair (nat %noLoans) (nat %totalSupply)) : pair address (big_map address nat)
                SWAP;       # pair address (big_map address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair nat (pair bool timestamp))))) (pair (nat %noLoans) (nat %totalSupply))
                PAIR;       # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair nat (pair bool timestamp))))) (pair (nat %noLoans) (nat %totalSupply)))
                NIL operation; # list operation : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair nat (pair int address))) (pair (pair bool bool) (pair nat (pair bool timestamp))))) (pair (nat %noLoans) (nat %totalSupply)))
              }; # list operation : @storage
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%mint
                # == mint ==
                # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%mint
                DUP;        # @storage : @storage : @parameter%mint
                DUG 2;      # @storage : @parameter%mint : @storage
                CAAR;       # address : @parameter%mint : @storage
                SENDER;     # address : address : @parameter%mint : @storage
                COMPARE;    # int : @parameter%mint : @storage
                EQ;         # bool : @parameter%mint : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%mint : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%mint : @storage
                SWAP;       # @storage : @parameter%mint
                # if ~ (self.data.balances.contains(params.address)): # @storage : @parameter%mint
                DUP;        # @storage : @storage : @parameter%mint
                DUG 2;      # @storage : @parameter%mint : @storage
                CADR;       # big_map address nat : @parameter%mint : @storage
                SWAP;       # @parameter%mint : big_map address nat : @storage
                DUP;        # @parameter%mint : @parameter%mint : big_map address nat : @storage
                DUG 2;      # @parameter%mint : big_map address nat : @parameter%mint : @storage
                CAR;        # address : big_map address nat : @parameter%mint : @storage
                MEM;        # bool : @parameter%mint : @storage
                IF
                  {}
                  {
                    SWAP;       # @storage : @parameter%mint
                    # self.data.balances[params.address] = sp.record(balance = 0) # @storage : @parameter%mint
                    DUP;        # @storage : @storage : @parameter%mint
                    CDR;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @storage : @parameter%mint
                    SWAP;       # @storage : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                    CAR;        # pair (address %administrator) (big_map %balances address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                    DUP;        # pair (address %administrator) (big_map %balances address nat) : pair (address %administrator) (big_map %balances address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                    CAR;        # address : pair (address %administrator) (big_map %balances address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                    SWAP;       # pair (address %administrator) (big_map %balances address nat) : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                    CDR;        # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                    PUSH (option nat) (Some 0); # option nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                    DIG 4;      # @parameter%mint : option nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    DUP;        # @parameter%mint : @parameter%mint : option nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    DUG 5;      # @parameter%mint : option nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                    CAR;        # address : option nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                    UPDATE;     # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                    SWAP;       # address : big_map address nat : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                    PAIR;       # pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                    PAIR;       # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%mint
                    SWAP;       # @parameter%mint : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                  }; # @parameter%mint : @storage
                SWAP;       # @storage : @parameter%mint
                # self.data.balances[params.address].balance += params.value # @storage : @parameter%mint
                DUP;        # @storage : @storage : @parameter%mint
                DUG 2;      # @storage : @parameter%mint : @storage
                DUP;        # @storage : @storage : @parameter%mint : @storage
                CDR;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @storage : @parameter%mint : @storage
                SWAP;       # @storage : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                CAR;        # pair (address %administrator) (big_map %balances address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                DUP;        # pair (address %administrator) (big_map %balances address nat) : pair (address %administrator) (big_map %balances address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                CAR;        # address : pair (address %administrator) (big_map %balances address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                SWAP;       # pair (address %administrator) (big_map %balances address nat) : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                CDR;        # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                DUP;        # big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                DIG 4;      # @parameter%mint : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @storage
                DUP;        # @parameter%mint : @parameter%mint : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @storage
                DUG 5;      # @parameter%mint : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                CAR;        # address : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                DUP;        # address : address : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                DUG 2;      # address : big_map address nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                GET;        # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                IF_SOME
                  {
                    DROP;       # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                    # of_some: set_in_top-any # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                  }
                  {
                    PUSH string "set_in_top-any"; # string : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                    FAILWITH;   # FAILED
                  }; # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                DIG 4;      # @parameter%mint : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @storage
                DUP;        # @parameter%mint : @parameter%mint : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @storage
                DUG 5;      # @parameter%mint : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                CDR;        # nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint : @storage
                DIG 6;      # @storage : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                CADR;       # big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                DIG 6;      # @parameter%mint : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                DUP;        # @parameter%mint : @parameter%mint : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                DUG 7;      # @parameter%mint : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                CAR;        # address : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                GET;        # option nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                IF_SOME
                  {
                    # of_some: Get-item:97 # @some : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                  }
                  {
                    PUSH string "Get-item:97"; # string : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                    FAILWITH;   # FAILED
                  }; # @some : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                ADD;        # nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                SOME;       # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                SWAP;       # address : option nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                UPDATE;     # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                SWAP;       # address : big_map address nat : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                PAIR;       # pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%mint
                PAIR;       # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%mint
                # self.data.totalSupply += params.value # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%mint
                DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%mint
                DUG 2;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%mint : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%mint : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CAR;        # pair address (big_map address nat) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%mint : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                SWAP;       # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair address (big_map address nat) : @parameter%mint : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CDR;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair address (big_map address nat) : @parameter%mint : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DUP;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair address (big_map address nat) : @parameter%mint : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CAR;        # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair address (big_map address nat) : @parameter%mint : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                SWAP;       # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair address (big_map address nat) : @parameter%mint : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CDAR;       # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair address (big_map address nat) : @parameter%mint : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 3;      # @parameter%mint : nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair address (big_map address nat) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                CDR;        # nat : nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair address (big_map address nat) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                DIG 4;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair address (big_map address nat)
                CDDDR;      # nat : nat : nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair address (big_map address nat)
                ADD;        # nat : nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair address (big_map address nat)
                SWAP;       # nat : nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair address (big_map address nat)
                PAIR;       # pair nat nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair address (big_map address nat)
                SWAP;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : pair nat nat : pair address (big_map address nat)
                PAIR;       # pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat) : pair address (big_map address nat)
                SWAP;       # pair address (big_map address nat) : pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)
                PAIR;       # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
              }
              {
                IF_LEFT
                  {
                    # == paid ==
                    # sp.verify(self.data.loans[params.index].borrower == sp.sender) # @parameter%paid : @storage
                    SENDER;     # address : @parameter%paid : @storage
                    DIG 2;      # @storage : address : @parameter%paid
                    DUP;        # @storage : @storage : address : @parameter%paid
                    DUG 3;      # @storage : address : @parameter%paid : @storage
                    CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : @parameter%paid : @storage
                    DIG 2;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : @storage
                    DUP;        # @parameter%paid : @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : @storage
                    DUG 3;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : @parameter%paid : @storage
                    CDR;        # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : @parameter%paid : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : @parameter%paid : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:28 # @some : address : @parameter%paid : @storage
                      }
                      {
                        PUSH string "Get-item:28"; # string : address : @parameter%paid : @storage
                        FAILWITH;   # FAILED
                      }; # @some : address : @parameter%paid : @storage
                    CAADR;      # address : address : @parameter%paid : @storage
                    COMPARE;    # int : @parameter%paid : @storage
                    EQ;         # bool : @parameter%paid : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.loans[params.index].borrower == sp.sender"; # string : @parameter%paid : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%paid : @storage
                    SWAP;       # @storage : @parameter%paid
                    # sp.verify(params.amount >= self.data.loans[params.index].payback) # @storage : @parameter%paid
                    DUP;        # @storage : @storage : @parameter%paid
                    DUG 2;      # @storage : @parameter%paid : @storage
                    CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%paid : @storage
                    SWAP;       # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @storage
                    DUP;        # @parameter%paid : @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @storage
                    DUG 2;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%paid : @storage
                    CDR;        # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%paid : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%paid : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:28 # @some : @parameter%paid : @storage
                      }
                      {
                        PUSH string "Get-item:28"; # string : @parameter%paid : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%paid : @storage
                    CDDAR;      # nat : @parameter%paid : @storage
                    SWAP;       # @parameter%paid : nat : @storage
                    DUP;        # @parameter%paid : @parameter%paid : nat : @storage
                    DUG 2;      # @parameter%paid : nat : @parameter%paid : @storage
                    CAR;        # nat : nat : @parameter%paid : @storage
                    COMPARE;    # int : @parameter%paid : @storage
                    GE;         # bool : @parameter%paid : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: params.amount >= self.data.loans[params.index].payback"; # string : @parameter%paid : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%paid : @storage
                    SWAP;       # @storage : @parameter%paid
                    # sp.verify(self.data.loans[params.index].duration >= (sp.timestamp(1595752470) - self.data.loans[params.index].starttime)) # @storage : @parameter%paid
                    DUP;        # @storage : @storage : @parameter%paid
                    DUG 2;      # @storage : @parameter%paid : @storage
                    CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%paid : @storage
                    SWAP;       # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @storage
                    DUP;        # @parameter%paid : @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @storage
                    DUG 2;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%paid : @storage
                    CDR;        # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%paid : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : @parameter%paid : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:28 # @some : @parameter%paid : @storage
                      }
                      {
                        PUSH string "Get-item:28"; # string : @parameter%paid : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%paid : @storage
                    CDDDDR;     # timestamp : @parameter%paid : @storage
                    PUSH timestamp "1595752470"; # timestamp : timestamp : @parameter%paid : @storage
                    SUB;        # int : @parameter%paid : @storage
                    DIG 2;      # @storage : int : @parameter%paid
                    DUP;        # @storage : @storage : int : @parameter%paid
                    DUG 3;      # @storage : int : @parameter%paid : @storage
                    CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : int : @parameter%paid : @storage
                    DIG 2;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : int : @storage
                    DUP;        # @parameter%paid : @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : int : @storage
                    DUG 3;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : int : @parameter%paid : @storage
                    CDR;        # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : int : @parameter%paid : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : int : @parameter%paid : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:28 # @some : int : @parameter%paid : @storage
                      }
                      {
                        PUSH string "Get-item:28"; # string : int : @parameter%paid : @storage
                        FAILWITH;   # FAILED
                      }; # @some : int : @parameter%paid : @storage
                    CADDAR;     # int : int : @parameter%paid : @storage
                    COMPARE;    # int : @parameter%paid : @storage
                    GE;         # bool : @parameter%paid : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.loans[params.index].duration >= (sp.timestamp(1595752470) - self.data.loans[params.index].starttime)"; # string : @parameter%paid : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%paid : @storage
                    # sp.verify(self.data.loans[params.index].lent == True) # @parameter%paid : @storage
                    PUSH bool True; # bool : @parameter%paid : @storage
                    DIG 2;      # @storage : bool : @parameter%paid
                    DUP;        # @storage : @storage : bool : @parameter%paid
                    DUG 3;      # @storage : bool : @parameter%paid : @storage
                    CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @parameter%paid : @storage
                    DIG 2;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @storage
                    DUP;        # @parameter%paid : @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @storage
                    DUG 3;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @parameter%paid : @storage
                    CDR;        # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @parameter%paid : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : bool : @parameter%paid : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:28 # @some : bool : @parameter%paid : @storage
                      }
                      {
                        PUSH string "Get-item:28"; # string : bool : @parameter%paid : @storage
                        FAILWITH;   # FAILED
                      }; # @some : bool : @parameter%paid : @storage
                    CDAAR;      # bool : bool : @parameter%paid : @storage
                    COMPARE;    # int : @parameter%paid : @storage
                    EQ;         # bool : @parameter%paid : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.loans[params.index].lent == True"; # string : @parameter%paid : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%paid : @storage
                    SWAP;       # @storage : @parameter%paid
                    # self.data.balances[sp.sender].balance = sp.as_nat(self.data.balances[sp.sender].balance - self.data.loans[params.index].payback) # @storage : @parameter%paid
                    DUP;        # @storage : @storage : @parameter%paid
                    DUG 2;      # @storage : @parameter%paid : @storage
                    DUP;        # @storage : @storage : @parameter%paid : @storage
                    CDR;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @storage : @parameter%paid : @storage
                    SWAP;       # @storage : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    CAR;        # pair (address %administrator) (big_map %balances address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    DUP;        # pair (address %administrator) (big_map %balances address nat) : pair (address %administrator) (big_map %balances address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    CAR;        # address : pair (address %administrator) (big_map %balances address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    SWAP;       # pair (address %administrator) (big_map %balances address nat) : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    CDR;        # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    DUP;        # big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    SENDER;     # address : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    DUP;        # address : address : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    DUG 2;      # address : big_map address nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    GET;        # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    IF_SOME
                      {
                        DROP;       # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                        # of_some: set_in_top-any # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                      }
                      {
                        PUSH string "set_in_top-any"; # string : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                        FAILWITH;   # FAILED
                      }; # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    DIG 5;      # @storage : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUP;        # @storage : @storage : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUG 6;      # @storage : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    DIG 5;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @storage
                    DUP;        # @parameter%paid : @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @storage
                    DUG 6;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    CDR;        # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:28 # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                      }
                      {
                        PUSH string "Get-item:28"; # string : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    CDDAR;      # nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : @storage
                    DIG 6;      # @storage : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    CADR;       # big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    SENDER;     # address : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    GET;        # option nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    IF_SOME
                      {
                        # of_some: Get-item:-1 # @some : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                      }
                      {
                        PUSH string "Get-item:-1"; # string : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                        FAILWITH;   # FAILED
                      }; # @some : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    SUB;        # int : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    ISNAT;      # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    SOME;       # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    SWAP;       # address : option nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    UPDATE;     # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    SWAP;       # address : big_map address nat : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    PAIR;       # pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    PAIR;       # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid
                    # self.data.balances[sp.sender].balance += self.data.loans[params.index].collateral # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid
                    DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid
                    DUG 2;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDR;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    SWAP;       # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CAR;        # pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # pair address (big_map address nat) : pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CAR;        # address : pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    SWAP;       # pair address (big_map address nat) : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDR;        # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    SENDER;     # address : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # address : address : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUG 2;      # address : big_map address nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    GET;        # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    IF_SOME
                      {
                        DROP;       # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                        # of_some: set_in_top-any # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                      }
                      {
                        PUSH string "set_in_top-any"; # string : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                        FAILWITH;   # FAILED
                      }; # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DIG 5;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUG 6;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DIG 5;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # @parameter%paid : @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUG 6;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDR;        # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    IF_SOME
                      {
                        # of_some: Get-item:28 # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                      }
                      {
                        PUSH string "Get-item:28"; # string : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CADAR;      # nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DIG 6;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    CADR;       # big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    SENDER;     # address : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    GET;        # option nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    IF_SOME
                      {
                        # of_some: Get-item:-1 # @some : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                      }
                      {
                        PUSH string "Get-item:-1"; # string : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                        FAILWITH;   # FAILED
                      }; # @some : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    ADD;        # nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    SOME;       # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    SWAP;       # address : option nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    UPDATE;     # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    SWAP;       # address : big_map address nat : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    PAIR;       # pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    PAIR;       # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid
                    # self.data.balances[self.data.administrator].balance = sp.as_nat(self.data.balances[self.data.administrator].balance - self.data.loans[params.index].collateral) # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid
                    DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid
                    DUG 2;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDR;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    SWAP;       # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CAR;        # pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # pair address (big_map address nat) : pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CAR;        # address : pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    SWAP;       # pair address (big_map address nat) : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDR;        # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DIG 5;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUG 6;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CAAR;       # address : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # address : address : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUG 2;      # address : big_map address nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    GET;        # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    IF_SOME
                      {
                        DROP;       # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                        # of_some: set_in_top-any # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                      }
                      {
                        PUSH string "set_in_top-any"; # string : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                        FAILWITH;   # FAILED
                      }; # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DIG 5;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUG 6;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DIG 5;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # @parameter%paid : @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUG 6;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDR;        # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    IF_SOME
                      {
                        # of_some: Get-item:28 # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                      }
                      {
                        PUSH string "Get-item:28"; # string : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CADAR;      # nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DIG 6;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUG 7;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CADR;       # big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DIG 7;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    CAAR;       # address : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    GET;        # option nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    IF_SOME
                      {
                        # of_some: Get-item:48 # @some : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                      }
                      {
                        PUSH string "Get-item:48"; # string : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                        FAILWITH;   # FAILED
                      }; # @some : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    SUB;        # int : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    ISNAT;      # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    IF_SOME
                      {}
                      {
                        UNIT;       # unit : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    SOME;       # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    SWAP;       # address : option nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    UPDATE;     # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    SWAP;       # address : big_map address nat : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    PAIR;       # pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    PAIR;       # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid
                    # self.data.balances[self.data.loans[params.index].lender].balance += self.data.loans[params.index].payback # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid
                    DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid
                    DUG 2;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDR;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    SWAP;       # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CAR;        # pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # pair address (big_map address nat) : pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CAR;        # address : pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    SWAP;       # pair address (big_map address nat) : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDR;        # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DIG 5;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUG 6;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DIG 5;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # @parameter%paid : @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUG 6;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDR;        # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    IF_SOME
                      {
                        # of_some: Get-item:28 # @some : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                      }
                      {
                        PUSH string "Get-item:28"; # string : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                        FAILWITH;   # FAILED
                      }; # @some : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CADDDR;     # address : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # address : address : big_map address nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUG 2;      # address : big_map address nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    GET;        # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    IF_SOME
                      {
                        DROP;       # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                        # of_some: set_in_top-any # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                      }
                      {
                        PUSH string "set_in_top-any"; # string : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                        FAILWITH;   # FAILED
                      }; # address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DIG 5;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUG 6;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DIG 5;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUP;        # @parameter%paid : @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DUG 6;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDR;        # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    IF_SOME
                      {
                        # of_some: Get-item:28 # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                      }
                      {
                        PUSH string "Get-item:28"; # string : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CDDAR;      # nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DIG 6;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUP;        # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DUG 7;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    CADR;       # big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid : pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                    DIG 7;      # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))) : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    CDAR;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%paid
                    DIG 7;      # @parameter%paid : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    CDR;        # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime))))) : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    IF_SOME
                      {
                        # of_some: Get-item:28 # @some : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                      }
                      {
                        PUSH string "Get-item:28"; # string : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                        FAILWITH;   # FAILED
                      }; # @some : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    CADDDR;     # address : big_map address nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    GET;        # option nat : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    IF_SOME
                      {
                        # of_some: Get-item:74 # @some : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                      }
                      {
                        PUSH string "Get-item:74"; # string : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                        FAILWITH;   # FAILED
                      }; # @some : nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    ADD;        # nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    SOME;       # option nat : address : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    SWAP;       # address : option nat : big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    UPDATE;     # big_map address nat : address : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    SWAP;       # address : big_map address nat : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    PAIR;       # pair address (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    PAIR;       # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                  }
                  {
                    SWAP;       # @storage : @parameter%setAdministrator
                    # == setAdministrator ==
                    # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%setAdministrator
                    DUP;        # @storage : @storage : @parameter%setAdministrator
                    DUG 2;      # @storage : @parameter%setAdministrator : @storage
                    CAAR;       # address : @parameter%setAdministrator : @storage
                    SENDER;     # address : address : @parameter%setAdministrator : @storage
                    COMPARE;    # int : @parameter%setAdministrator : @storage
                    EQ;         # bool : @parameter%setAdministrator : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%setAdministrator : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setAdministrator : @storage
                    SWAP;       # @storage : @parameter%setAdministrator
                    # self.data.administrator = params # @storage : @parameter%setAdministrator
                    DUP;        # @storage : @storage : @parameter%setAdministrator
                    CDR;        # pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @storage : @parameter%setAdministrator
                    SWAP;       # @storage : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%setAdministrator
                    CADR;       # big_map address nat : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)) : @parameter%setAdministrator
                    DIG 2;      # @parameter%setAdministrator : big_map address nat : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    PAIR;       # pair @parameter%setAdministrator (big_map address nat) : pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))
                    PAIR;       # pair (pair @parameter%setAdministrator (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
                  }; # pair (pair address (big_map address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply)))
              }; # pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
            NIL operation; # list operation : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
          }; # list operation : @storage
      }; # list operation : pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat))
    PAIR;       # pair (list operation) (pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)))
  } # pair (list operation) (pair (pair address (big_map address nat)) (pair (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair nat nat)))