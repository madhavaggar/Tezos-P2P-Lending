parameter (pair (pair (address %administrator) (big_map %balances address nat)) (pair (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (nat %collateral) (pair (int %duration) (address %lender)))) (pair (pair (bool %lent) (bool %paid)) (pair (nat %payback) (pair (bool %req) (timestamp %starttime)))))) (pair (nat %noLoans) (nat %totalSupply))));
storage   unit;
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    # == verify ==
    # sp.verify(params.k0.balances[sp.address('tz1hdQscorfqMzFqYxnrApuS5i6QSTuoAp3w')].balance == 1100) # @parameter : @storage
    CADR;       # big_map address nat : @storage
    PUSH nat 1100; # nat : big_map address nat : @storage
    SWAP;       # big_map address nat : nat : @storage
    PUSH address "tz1hdQscorfqMzFqYxnrApuS5i6QSTuoAp3w"; # address : big_map address nat : nat : @storage
    GET;        # option nat : nat : @storage
    IF_SOME
      {
        # of_some: Get-item:-1 # @some : nat : @storage
      }
      {
        PUSH string "Get-item:-1"; # string : nat : @storage
        FAILWITH;   # FAILED
      }; # @some : nat : @storage
    COMPARE;    # int : @storage
    EQ;         # bool : @storage
    IF
      {}
      {
        PUSH string "WrongCondition: params.k0.balances[sp.address('tz1hdQscorfqMzFqYxnrApuS5i6QSTuoAp3w')].balance == 1100"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    NIL operation; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  } # pair (list operation) @storage