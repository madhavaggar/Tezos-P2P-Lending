{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ConseilErrorTypes_1 = require(\"../types/conseil/ConseilErrorTypes\");\n\nconst FetchSelector_1 = __importDefault(require(\"../utils/FetchSelector\"));\n\nconst LoggerSelector_1 = __importDefault(require(\"../utils/LoggerSelector\"));\n\nconst log = LoggerSelector_1.default.getLogger();\nconst fetch = FetchSelector_1.default.getFetch();\nvar ConseilMetadataClient;\n\n(function (ConseilMetadataClient) {\n  function executeMetadataQuery(serverInfo, route) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return fetch(`${serverInfo.url}/v2/metadata/${route}`, {\n        method: 'GET',\n        headers: {\n          'apiKey': serverInfo.apiKey\n        }\n      }).then(r => {\n        if (!r.ok) {\n          throw new ConseilErrorTypes_1.ConseilRequestError(r.status, r.statusText, `${serverInfo.url}/v2/metadata/${route}`, null);\n        }\n\n        return r;\n      }).then(r => r.json().catch(error => {\n        log.error(`ConseilMetadataClient.executeMetadataQuery parsing failed for ${serverInfo.url}/v2/metadata/${route} with ${error}`);\n      }));\n    });\n  }\n\n  ConseilMetadataClient.executeMetadataQuery = executeMetadataQuery;\n\n  function getPlatforms(serverInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return executeMetadataQuery(serverInfo, 'platforms');\n    });\n  }\n\n  ConseilMetadataClient.getPlatforms = getPlatforms;\n\n  function getNetworks(serverInfo, platform) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return executeMetadataQuery(serverInfo, `${platform}/networks`);\n    });\n  }\n\n  ConseilMetadataClient.getNetworks = getNetworks;\n\n  function getEntities(serverInfo, platform, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return executeMetadataQuery(serverInfo, `${platform}/${network}/entities`);\n    });\n  }\n\n  ConseilMetadataClient.getEntities = getEntities;\n\n  function getAttributes(serverInfo, platform, network, entity) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return executeMetadataQuery(serverInfo, `${platform}/${network}/${entity}/attributes`);\n    });\n  }\n\n  ConseilMetadataClient.getAttributes = getAttributes;\n\n  function getAttributeValues(serverInfo, platform, network, entity, attribute) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return executeMetadataQuery(serverInfo, `${platform}/${network}/${entity}/${attribute}`);\n    });\n  }\n\n  ConseilMetadataClient.getAttributeValues = getAttributeValues;\n\n  function getAttributeValuesForPrefix(serverInfo, platform, network, entity, attribute, prefix) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return executeMetadataQuery(serverInfo, `${platform}/${network}/${entity}/${attribute}/${encodeURIComponent(prefix)}`);\n    });\n  }\n\n  ConseilMetadataClient.getAttributeValuesForPrefix = getAttributeValuesForPrefix;\n})(ConseilMetadataClient = exports.ConseilMetadataClient || (exports.ConseilMetadataClient = {}));","map":{"version":3,"sources":["../../src/reporting/ConseilMetadataClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ConseilErrorTypes_1 = require(\"../types/conseil/ConseilErrorTypes\");\nconst FetchSelector_1 = __importDefault(require(\"../utils/FetchSelector\"));\nconst LoggerSelector_1 = __importDefault(require(\"../utils/LoggerSelector\"));\nconst log = LoggerSelector_1.default.getLogger();\nconst fetch = FetchSelector_1.default.getFetch();\nvar ConseilMetadataClient;\n(function (ConseilMetadataClient) {\n    function executeMetadataQuery(serverInfo, route) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return fetch(`${serverInfo.url}/v2/metadata/${route}`, {\n                method: 'GET',\n                headers: { 'apiKey': serverInfo.apiKey }\n            })\n                .then(r => {\n                if (!r.ok) {\n                    throw new ConseilErrorTypes_1.ConseilRequestError(r.status, r.statusText, `${serverInfo.url}/v2/metadata/${route}`, null);\n                }\n                return r;\n            })\n                .then(r => r.json()\n                .catch(error => {\n                log.error(`ConseilMetadataClient.executeMetadataQuery parsing failed for ${serverInfo.url}/v2/metadata/${route} with ${error}`);\n            }));\n        });\n    }\n    ConseilMetadataClient.executeMetadataQuery = executeMetadataQuery;\n    function getPlatforms(serverInfo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return executeMetadataQuery(serverInfo, 'platforms');\n        });\n    }\n    ConseilMetadataClient.getPlatforms = getPlatforms;\n    function getNetworks(serverInfo, platform) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return executeMetadataQuery(serverInfo, `${platform}/networks`);\n        });\n    }\n    ConseilMetadataClient.getNetworks = getNetworks;\n    function getEntities(serverInfo, platform, network) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return executeMetadataQuery(serverInfo, `${platform}/${network}/entities`);\n        });\n    }\n    ConseilMetadataClient.getEntities = getEntities;\n    function getAttributes(serverInfo, platform, network, entity) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return executeMetadataQuery(serverInfo, `${platform}/${network}/${entity}/attributes`);\n        });\n    }\n    ConseilMetadataClient.getAttributes = getAttributes;\n    function getAttributeValues(serverInfo, platform, network, entity, attribute) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return executeMetadataQuery(serverInfo, `${platform}/${network}/${entity}/${attribute}`);\n        });\n    }\n    ConseilMetadataClient.getAttributeValues = getAttributeValues;\n    function getAttributeValuesForPrefix(serverInfo, platform, network, entity, attribute, prefix) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return executeMetadataQuery(serverInfo, `${platform}/${network}/${entity}/${attribute}/${encodeURIComponent(prefix)}`);\n        });\n    }\n    ConseilMetadataClient.getAttributeValuesForPrefix = getAttributeValuesForPrefix;\n})(ConseilMetadataClient = exports.ConseilMetadataClient || (exports.ConseilMetadataClient = {}));\n//# sourceMappingURL=ConseilMetadataClient.js.map"]},"metadata":{},"sourceType":"script"}