{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst blakejs = __importStar(require(\"blakejs\"));\n\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\n\nconst TezosLanguageUtil_1 = require(\"../TezosLanguageUtil\");\n\nconst TezosNodeReader_1 = require(\"../TezosNodeReader\");\n\nconst TezosNodeWriter_1 = require(\"../TezosNodeWriter\");\n\nconst TezosTypes = __importStar(require(\"../../../types/tezos/TezosChainTypes\"));\n\nvar MurbardMultisigHelper;\n\n(function (MurbardMultisigHelper) {\n  function verifyDestination(server, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const contract = yield TezosNodeReader_1.TezosNodeReader.getAccountForBlock(server, 'head', address);\n\n      if (!!!contract.script) {\n        throw new Error(`No code found at ${address}`);\n      }\n\n      const k = Buffer.from(blakejs.blake2s(JSON.stringify(contract.script.code), null, 16)).toString('hex');\n\n      if (k !== '914629850cfdad7b54a8c5a661d10bd0') {\n        throw new Error(`Contract does not match the expected code hash: ${k}, '914629850cfdad7b54a8c5a661d10bd0'`);\n      }\n\n      return true;\n    });\n  }\n\n  MurbardMultisigHelper.verifyDestination = verifyDestination;\n\n  function verifyScript(script) {\n    const k = Buffer.from(blakejs.blake2s(TezosLanguageUtil_1.TezosLanguageUtil.preProcessMichelsonScript(script).join('\\n'), null, 16)).toString('hex');\n\n    if (k !== 'ffcad1e376a6c8915780fe6676aceec6') {\n      throw new Error(`Contract does not match the expected code hash: ${k}, 'ffcad1e376a6c8915780fe6676aceec6'`);\n    }\n\n    return true;\n  }\n\n  MurbardMultisigHelper.verifyScript = verifyScript;\n\n  function getSimpleStorage(server, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);\n      return {\n        counter: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].int',\n          json: storageResult\n        })[0]),\n        threshold: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[0].int',\n          json: storageResult\n        })[0]),\n        keys: jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1]..string',\n          json: storageResult\n        })\n      };\n    });\n  }\n\n  MurbardMultisigHelper.getSimpleStorage = getSimpleStorage;\n\n  function deployContract(server, keyStore, delegate, fee, amount, counter, threshold, keys) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (threshold > keys.length) {\n        throw new Error('Number of keys provided is lower than the threshold');\n      }\n\n      const code = `parameter (pair (pair :payload (nat %counter) (or :action (pair :transfer (mutez %amount) (contract %dest unit)) (or (option %delegate key_hash) (pair %change_keys (nat %threshold) (list %keys key))))) (list %sigs (option signature)));\n        storage (pair (nat %stored_counter) (pair (nat %threshold) (list %keys key)));\n        code\n          {\n            UNPAIR ; SWAP ; DUP ; DIP { SWAP } ;\n            DIP\n              {\n                UNPAIR ;\n                DUP ; SELF ; ADDRESS ; CHAIN_ID ; PAIR ; PAIR ;\n                PACK ;\n                DIP { UNPAIR @counter ; DIP { SWAP } } ; SWAP\n              } ;\n            UNPAIR @stored_counter; DIP { SWAP };\n            ASSERT_CMPEQ ;\n            DIP { SWAP } ; UNPAIR @threshold @keys;\n            DIP\n              {\n                PUSH @valid nat 0; SWAP ;\n                ITER\n                  {\n                    DIP { SWAP } ; SWAP ;\n                    IF_CONS\n                      {\n                        IF_SOME\n                          { SWAP ;\n                            DIP\n                              {\n                                SWAP ; DIIP { DUUP } ;\n                                CHECK_SIGNATURE ; ASSERT ;\n                                PUSH nat 1 ; ADD @valid } }\n                          { SWAP ; DROP }\n                      }\n                      {\n                        FAIL\n                      } ;\n                    SWAP\n                  }\n              } ;\n            ASSERT_CMPLE ;\n            DROP ; DROP ;\n            DIP { UNPAIR ; PUSH nat 1 ; ADD @new_counter ; PAIR} ;\n            NIL operation ; SWAP ;\n            IF_LEFT\n              {\n                UNPAIR ; UNIT ; TRANSFER_TOKENS ; CONS }\n              { IF_LEFT {\n                          SET_DELEGATE ; CONS }\n                        {\n                          DIP { SWAP ; CAR } ; SWAP ; PAIR ; SWAP }} ;\n            PAIR }`;\n      const storage = `(Pair ${counter} (Pair ${threshold} { \"${keys.join('\" ; \"')}\" } ) )`;\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractOriginationOperation(server, keyStore, amount, delegate, fee, keyStore.derivationPath, 5000, 120000, code, storage, TezosTypes.TezosParameterFormat.Michelson);\n      return clearRPCOperationGroupHash(nodeResult['operationGroupID']);\n    });\n  }\n\n  MurbardMultisigHelper.deployContract = deployContract;\n\n  function clearRPCOperationGroupHash(hash) {\n    return hash.replace(/\\\"/g, '').replace(/\\n/, '');\n  }\n})(MurbardMultisigHelper = exports.MurbardMultisigHelper || (exports.MurbardMultisigHelper = {}));","map":{"version":3,"sources":["../../../../src/chain/tezos/contracts/MurbardMultisigHelper.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst blakejs = __importStar(require(\"blakejs\"));\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\nconst TezosLanguageUtil_1 = require(\"../TezosLanguageUtil\");\nconst TezosNodeReader_1 = require(\"../TezosNodeReader\");\nconst TezosNodeWriter_1 = require(\"../TezosNodeWriter\");\nconst TezosTypes = __importStar(require(\"../../../types/tezos/TezosChainTypes\"));\nvar MurbardMultisigHelper;\n(function (MurbardMultisigHelper) {\n    function verifyDestination(server, address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const contract = yield TezosNodeReader_1.TezosNodeReader.getAccountForBlock(server, 'head', address);\n            if (!!!contract.script) {\n                throw new Error(`No code found at ${address}`);\n            }\n            const k = Buffer.from(blakejs.blake2s(JSON.stringify(contract.script.code), null, 16)).toString('hex');\n            if (k !== '914629850cfdad7b54a8c5a661d10bd0') {\n                throw new Error(`Contract does not match the expected code hash: ${k}, '914629850cfdad7b54a8c5a661d10bd0'`);\n            }\n            return true;\n        });\n    }\n    MurbardMultisigHelper.verifyDestination = verifyDestination;\n    function verifyScript(script) {\n        const k = Buffer.from(blakejs.blake2s(TezosLanguageUtil_1.TezosLanguageUtil.preProcessMichelsonScript(script).join('\\n'), null, 16)).toString('hex');\n        if (k !== 'ffcad1e376a6c8915780fe6676aceec6') {\n            throw new Error(`Contract does not match the expected code hash: ${k}, 'ffcad1e376a6c8915780fe6676aceec6'`);\n        }\n        return true;\n    }\n    MurbardMultisigHelper.verifyScript = verifyScript;\n    function getSimpleStorage(server, address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);\n            return {\n                counter: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].int', json: storageResult })[0]),\n                threshold: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[0].int', json: storageResult })[0]),\n                keys: jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1]..string', json: storageResult })\n            };\n        });\n    }\n    MurbardMultisigHelper.getSimpleStorage = getSimpleStorage;\n    function deployContract(server, keyStore, delegate, fee, amount, counter, threshold, keys) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (threshold > keys.length) {\n                throw new Error('Number of keys provided is lower than the threshold');\n            }\n            const code = `parameter (pair (pair :payload (nat %counter) (or :action (pair :transfer (mutez %amount) (contract %dest unit)) (or (option %delegate key_hash) (pair %change_keys (nat %threshold) (list %keys key))))) (list %sigs (option signature)));\n        storage (pair (nat %stored_counter) (pair (nat %threshold) (list %keys key)));\n        code\n          {\n            UNPAIR ; SWAP ; DUP ; DIP { SWAP } ;\n            DIP\n              {\n                UNPAIR ;\n                DUP ; SELF ; ADDRESS ; CHAIN_ID ; PAIR ; PAIR ;\n                PACK ;\n                DIP { UNPAIR @counter ; DIP { SWAP } } ; SWAP\n              } ;\n            UNPAIR @stored_counter; DIP { SWAP };\n            ASSERT_CMPEQ ;\n            DIP { SWAP } ; UNPAIR @threshold @keys;\n            DIP\n              {\n                PUSH @valid nat 0; SWAP ;\n                ITER\n                  {\n                    DIP { SWAP } ; SWAP ;\n                    IF_CONS\n                      {\n                        IF_SOME\n                          { SWAP ;\n                            DIP\n                              {\n                                SWAP ; DIIP { DUUP } ;\n                                CHECK_SIGNATURE ; ASSERT ;\n                                PUSH nat 1 ; ADD @valid } }\n                          { SWAP ; DROP }\n                      }\n                      {\n                        FAIL\n                      } ;\n                    SWAP\n                  }\n              } ;\n            ASSERT_CMPLE ;\n            DROP ; DROP ;\n            DIP { UNPAIR ; PUSH nat 1 ; ADD @new_counter ; PAIR} ;\n            NIL operation ; SWAP ;\n            IF_LEFT\n              {\n                UNPAIR ; UNIT ; TRANSFER_TOKENS ; CONS }\n              { IF_LEFT {\n                          SET_DELEGATE ; CONS }\n                        {\n                          DIP { SWAP ; CAR } ; SWAP ; PAIR ; SWAP }} ;\n            PAIR }`;\n            const storage = `(Pair ${counter} (Pair ${threshold} { \"${keys.join('\" ; \"')}\" } ) )`;\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractOriginationOperation(server, keyStore, amount, delegate, fee, keyStore.derivationPath, 5000, 120000, code, storage, TezosTypes.TezosParameterFormat.Michelson);\n            return clearRPCOperationGroupHash(nodeResult['operationGroupID']);\n        });\n    }\n    MurbardMultisigHelper.deployContract = deployContract;\n    function clearRPCOperationGroupHash(hash) {\n        return hash.replace(/\\\"/g, '').replace(/\\n/, '');\n    }\n})(MurbardMultisigHelper = exports.MurbardMultisigHelper || (exports.MurbardMultisigHelper = {}));\n//# sourceMappingURL=MurbardMultisigHelper.js.map"]},"metadata":{},"sourceType":"script"}