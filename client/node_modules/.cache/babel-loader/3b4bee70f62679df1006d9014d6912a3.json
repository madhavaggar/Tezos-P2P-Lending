{"ast":null,"code":"/**\n * This file is not meant for public use. It hides libsodium-wrappers from the Typescript transpiler.\n */\nconst sodiumsumo = require('libsodium-wrappers-sumo');\n\nconst rand = async length => {\n  await sodiumsumo.ready;\n  return sodiumsumo.randombytes_buf(length);\n};\n\nconst salt = async () => {\n  await sodiumsumo.ready;\n  return rand(sodiumsumo.crypto_pwhash_SALTBYTES);\n};\n\nconst nonce = async () => {\n  await sodiumsumo.ready;\n  return rand(sodiumsumo.crypto_box_NONCEBYTES);\n};\n\nconst keys = async seed => {\n  await sodiumsumo.ready;\n  return sodiumsumo.crypto_sign_seed_keypair(seed, '');\n};\n\nconst publickey = async sk => {\n  await sodiumsumo.ready;\n  const seed = sodiumsumo.crypto_sign_ed25519_sk_to_seed(sk);\n  return sodiumsumo.crypto_sign_seed_keypair(seed, '');\n};\n\nconst pwhash = async (passphrase, salt) => {\n  await sodiumsumo.ready;\n  return sodiumsumo.crypto_pwhash(sodiumsumo.crypto_box_SEEDBYTES, passphrase, salt, 4, 33554432, sodiumsumo.crypto_pwhash_ALG_ARGON2I13);\n};\n\nconst close = async (message, nonce, key) => {\n  await sodiumsumo.ready;\n  return sodiumsumo.crypto_secretbox_easy(message, nonce, key);\n};\n\nconst open = async (nonce_and_ciphertext, key) => {\n  await sodiumsumo.ready;\n  const nonce = nonce_and_ciphertext.slice(0, sodiumsumo.crypto_secretbox_NONCEBYTES);\n  const ciphertext = nonce_and_ciphertext.slice(sodiumsumo.crypto_secretbox_NONCEBYTES);\n  return sodiumsumo.crypto_secretbox_open_easy(ciphertext, nonce, key);\n};\n\nconst sign = async (message, key) => {\n  await sodiumsumo.ready;\n  return sodiumsumo.crypto_sign_detached(message, key);\n};\n\nconst checkSignature = async (sig, message, key) => {\n  await sodiumsumo.ready;\n  return sodiumsumo.crypto_sign_verify_detached(sig, message, key);\n};\n\nmodule.exports = {\n  salt,\n  nonce,\n  keys,\n  publickey,\n  pwhash,\n  close,\n  open,\n  sign,\n  checkSignature\n};","map":{"version":3,"sources":["/home/madhav/P2P Lending/client/node_modules/conseiljs/dist/utils/WrapperWrapper.js"],"names":["sodiumsumo","require","rand","length","ready","randombytes_buf","salt","crypto_pwhash_SALTBYTES","nonce","crypto_box_NONCEBYTES","keys","seed","crypto_sign_seed_keypair","publickey","sk","crypto_sign_ed25519_sk_to_seed","pwhash","passphrase","crypto_pwhash","crypto_box_SEEDBYTES","crypto_pwhash_ALG_ARGON2I13","close","message","key","crypto_secretbox_easy","open","nonce_and_ciphertext","slice","crypto_secretbox_NONCEBYTES","ciphertext","crypto_secretbox_open_easy","sign","crypto_sign_detached","checkSignature","sig","crypto_sign_verify_detached","module","exports"],"mappings":"AAAA;;;AAGA,MAAMA,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAA1B;;AAEA,MAAMC,IAAI,GAAG,MAAOC,MAAP,IAAkB;AAC3B,QAAMH,UAAU,CAACI,KAAjB;AACA,SAAOJ,UAAU,CAACK,eAAX,CAA2BF,MAA3B,CAAP;AACH,CAHD;;AAKA,MAAMG,IAAI,GAAG,YAAY;AACrB,QAAMN,UAAU,CAACI,KAAjB;AACA,SAAOF,IAAI,CAACF,UAAU,CAACO,uBAAZ,CAAX;AACH,CAHD;;AAKA,MAAMC,KAAK,GAAG,YAAY;AACtB,QAAMR,UAAU,CAACI,KAAjB;AACA,SAAOF,IAAI,CAACF,UAAU,CAACS,qBAAZ,CAAX;AACH,CAHD;;AAKA,MAAMC,IAAI,GAAG,MAAOC,IAAP,IAAgB;AACzB,QAAMX,UAAU,CAACI,KAAjB;AACA,SAAOJ,UAAU,CAACY,wBAAX,CAAoCD,IAApC,EAA0C,EAA1C,CAAP;AACH,CAHD;;AAKA,MAAME,SAAS,GAAG,MAAOC,EAAP,IAAc;AAC5B,QAAMd,UAAU,CAACI,KAAjB;AACA,QAAMO,IAAI,GAAGX,UAAU,CAACe,8BAAX,CAA0CD,EAA1C,CAAb;AACA,SAAOd,UAAU,CAACY,wBAAX,CAAoCD,IAApC,EAA0C,EAA1C,CAAP;AACH,CAJD;;AAMA,MAAMK,MAAM,GAAG,OAAOC,UAAP,EAAmBX,IAAnB,KAA4B;AACvC,QAAMN,UAAU,CAACI,KAAjB;AACA,SAAOJ,UAAU,CAACkB,aAAX,CAAyBlB,UAAU,CAACmB,oBAApC,EAA0DF,UAA1D,EAAsEX,IAAtE,EAA4E,CAA5E,EAA+E,QAA/E,EAAyFN,UAAU,CAACoB,2BAApG,CAAP;AACH,CAHD;;AAKA,MAAMC,KAAK,GAAG,OAAOC,OAAP,EAAgBd,KAAhB,EAAuBe,GAAvB,KAA+B;AACzC,QAAMvB,UAAU,CAACI,KAAjB;AACA,SAAOJ,UAAU,CAACwB,qBAAX,CAAiCF,OAAjC,EAA0Cd,KAA1C,EAAiDe,GAAjD,CAAP;AACH,CAHD;;AAKA,MAAME,IAAI,GAAG,OAAOC,oBAAP,EAA6BH,GAA7B,KAAqC;AAC9C,QAAMvB,UAAU,CAACI,KAAjB;AAEA,QAAMI,KAAK,GAAGkB,oBAAoB,CAACC,KAArB,CAA2B,CAA3B,EAA8B3B,UAAU,CAAC4B,2BAAzC,CAAd;AACA,QAAMC,UAAU,GAAGH,oBAAoB,CAACC,KAArB,CAA2B3B,UAAU,CAAC4B,2BAAtC,CAAnB;AAEA,SAAO5B,UAAU,CAAC8B,0BAAX,CAAsCD,UAAtC,EAAkDrB,KAAlD,EAAyDe,GAAzD,CAAP;AACH,CAPD;;AASA,MAAMQ,IAAI,GAAG,OAAOT,OAAP,EAAgBC,GAAhB,KAAwB;AACjC,QAAMvB,UAAU,CAACI,KAAjB;AACA,SAAOJ,UAAU,CAACgC,oBAAX,CAAgCV,OAAhC,EAAyCC,GAAzC,CAAP;AACH,CAHD;;AAKA,MAAMU,cAAc,GAAG,OAAOC,GAAP,EAAYZ,OAAZ,EAAqBC,GAArB,KAA6B;AAChD,QAAMvB,UAAU,CAACI,KAAjB;AACA,SAAOJ,UAAU,CAACmC,2BAAX,CAAuCD,GAAvC,EAA4CZ,OAA5C,EAAqDC,GAArD,CAAP;AACH,CAHD;;AAKAa,MAAM,CAACC,OAAP,GAAiB;AAAC/B,EAAAA,IAAD;AAAOE,EAAAA,KAAP;AAAcE,EAAAA,IAAd;AAAoBG,EAAAA,SAApB;AAA+BG,EAAAA,MAA/B;AAAuCK,EAAAA,KAAvC;AAA8CI,EAAAA,IAA9C;AAAoDM,EAAAA,IAApD;AAA0DE,EAAAA;AAA1D,CAAjB","sourcesContent":["/**\n * This file is not meant for public use. It hides libsodium-wrappers from the Typescript transpiler.\n */\nconst sodiumsumo = require('libsodium-wrappers-sumo');\n\nconst rand = async (length) => {\n    await sodiumsumo.ready;\n    return sodiumsumo.randombytes_buf(length);\n}\n\nconst salt = async () => {\n    await sodiumsumo.ready;\n    return rand(sodiumsumo.crypto_pwhash_SALTBYTES);\n}\n\nconst nonce = async () => {\n    await sodiumsumo.ready;\n    return rand(sodiumsumo.crypto_box_NONCEBYTES);\n}\n\nconst keys = async (seed) => {\n    await sodiumsumo.ready;\n    return sodiumsumo.crypto_sign_seed_keypair(seed, '');\n}\n\nconst publickey = async (sk) => {\n    await sodiumsumo.ready;\n    const seed = sodiumsumo.crypto_sign_ed25519_sk_to_seed(sk)\n    return sodiumsumo.crypto_sign_seed_keypair(seed, '');\n}\n\nconst pwhash = async (passphrase, salt) => {\n    await sodiumsumo.ready;\n    return sodiumsumo.crypto_pwhash(sodiumsumo.crypto_box_SEEDBYTES, passphrase, salt, 4, 33554432, sodiumsumo.crypto_pwhash_ALG_ARGON2I13);\n}\n\nconst close = async (message, nonce, key) => {\n    await sodiumsumo.ready;\n    return sodiumsumo.crypto_secretbox_easy(message, nonce, key);\n}\n\nconst open = async (nonce_and_ciphertext, key) => {\n    await sodiumsumo.ready;\n\n    const nonce = nonce_and_ciphertext.slice(0, sodiumsumo.crypto_secretbox_NONCEBYTES);\n    const ciphertext = nonce_and_ciphertext.slice(sodiumsumo.crypto_secretbox_NONCEBYTES);\n\n    return sodiumsumo.crypto_secretbox_open_easy(ciphertext, nonce, key);\n}\n\nconst sign = async (message, key) => {\n    await sodiumsumo.ready;\n    return sodiumsumo.crypto_sign_detached(message, key);\n}\n\nconst checkSignature = async (sig, message, key) => {\n    await sodiumsumo.ready;\n    return sodiumsumo.crypto_sign_verify_detached(sig, message, key);\n}\n\nmodule.exports = {salt, nonce, keys, publickey, pwhash, close, open, sign, checkSignature};\n"]},"metadata":{},"sourceType":"script"}