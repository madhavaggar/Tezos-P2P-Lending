{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst blakejs = __importStar(require(\"blakejs\"));\n\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\n\nconst TezosMessageUtil_1 = require(\"../TezosMessageUtil\");\n\nconst TezosNodeReader_1 = require(\"../TezosNodeReader\");\n\nvar DexterTokenHelper;\n\n(function (DexterTokenHelper) {\n  function verifyDestination(server, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const contract = yield TezosNodeReader_1.TezosNodeReader.getAccountForBlock(server, 'head', address);\n\n      if (!!!contract.script) {\n        throw new Error(`No code found at ${address}`);\n      }\n\n      const k = Buffer.from(blakejs.blake2s(contract['script'].toString(), null, 16)).toString('hex');\n\n      if (k !== '1234') {\n        throw new Error(`Contract at ${address} does not match the expected code hash`);\n      }\n\n      return true;\n    });\n  }\n\n  DexterTokenHelper.verifyDestination = verifyDestination;\n\n  function getBasicStorage(server, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);\n      console.log('-----');\n      console.log(storageResult);\n      console.log('-----');\n      return {\n        mapid: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].int',\n          json: storageResult\n        })[0]),\n        totalSupply: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].int',\n          json: storageResult\n        })[0])\n      };\n    });\n  }\n\n  DexterTokenHelper.getBasicStorage = getBasicStorage;\n\n  function getAddressRecord(server, mapid, account) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const key = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(account, 'address'), 'hex'));\n      const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, key);\n\n      if (!!!mapResult) {\n        return undefined;\n      }\n\n      return {\n        allowances: jsonpath_plus_1.JSONPath({\n          path: '$.args[0]',\n          json: mapResult\n        })[0],\n        balance: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].int',\n          json: mapResult\n        })[0])\n      };\n    });\n  }\n\n  DexterTokenHelper.getAddressRecord = getAddressRecord;\n\n  function deployContract(server, manager, supply) {\n    return __awaiter(this, void 0, void 0, function* () {});\n  }\n\n  DexterTokenHelper.deployContract = deployContract;\n})(DexterTokenHelper = exports.DexterTokenHelper || (exports.DexterTokenHelper = {}));","map":{"version":3,"sources":["../../../../src/chain/tezos/contracts/DexterTokenHelper.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst blakejs = __importStar(require(\"blakejs\"));\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\nconst TezosMessageUtil_1 = require(\"../TezosMessageUtil\");\nconst TezosNodeReader_1 = require(\"../TezosNodeReader\");\nvar DexterTokenHelper;\n(function (DexterTokenHelper) {\n    function verifyDestination(server, address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const contract = yield TezosNodeReader_1.TezosNodeReader.getAccountForBlock(server, 'head', address);\n            if (!!!contract.script) {\n                throw new Error(`No code found at ${address}`);\n            }\n            const k = Buffer.from(blakejs.blake2s(contract['script'].toString(), null, 16)).toString('hex');\n            if (k !== '1234') {\n                throw new Error(`Contract at ${address} does not match the expected code hash`);\n            }\n            return true;\n        });\n    }\n    DexterTokenHelper.verifyDestination = verifyDestination;\n    function getBasicStorage(server, address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);\n            console.log('-----');\n            console.log(storageResult);\n            console.log('-----');\n            return {\n                mapid: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].int', json: storageResult })[0]),\n                totalSupply: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].int', json: storageResult })[0])\n            };\n        });\n    }\n    DexterTokenHelper.getBasicStorage = getBasicStorage;\n    function getAddressRecord(server, mapid, account) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(account, 'address'), 'hex'));\n            const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, key);\n            if (!!!mapResult) {\n                return undefined;\n            }\n            return {\n                allowances: jsonpath_plus_1.JSONPath({ path: '$.args[0]', json: mapResult })[0],\n                balance: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].int', json: mapResult })[0])\n            };\n        });\n    }\n    DexterTokenHelper.getAddressRecord = getAddressRecord;\n    function deployContract(server, manager, supply) {\n        return __awaiter(this, void 0, void 0, function* () {\n        });\n    }\n    DexterTokenHelper.deployContract = deployContract;\n})(DexterTokenHelper = exports.DexterTokenHelper || (exports.DexterTokenHelper = {}));\n//# sourceMappingURL=DexterTokenHelper.js.map"]},"metadata":{},"sourceType":"script"}