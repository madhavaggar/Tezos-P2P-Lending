{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst blakejs = __importStar(require(\"blakejs\"));\n\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\n\nconst TezosMessageUtil_1 = require(\"../TezosMessageUtil\");\n\nconst TezosNodeReader_1 = require(\"../TezosNodeReader\");\n\nconst TezosNodeWriter_1 = require(\"../TezosNodeWriter\");\n\nconst TezosTypes = __importStar(require(\"../../../types/tezos/TezosChainTypes\"));\n\nvar CryptonomicNameServiceHelper;\n\n(function (CryptonomicNameServiceHelper) {\n  function verifyDestination(server, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const contract = yield TezosNodeReader_1.TezosNodeReader.getAccountForBlock(server, 'head', address);\n\n      if (!!!contract.script) {\n        throw new Error(`No code found at ${address}`);\n      }\n\n      const k = Buffer.from(blakejs.blake2s(contract['script'].toString(), null, 16)).toString('hex');\n\n      if (k !== 'c020219e31ee3b462ed93c33124f117f') {\n        throw new Error(`Contract at ${address} does not match the expected code hash: ${k}, 'c020219e31ee3b462ed93c33124f117f'`);\n      }\n\n      return true;\n    });\n  }\n\n  CryptonomicNameServiceHelper.verifyDestination = verifyDestination;\n\n  function registerName(server, keystore, contract, name, resolver, registrationPeriod, registrationFee, operationFee, freight, gas) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parameters = `(Pair ${registrationPeriod} (Pair \"${name}\" \"${resolver}\"))`;\n\n      if (!freight || !gas) {\n        const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, registrationFee, operationFee, 6000, 500000, 'registerName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n\n        if (!freight) {\n          freight = Number(cost['storageCost']) || 0;\n        }\n\n        if (!gas) {\n          gas = Number(cost['gas']) + 300;\n        }\n      }\n\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, registrationFee, operationFee, keystore.derivationPath, 6000, 300000, 'registerName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  CryptonomicNameServiceHelper.registerName = registerName;\n\n  function transferNameOwnership(server, keystore, contract, name, newNameOwner, fee, freight, gas, derivationPath = '') {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parameters = `(Pair \"${name}\" \"${newNameOwner}\")`;\n\n      if (!freight || !gas) {\n        const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, 0, fee, 1000, 100000, 'transferNameOwnership', parameters, TezosTypes.TezosParameterFormat.Michelson);\n\n        if (!freight) {\n          freight = Number(cost['storageCost']) || 0;\n        }\n\n        if (!gas) {\n          gas = Number(cost['gas']) + 300;\n        }\n      }\n\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, 0, fee, derivationPath, freight, gas, 'transferNameOwnership', parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  CryptonomicNameServiceHelper.transferNameOwnership = transferNameOwnership;\n\n  function updateResolver(server, keystore, contract, name, resolver, fee, freight, gas) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parameters = `(Pair \"${name}\" \"${resolver}\")`;\n\n      if (!freight || !gas) {\n        const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, 0, fee, 1000, 100000, 'updateResolver', parameters, TezosTypes.TezosParameterFormat.Michelson);\n\n        if (!freight) {\n          freight = Number(cost['storageCost']) || 0;\n        }\n\n        if (!gas) {\n          gas = Number(cost['gas']) + 300;\n        }\n      }\n\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, 0, fee, keystore.derivationPath, freight, gas, 'updateResolver', parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  CryptonomicNameServiceHelper.updateResolver = updateResolver;\n\n  function updateRegistrationPeriod(server, keystore, contract, name, newRegistrationPeriod, registrationFee, operationFee, freight, gas) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parameters = `(Pair \"${name}\" ${newRegistrationPeriod})`;\n\n      if (!freight || !gas) {\n        const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, registrationFee, operationFee, 1000, 100000, 'updateRegistrationPeriod', parameters, TezosTypes.TezosParameterFormat.Michelson);\n\n        if (!freight) {\n          freight = Number(cost['storageCost']) || 0;\n        }\n\n        if (!gas) {\n          gas = Number(cost['gas']) + 300;\n        }\n      }\n\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, registrationFee, operationFee, keystore.derivationPath, freight, gas, 'updateRegistrationPeriod', parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  CryptonomicNameServiceHelper.updateRegistrationPeriod = updateRegistrationPeriod;\n\n  function deleteName(server, keystore, contract, name, fee, freight, gas) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parameters = `\"${name}\"`;\n\n      if (!freight || !gas) {\n        const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, 0, fee, 1000, 100000, 'deleteName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n\n        if (!freight) {\n          freight = Number(cost['storageCost']) || 0;\n        }\n\n        if (!gas) {\n          gas = Number(cost['gas']) + 300;\n        }\n      }\n\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, 0, fee, keystore.derivationPath, freight, gas, 'deleteName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  CryptonomicNameServiceHelper.deleteName = deleteName;\n\n  function getNameForAddress(server, mapid, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(address, 'address'), 'hex'));\n      const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n      return jsonpath_plus_1.JSONPath({\n        path: '$.string',\n        json: mapResult\n      })[0];\n    });\n  }\n\n  CryptonomicNameServiceHelper.getNameForAddress = getNameForAddress;\n\n  function getNameInfo(server, mapid, name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(name, 'string'), 'hex'));\n      const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n      return {\n        name,\n        owner: jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[1].args[1].string',\n          json: mapResult\n        })[0],\n        resolver: jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[1].string',\n          json: mapResult\n        })[0],\n        registeredAt: new Date(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[0].string',\n          json: mapResult\n        })[0]),\n        registrationPeriod: jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[0].int',\n          json: mapResult\n        })[0],\n        modified: Boolean(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[0].prim',\n          json: mapResult\n        })[0])\n      };\n    });\n  }\n\n  CryptonomicNameServiceHelper.getNameInfo = getNameInfo;\n\n  function getSimpleStorage(server, contract) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, contract);\n      return {\n        addressMap: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[0].int',\n          json: storageResult\n        })[0]),\n        nameMap: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[0].int',\n          json: storageResult\n        })[0]),\n        manager: jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[1].args[0].string',\n          json: storageResult\n        })[0],\n        interval: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[1].args[1].int',\n          json: storageResult\n        })[0]),\n        maxDuration: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[0].int',\n          json: storageResult\n        })[0]),\n        intervalFee: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[1].int',\n          json: storageResult\n        })[0])\n      };\n    });\n  }\n\n  CryptonomicNameServiceHelper.getSimpleStorage = getSimpleStorage;\n\n  function clearRPCOperationGroupHash(hash) {\n    return hash.replace(/\\\"/g, '').replace(/\\n/, '');\n  }\n})(CryptonomicNameServiceHelper = exports.CryptonomicNameServiceHelper || (exports.CryptonomicNameServiceHelper = {}));","map":{"version":3,"sources":["../../../../src/chain/tezos/contracts/CryptonomicNameServiceHelper.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst blakejs = __importStar(require(\"blakejs\"));\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\nconst TezosMessageUtil_1 = require(\"../TezosMessageUtil\");\nconst TezosNodeReader_1 = require(\"../TezosNodeReader\");\nconst TezosNodeWriter_1 = require(\"../TezosNodeWriter\");\nconst TezosTypes = __importStar(require(\"../../../types/tezos/TezosChainTypes\"));\nvar CryptonomicNameServiceHelper;\n(function (CryptonomicNameServiceHelper) {\n    function verifyDestination(server, address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const contract = yield TezosNodeReader_1.TezosNodeReader.getAccountForBlock(server, 'head', address);\n            if (!!!contract.script) {\n                throw new Error(`No code found at ${address}`);\n            }\n            const k = Buffer.from(blakejs.blake2s(contract['script'].toString(), null, 16)).toString('hex');\n            if (k !== 'c020219e31ee3b462ed93c33124f117f') {\n                throw new Error(`Contract at ${address} does not match the expected code hash: ${k}, 'c020219e31ee3b462ed93c33124f117f'`);\n            }\n            return true;\n        });\n    }\n    CryptonomicNameServiceHelper.verifyDestination = verifyDestination;\n    function registerName(server, keystore, contract, name, resolver, registrationPeriod, registrationFee, operationFee, freight, gas) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parameters = `(Pair ${registrationPeriod} (Pair \"${name}\" \"${resolver}\"))`;\n            if (!freight || !gas) {\n                const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, registrationFee, operationFee, 6000, 500000, 'registerName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n                if (!freight) {\n                    freight = Number(cost['storageCost']) || 0;\n                }\n                if (!gas) {\n                    gas = Number(cost['gas']) + 300;\n                }\n            }\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, registrationFee, operationFee, keystore.derivationPath, 6000, 300000, 'registerName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    CryptonomicNameServiceHelper.registerName = registerName;\n    function transferNameOwnership(server, keystore, contract, name, newNameOwner, fee, freight, gas, derivationPath = '') {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parameters = `(Pair \"${name}\" \"${newNameOwner}\")`;\n            if (!freight || !gas) {\n                const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, 0, fee, 1000, 100000, 'transferNameOwnership', parameters, TezosTypes.TezosParameterFormat.Michelson);\n                if (!freight) {\n                    freight = Number(cost['storageCost']) || 0;\n                }\n                if (!gas) {\n                    gas = Number(cost['gas']) + 300;\n                }\n            }\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, 0, fee, derivationPath, freight, gas, 'transferNameOwnership', parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    CryptonomicNameServiceHelper.transferNameOwnership = transferNameOwnership;\n    function updateResolver(server, keystore, contract, name, resolver, fee, freight, gas) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parameters = `(Pair \"${name}\" \"${resolver}\")`;\n            if (!freight || !gas) {\n                const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, 0, fee, 1000, 100000, 'updateResolver', parameters, TezosTypes.TezosParameterFormat.Michelson);\n                if (!freight) {\n                    freight = Number(cost['storageCost']) || 0;\n                }\n                if (!gas) {\n                    gas = Number(cost['gas']) + 300;\n                }\n            }\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, 0, fee, keystore.derivationPath, freight, gas, 'updateResolver', parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    CryptonomicNameServiceHelper.updateResolver = updateResolver;\n    function updateRegistrationPeriod(server, keystore, contract, name, newRegistrationPeriod, registrationFee, operationFee, freight, gas) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parameters = `(Pair \"${name}\" ${newRegistrationPeriod})`;\n            if (!freight || !gas) {\n                const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, registrationFee, operationFee, 1000, 100000, 'updateRegistrationPeriod', parameters, TezosTypes.TezosParameterFormat.Michelson);\n                if (!freight) {\n                    freight = Number(cost['storageCost']) || 0;\n                }\n                if (!gas) {\n                    gas = Number(cost['gas']) + 300;\n                }\n            }\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, registrationFee, operationFee, keystore.derivationPath, freight, gas, 'updateRegistrationPeriod', parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    CryptonomicNameServiceHelper.updateRegistrationPeriod = updateRegistrationPeriod;\n    function deleteName(server, keystore, contract, name, fee, freight, gas) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parameters = `\"${name}\"`;\n            if (!freight || !gas) {\n                const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, 0, fee, 1000, 100000, 'deleteName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n                if (!freight) {\n                    freight = Number(cost['storageCost']) || 0;\n                }\n                if (!gas) {\n                    gas = Number(cost['gas']) + 300;\n                }\n            }\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, 0, fee, keystore.derivationPath, freight, gas, 'deleteName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    CryptonomicNameServiceHelper.deleteName = deleteName;\n    function getNameForAddress(server, mapid, address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(address, 'address'), 'hex'));\n            const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n            return jsonpath_plus_1.JSONPath({ path: '$.string', json: mapResult })[0];\n        });\n    }\n    CryptonomicNameServiceHelper.getNameForAddress = getNameForAddress;\n    function getNameInfo(server, mapid, name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(name, 'string'), 'hex'));\n            const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n            return {\n                name,\n                owner: jsonpath_plus_1.JSONPath({ path: '$.args[0].args[1].args[1].string', json: mapResult })[0],\n                resolver: jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[1].string', json: mapResult })[0],\n                registeredAt: new Date(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[0].string', json: mapResult })[0]),\n                registrationPeriod: jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[0].int', json: mapResult })[0],\n                modified: Boolean(jsonpath_plus_1.JSONPath({ path: '$.args[0].args[0].prim', json: mapResult })[0])\n            };\n        });\n    }\n    CryptonomicNameServiceHelper.getNameInfo = getNameInfo;\n    function getSimpleStorage(server, contract) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, contract);\n            return {\n                addressMap: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].args[0].int', json: storageResult })[0]),\n                nameMap: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[0].int', json: storageResult })[0]),\n                manager: jsonpath_plus_1.JSONPath({ path: '$.args[0].args[1].args[0].string', json: storageResult })[0],\n                interval: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].args[1].args[1].int', json: storageResult })[0]),\n                maxDuration: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[0].int', json: storageResult })[0]),\n                intervalFee: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[1].int', json: storageResult })[0])\n            };\n        });\n    }\n    CryptonomicNameServiceHelper.getSimpleStorage = getSimpleStorage;\n    function clearRPCOperationGroupHash(hash) {\n        return hash.replace(/\\\"/g, '').replace(/\\n/, '');\n    }\n})(CryptonomicNameServiceHelper = exports.CryptonomicNameServiceHelper || (exports.CryptonomicNameServiceHelper = {}));\n//# sourceMappingURL=CryptonomicNameServiceHelper.js.map"]},"metadata":{},"sourceType":"script"}