{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\n\nconst TezosErrorTypes_1 = require(\"../../types/tezos/TezosErrorTypes\");\n\nconst FetchSelector_1 = __importDefault(require(\"../../utils/FetchSelector\"));\n\nconst LoggerSelector_1 = __importDefault(require(\"../../utils/LoggerSelector\"));\n\nconst log = LoggerSelector_1.default.getLogger();\nconst fetch = FetchSelector_1.default.getFetch();\nvar TezosNodeReader;\n\n(function (TezosNodeReader) {\n  function performGetRequest(server, command) {\n    const url = `${server}/${command}`;\n    return fetch(url, {\n      method: 'get'\n    }).then(response => {\n      if (!response.ok) {\n        log.error(`TezosNodeReader.performGetRequest error: ${response.status} for ${command} on ${server}`);\n        throw new TezosErrorTypes_1.TezosRequestError(response.status, response.statusText, url, null);\n      }\n\n      return response;\n    }).then(response => {\n      const json = response.json();\n      log.debug(`TezosNodeReader.performGetRequest response: ${json} for ${command} on ${server}`);\n      return json;\n    });\n  }\n\n  function getBlock(server, hash = 'head', chainid = 'main') {\n    return performGetRequest(server, `chains/${chainid}/blocks/${hash}`).then(json => {\n      return json;\n    });\n  }\n\n  TezosNodeReader.getBlock = getBlock;\n\n  function getBlockHead(server) {\n    return getBlock(server);\n  }\n\n  TezosNodeReader.getBlockHead = getBlockHead;\n\n  function getAccountForBlock(server, blockHash, accountHash, chainid = 'main') {\n    return performGetRequest(server, `chains/${chainid}/blocks/${blockHash}/context/contracts/${accountHash}`).then(json => json);\n  }\n\n  TezosNodeReader.getAccountForBlock = getAccountForBlock;\n\n  function getCounterForAccount(server, accountHash, chainid = 'main') {\n    return __awaiter(this, void 0, void 0, function* () {\n      const counter = yield performGetRequest(server, `chains/${chainid}/blocks/head/context/contracts/${accountHash}/counter`).then(r => r.toString());\n      return parseInt(counter.toString(), 10);\n    });\n  }\n\n  TezosNodeReader.getCounterForAccount = getCounterForAccount;\n\n  function getSpendableBalanceForAccount(server, accountHash, chainid = 'main') {\n    return __awaiter(this, void 0, void 0, function* () {\n      const account = yield performGetRequest(server, `chains/${chainid}/blocks/head/context/contracts/${accountHash}`).then(json => json);\n      return parseInt(account.balance.toString(), 10);\n    });\n  }\n\n  TezosNodeReader.getSpendableBalanceForAccount = getSpendableBalanceForAccount;\n\n  function getAccountManagerForBlock(server, block, accountHash, chainid = 'main') {\n    return performGetRequest(server, `chains/${chainid}/blocks/${block}/context/contracts/${accountHash}/manager_key`).then(result => result && result.toString() !== 'null' ? result.toString() : '').catch(err => '');\n  }\n\n  TezosNodeReader.getAccountManagerForBlock = getAccountManagerForBlock;\n\n  function isImplicitAndEmpty(server, accountHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const account = yield getAccountForBlock(server, 'head', accountHash);\n      const isImplicit = accountHash.toLowerCase().startsWith('tz');\n      const isEmpty = Number(account.balance) === 0;\n      return isImplicit && isEmpty;\n    });\n  }\n\n  TezosNodeReader.isImplicitAndEmpty = isImplicitAndEmpty;\n\n  function isManagerKeyRevealedForAccount(server, accountHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const managerKey = yield getAccountManagerForBlock(server, 'head', accountHash);\n      return managerKey.length > 0;\n    });\n  }\n\n  TezosNodeReader.isManagerKeyRevealedForAccount = isManagerKeyRevealedForAccount;\n\n  function getContractStorage(server, accountHash, block = 'head', chainid = 'main') {\n    return performGetRequest(server, `chains/${chainid}/blocks/${block}/context/contracts/${accountHash}/storage`);\n  }\n\n  TezosNodeReader.getContractStorage = getContractStorage;\n\n  function getValueForBigMapKey(server, index, key, block = 'head', chainid = 'main') {\n    return performGetRequest(server, `chains/${chainid}/blocks/${block}/context/big_maps/${index}/${key}`).catch(err => undefined);\n  }\n\n  TezosNodeReader.getValueForBigMapKey = getValueForBigMapKey;\n\n  function getMempoolOperation(server, operationGroupId, chainid = 'main') {\n    return __awaiter(this, void 0, void 0, function* () {\n      const mempoolContent = yield performGetRequest(server, `chains/${chainid}/mempool/pending_operations`).catch(() => undefined);\n      const jsonresult = jsonpath_plus_1.JSONPath({\n        path: `$.applied[?(@.hash=='${operationGroupId}')]`,\n        json: mempoolContent\n      });\n      return jsonresult[0];\n    });\n  }\n\n  TezosNodeReader.getMempoolOperation = getMempoolOperation;\n\n  function estimateBranchTimeout(server, branch, chainid = 'main') {\n    return __awaiter(this, void 0, void 0, function* () {\n      const refBlock = getBlock(server, branch, chainid);\n      const headBlock = getBlock(server, 'head', chainid);\n      var result = yield Promise.all([refBlock, headBlock]).then(blocks => Number(blocks[1]['header']['level']) - Number(blocks[0]['header']['level']));\n      return 64 - result;\n    });\n  }\n\n  TezosNodeReader.estimateBranchTimeout = estimateBranchTimeout;\n\n  function getMempoolOperationsForAccount(server, accountHash, chainid = 'main') {\n    return __awaiter(this, void 0, void 0, function* () {\n      const mempoolContent = yield performGetRequest(server, `chains/${chainid}/mempool/pending_operations`).catch(() => undefined);\n      const a = mempoolContent.applied.filter(g => g.contents.some(s => s.source === accountHash || s.destination === accountHash));\n      const o = a.map(g => {\n        g.contents = g.contents.filter(s => s.source === accountHash || s.destination === accountHash);\n        return g;\n      });\n      return o;\n    });\n  }\n\n  TezosNodeReader.getMempoolOperationsForAccount = getMempoolOperationsForAccount;\n})(TezosNodeReader = exports.TezosNodeReader || (exports.TezosNodeReader = {}));","map":{"version":3,"sources":["../../../src/chain/tezos/TezosNodeReader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\nconst TezosErrorTypes_1 = require(\"../../types/tezos/TezosErrorTypes\");\nconst FetchSelector_1 = __importDefault(require(\"../../utils/FetchSelector\"));\nconst LoggerSelector_1 = __importDefault(require(\"../../utils/LoggerSelector\"));\nconst log = LoggerSelector_1.default.getLogger();\nconst fetch = FetchSelector_1.default.getFetch();\nvar TezosNodeReader;\n(function (TezosNodeReader) {\n    function performGetRequest(server, command) {\n        const url = `${server}/${command}`;\n        return fetch(url, { method: 'get' })\n            .then(response => {\n            if (!response.ok) {\n                log.error(`TezosNodeReader.performGetRequest error: ${response.status} for ${command} on ${server}`);\n                throw new TezosErrorTypes_1.TezosRequestError(response.status, response.statusText, url, null);\n            }\n            return response;\n        })\n            .then(response => {\n            const json = response.json();\n            log.debug(`TezosNodeReader.performGetRequest response: ${json} for ${command} on ${server}`);\n            return json;\n        });\n    }\n    function getBlock(server, hash = 'head', chainid = 'main') {\n        return performGetRequest(server, `chains/${chainid}/blocks/${hash}`).then(json => { return json; });\n    }\n    TezosNodeReader.getBlock = getBlock;\n    function getBlockHead(server) {\n        return getBlock(server);\n    }\n    TezosNodeReader.getBlockHead = getBlockHead;\n    function getAccountForBlock(server, blockHash, accountHash, chainid = 'main') {\n        return performGetRequest(server, `chains/${chainid}/blocks/${blockHash}/context/contracts/${accountHash}`)\n            .then(json => json);\n    }\n    TezosNodeReader.getAccountForBlock = getAccountForBlock;\n    function getCounterForAccount(server, accountHash, chainid = 'main') {\n        return __awaiter(this, void 0, void 0, function* () {\n            const counter = yield performGetRequest(server, `chains/${chainid}/blocks/head/context/contracts/${accountHash}/counter`)\n                .then(r => r.toString());\n            return parseInt(counter.toString(), 10);\n        });\n    }\n    TezosNodeReader.getCounterForAccount = getCounterForAccount;\n    function getSpendableBalanceForAccount(server, accountHash, chainid = 'main') {\n        return __awaiter(this, void 0, void 0, function* () {\n            const account = yield performGetRequest(server, `chains/${chainid}/blocks/head/context/contracts/${accountHash}`)\n                .then(json => json);\n            return parseInt(account.balance.toString(), 10);\n        });\n    }\n    TezosNodeReader.getSpendableBalanceForAccount = getSpendableBalanceForAccount;\n    function getAccountManagerForBlock(server, block, accountHash, chainid = 'main') {\n        return performGetRequest(server, `chains/${chainid}/blocks/${block}/context/contracts/${accountHash}/manager_key`)\n            .then(result => (result && result.toString() !== 'null') ? result.toString() : '').catch(err => '');\n    }\n    TezosNodeReader.getAccountManagerForBlock = getAccountManagerForBlock;\n    function isImplicitAndEmpty(server, accountHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const account = yield getAccountForBlock(server, 'head', accountHash);\n            const isImplicit = accountHash.toLowerCase().startsWith('tz');\n            const isEmpty = Number(account.balance) === 0;\n            return (isImplicit && isEmpty);\n        });\n    }\n    TezosNodeReader.isImplicitAndEmpty = isImplicitAndEmpty;\n    function isManagerKeyRevealedForAccount(server, accountHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const managerKey = yield getAccountManagerForBlock(server, 'head', accountHash);\n            return managerKey.length > 0;\n        });\n    }\n    TezosNodeReader.isManagerKeyRevealedForAccount = isManagerKeyRevealedForAccount;\n    function getContractStorage(server, accountHash, block = 'head', chainid = 'main') {\n        return performGetRequest(server, `chains/${chainid}/blocks/${block}/context/contracts/${accountHash}/storage`);\n    }\n    TezosNodeReader.getContractStorage = getContractStorage;\n    function getValueForBigMapKey(server, index, key, block = 'head', chainid = 'main') {\n        return performGetRequest(server, `chains/${chainid}/blocks/${block}/context/big_maps/${index}/${key}`).catch(err => undefined);\n    }\n    TezosNodeReader.getValueForBigMapKey = getValueForBigMapKey;\n    function getMempoolOperation(server, operationGroupId, chainid = 'main') {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mempoolContent = yield performGetRequest(server, `chains/${chainid}/mempool/pending_operations`).catch(() => undefined);\n            const jsonresult = jsonpath_plus_1.JSONPath({ path: `$.applied[?(@.hash=='${operationGroupId}')]`, json: mempoolContent });\n            return jsonresult[0];\n        });\n    }\n    TezosNodeReader.getMempoolOperation = getMempoolOperation;\n    function estimateBranchTimeout(server, branch, chainid = 'main') {\n        return __awaiter(this, void 0, void 0, function* () {\n            const refBlock = getBlock(server, branch, chainid);\n            const headBlock = getBlock(server, 'head', chainid);\n            var result = yield Promise.all([refBlock, headBlock]).then(blocks => Number(blocks[1]['header']['level']) - Number(blocks[0]['header']['level']));\n            return 64 - result;\n        });\n    }\n    TezosNodeReader.estimateBranchTimeout = estimateBranchTimeout;\n    function getMempoolOperationsForAccount(server, accountHash, chainid = 'main') {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mempoolContent = yield performGetRequest(server, `chains/${chainid}/mempool/pending_operations`).catch(() => undefined);\n            const a = mempoolContent.applied.filter(g => g.contents.some(s => (s.source === accountHash || s.destination === accountHash)));\n            const o = a.map(g => { g.contents = g.contents.filter(s => (s.source === accountHash || s.destination === accountHash)); return g; });\n            return o;\n        });\n    }\n    TezosNodeReader.getMempoolOperationsForAccount = getMempoolOperationsForAccount;\n})(TezosNodeReader = exports.TezosNodeReader || (exports.TezosNodeReader = {}));\n//# sourceMappingURL=TezosNodeReader.js.map"]},"metadata":{},"sourceType":"script"}