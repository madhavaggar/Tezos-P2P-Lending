{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst TezosMessageUtil_1 = require(\"./TezosMessageUtil\");\n\nconst TezosLanguageUtil_1 = require(\"./TezosLanguageUtil\");\n\nconst operationTypes = new Map([[0, 'endorsement'], [1, 'seedNonceRevelation'], [2, 'doubleEndorsementEvidence'], [3, 'doubleBakingEvidence'], [4, 'accountActivation'], [5, 'proposal'], [6, 'ballot'], [7, 'reveal'], [8, 'transaction'], [9, 'origination'], [10, 'delegation'], [107, 'reveal'], [108, 'transaction'], [109, 'origination'], [110, 'delegation']]);\nconst sepyTnoitarepo = [...operationTypes.keys()].reduce((m, k) => {\n  const v = operationTypes.get(k) || '';\n\n  if (m[v] > k) {\n    return m;\n  }\n\n  return Object.assign(Object.assign({}, m), {\n    [v]: k\n  });\n}, new Map());\nvar TezosMessageCodec;\n\n(function (TezosMessageCodec) {\n  function getOperationType(hex) {\n    return operationTypes.get(TezosMessageUtil_1.TezosMessageUtils.readInt(hex)) || '';\n  }\n\n  TezosMessageCodec.getOperationType = getOperationType;\n\n  function idFirstOperation(hex) {\n    return getOperationType(hex.substring(64, 66));\n  }\n\n  TezosMessageCodec.idFirstOperation = idFirstOperation;\n\n  function parseOperation(hex, opType, isFirst = true) {\n    switch (opType) {\n      case \"endorsement\":\n        throw new Error(`Unsupported operation type: ${opType}`);\n\n      case \"seedNonceRevelation\":\n        throw new Error(`Unsupported operation type: ${opType}`);\n\n      case \"doubleEndorsementEvidence\":\n        throw new Error(`Unsupported operation type: ${opType}`);\n\n      case \"doubleBakingEvidence\":\n        throw new Error(`Unsupported operation type: ${opType}`);\n\n      case \"accountActivation\":\n        throw new Error(`Unsupported operation type: ${opType}`);\n\n      case \"proposal\":\n        throw new Error(`Unsupported operation type: ${opType}`);\n\n      case \"ballot\":\n        return parseBallot(hex, isFirst);\n\n      case \"reveal\":\n        return parseReveal(hex, isFirst);\n\n      case \"transaction\":\n        return parseTransaction(hex, isFirst);\n\n      case \"origination\":\n        return parseOrigination(hex, isFirst);\n\n      case \"delegation\":\n        return parseDelegation(hex, isFirst);\n\n      default:\n        throw new Error(`Unsupported operation type: ${opType}`);\n    }\n  }\n\n  TezosMessageCodec.parseOperation = parseOperation;\n\n  function encodeOperation(message) {\n    if (message.hasOwnProperty('pkh') && message.hasOwnProperty('secret')) {\n      return encodeActivation(message);\n    }\n\n    if (message.hasOwnProperty('kind')) {\n      const operation = message;\n\n      if (operation.kind === 'reveal') {\n        return encodeReveal(message);\n      }\n\n      if (operation.kind === 'transaction') {\n        return encodeTransaction(message);\n      }\n\n      if (operation.kind === 'origination') {\n        return encodeOrigination(message);\n      }\n\n      if (operation.kind === 'delegation') {\n        return encodeDelegation(message);\n      }\n    }\n\n    if (message.hasOwnProperty('vote')) {\n      return encodeBallot(message);\n    }\n\n    throw new Error('Unsupported message type');\n  }\n\n  TezosMessageCodec.encodeOperation = encodeOperation;\n\n  function encodeActivation(activation) {\n    let hex = TezosMessageUtil_1.TezosMessageUtils.writeInt(sepyTnoitarepo['accountActivation']);\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(activation.pkh).slice(4);\n    hex += activation.secret;\n    return hex;\n  }\n\n  TezosMessageCodec.encodeActivation = encodeActivation;\n\n  function parseBallot(ballotMessage, isFirst = true) {\n    let hexOperationType = isFirst ? ballotMessage.substring(64, 66) : ballotMessage.substring(0, 2);\n\n    if (getOperationType(hexOperationType) !== 'ballot') {\n      throw new Error('Provided operation is not a ballot');\n    }\n\n    let fieldoffset = 0;\n    let branch = '';\n\n    if (isFirst) {\n      branch = TezosMessageUtil_1.TezosMessageUtils.readBranch(ballotMessage.substring(fieldoffset, fieldoffset + 64));\n      fieldoffset += 64 + 2;\n    } else {\n      fieldoffset += 2;\n    }\n\n    const source = TezosMessageUtil_1.TezosMessageUtils.readAddress(ballotMessage.substring(fieldoffset, fieldoffset + 42));\n    fieldoffset += 42;\n    const period = parseInt(ballotMessage.substring(fieldoffset, fieldoffset + 8), 16);\n    fieldoffset += 8;\n    const proposal = TezosMessageUtil_1.TezosMessageUtils.readBufferWithHint(Buffer.from(ballotMessage.substring(fieldoffset, fieldoffset + 64), 'hex'), 'p');\n    fieldoffset += 64;\n    const vote = parseInt(ballotMessage.substring(fieldoffset, fieldoffset + 1), 16);\n    fieldoffset += 2;\n    let next;\n\n    if (ballotMessage.length > fieldoffset) {\n      next = getOperationType(ballotMessage.substring(fieldoffset, fieldoffset + 2));\n    }\n\n    const ballot = {\n      kind: 'ballot',\n      source: source,\n      period: period,\n      proposal: proposal,\n      vote: vote\n    };\n    const envelope = {\n      operation: ballot,\n      branch: branch,\n      next: next,\n      nextoffset: next ? fieldoffset : -1\n    };\n    return envelope;\n  }\n\n  TezosMessageCodec.parseBallot = parseBallot;\n\n  function encodeBallot(ballot) {\n    let hex = TezosMessageUtil_1.TezosMessageUtils.writeInt(sepyTnoitarepo['ballot']);\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(ballot.source).slice(2);\n    hex += ('00000000' + ballot.period.toString(16)).slice(-8);\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeBufferWithHint(ballot.proposal).toString('hex').slice(4);\n    hex += ('00' + ballot.vote.toString(16)).slice(-2);\n    return hex;\n  }\n\n  TezosMessageCodec.encodeBallot = encodeBallot;\n\n  function parseReveal(revealMessage, isFirst = true) {\n    let hexOperationType = isFirst ? revealMessage.substring(64, 66) : revealMessage.substring(0, 2);\n\n    if (getOperationType(hexOperationType) !== 'reveal') {\n      throw new Error('Provided operation is not a reveal.');\n    }\n\n    let fieldoffset = 0;\n    let branch = '';\n\n    if (isFirst) {\n      branch = TezosMessageUtil_1.TezosMessageUtils.readBranch(revealMessage.substring(fieldoffset, fieldoffset + 64));\n      fieldoffset += 64 + 2;\n    } else {\n      fieldoffset += 2;\n    }\n\n    let source = '';\n\n    if (parseInt(hexOperationType, 16) < 100) {\n      source = TezosMessageUtil_1.TezosMessageUtils.readAddress(revealMessage.substring(fieldoffset, fieldoffset + 44));\n      fieldoffset += 44;\n    } else {\n      source = TezosMessageUtil_1.TezosMessageUtils.readAddress(revealMessage.substring(fieldoffset, fieldoffset + 42));\n      fieldoffset += 42;\n    }\n\n    let feeInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(revealMessage, fieldoffset);\n    fieldoffset += feeInfo.length;\n    let counterInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(revealMessage, fieldoffset);\n    fieldoffset += counterInfo.length;\n    let gasInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(revealMessage, fieldoffset);\n    fieldoffset += gasInfo.length;\n    let storageInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(revealMessage, fieldoffset);\n    fieldoffset += storageInfo.length;\n    let publickey = TezosMessageUtil_1.TezosMessageUtils.readPublicKey(revealMessage.substring(fieldoffset, fieldoffset + 66));\n    fieldoffset += 66;\n    let next;\n\n    if (revealMessage.length > fieldoffset) {\n      next = getOperationType(revealMessage.substring(fieldoffset, fieldoffset + 2));\n    }\n\n    const reveal = {\n      kind: \"reveal\",\n      source: source,\n      public_key: publickey,\n      fee: feeInfo.value + \"\",\n      gas_limit: gasInfo.value + \"\",\n      storage_limit: storageInfo.value + \"\",\n      counter: counterInfo.value + \"\"\n    };\n    const envelope = {\n      operation: reveal,\n      branch: branch,\n      next: next,\n      nextoffset: next ? fieldoffset : -1\n    };\n    return envelope;\n  }\n\n  TezosMessageCodec.parseReveal = parseReveal;\n\n  function encodeReveal(reveal) {\n    if (reveal.kind !== 'reveal') {\n      throw new Error('Incorrect operation type.');\n    }\n\n    let hex = TezosMessageUtil_1.TezosMessageUtils.writeInt(sepyTnoitarepo['reveal']);\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(reveal.source).slice(2);\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(reveal.fee));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(reveal.counter));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(reveal.gas_limit));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(reveal.storage_limit));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writePublicKey(reveal.public_key);\n    return hex;\n  }\n\n  TezosMessageCodec.encodeReveal = encodeReveal;\n\n  function parseTransaction(transactionMessage, isFirst = true) {\n    let hexOperationType = isFirst ? transactionMessage.substring(64, 66) : transactionMessage.substring(0, 2);\n\n    if (getOperationType(hexOperationType) !== \"transaction\") {\n      throw new Error(\"Provided operation is not a transaction.\");\n    }\n\n    let fieldoffset = 0;\n    let branch = \"\";\n\n    if (isFirst) {\n      branch = TezosMessageUtil_1.TezosMessageUtils.readBranch(transactionMessage.substring(fieldoffset, fieldoffset + 64));\n      fieldoffset += 64 + 2;\n    } else {\n      fieldoffset += 2;\n    }\n\n    let source = '';\n\n    if (parseInt(hexOperationType, 16) < 100) {\n      source = TezosMessageUtil_1.TezosMessageUtils.readAddress(transactionMessage.substring(fieldoffset, fieldoffset + 44));\n      fieldoffset += 44;\n    } else {\n      source = TezosMessageUtil_1.TezosMessageUtils.readAddress(transactionMessage.substring(fieldoffset, fieldoffset + 42));\n      fieldoffset += 42;\n    }\n\n    let feeInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(transactionMessage, fieldoffset);\n    fieldoffset += feeInfo.length;\n    let counterInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(transactionMessage, fieldoffset);\n    fieldoffset += counterInfo.length;\n    let gasInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(transactionMessage, fieldoffset);\n    fieldoffset += gasInfo.length;\n    let storageInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(transactionMessage, fieldoffset);\n    fieldoffset += storageInfo.length;\n    let amountInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(transactionMessage, fieldoffset);\n    fieldoffset += amountInfo.length;\n    let target = TezosMessageUtil_1.TezosMessageUtils.readAddress(transactionMessage.substring(fieldoffset, fieldoffset + 44));\n    fieldoffset += 44;\n    let hasParameters = TezosMessageUtil_1.TezosMessageUtils.readBoolean(transactionMessage.substring(fieldoffset, fieldoffset + 2));\n    fieldoffset += 2;\n    let parameters = '';\n\n    if (hasParameters && parseInt(hexOperationType, 16) < 100) {\n      const paramLength = parseInt(transactionMessage.substring(fieldoffset, fieldoffset + 8), 16);\n      fieldoffset += 8;\n      const codeEnvelope = TezosLanguageUtil_1.TezosLanguageUtil.hexToMicheline(transactionMessage.substring(fieldoffset));\n      parameters = codeEnvelope.code;\n\n      if (codeEnvelope.consumed !== paramLength * 2) {\n        throw new Error('Failed to parse transaction parameters: length mismatch');\n      }\n\n      fieldoffset += paramLength * 2;\n    } else if (hasParameters && parseInt(hexOperationType, 16) > 100) {\n      const entrypointType = parseInt(transactionMessage.substring(fieldoffset, fieldoffset + 2), 16);\n      fieldoffset += 2;\n      let entrypointName = '';\n\n      if (entrypointType === 255) {\n        const endpointLength = parseInt(transactionMessage.substring(fieldoffset, fieldoffset + 2), 16);\n        fieldoffset += 2;\n        entrypointName = Buffer.from(transactionMessage.substring(fieldoffset, fieldoffset + endpointLength * 2), 'hex').toString();\n        fieldoffset += endpointLength * 2;\n      } else if (entrypointType === 0) {\n        entrypointName = 'default';\n      } else if (entrypointType === 1) {\n        entrypointName = 'root';\n      } else if (entrypointType === 2) {\n        entrypointName = 'do';\n      } else if (entrypointType === 3) {\n        entrypointName = 'set_delegate';\n      } else if (entrypointType === 4) {\n        entrypointName = 'remove_delegate';\n      }\n\n      const paramLength = parseInt(transactionMessage.substring(fieldoffset, fieldoffset + 8), 16);\n      fieldoffset += 8;\n      const codeEnvelope = TezosLanguageUtil_1.TezosLanguageUtil.hexToMicheline(transactionMessage.substring(fieldoffset));\n      const endpointParameters = codeEnvelope.code;\n\n      if (codeEnvelope.consumed !== paramLength * 2) {\n        throw new Error('Failed to parse transaction parameters: length mismatch');\n      }\n\n      fieldoffset += paramLength * 2;\n      parameters = {\n        entrypoint: entrypointName,\n        value: endpointParameters\n      };\n    }\n\n    let next;\n\n    if (transactionMessage.length > fieldoffset) {\n      next = getOperationType(transactionMessage.substring(fieldoffset, fieldoffset + 2));\n    }\n\n    const transaction = {\n      kind: \"transaction\",\n      source: source,\n      destination: target,\n      amount: amountInfo.value.toString(),\n      fee: feeInfo.value.toString(),\n      gas_limit: gasInfo.value.toString(),\n      storage_limit: storageInfo.value.toString(),\n      counter: counterInfo.value.toString(),\n      parameters: parameters\n    };\n    const envelope = {\n      operation: transaction,\n      branch: branch,\n      next: next,\n      nextoffset: next ? fieldoffset : -1\n    };\n    return envelope;\n  }\n\n  TezosMessageCodec.parseTransaction = parseTransaction;\n\n  function encodeTransaction(transaction) {\n    if (transaction.kind !== 'transaction') {\n      throw new Error('Incorrect operation type');\n    }\n\n    let hex = TezosMessageUtil_1.TezosMessageUtils.writeInt(sepyTnoitarepo['transaction']);\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(transaction.source).slice(2);\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(transaction.fee));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(transaction.counter));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(transaction.gas_limit));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(transaction.storage_limit));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(transaction.amount));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(transaction.destination);\n\n    if (!!transaction.parameters) {\n      const composite = transaction.parameters;\n      const code = TezosLanguageUtil_1.TezosLanguageUtil.normalizeMichelineWhiteSpace(JSON.stringify(composite.value));\n      const result = TezosLanguageUtil_1.TezosLanguageUtil.translateMichelineToHex(code);\n\n      if ((composite.entrypoint === 'default' || composite.entrypoint === '') && result === '030b') {\n        hex += '00';\n      } else {\n        hex += 'ff';\n\n        if (composite.entrypoint === 'default' || composite.entrypoint === '') {\n          hex += '00';\n        } else if (composite.entrypoint === 'root') {\n          hex += '01';\n        } else if (composite.entrypoint === 'do') {\n          hex += '02';\n        } else if (composite.entrypoint === 'set_delegate') {\n          hex += '03';\n        } else if (composite.entrypoint === 'remove_delegate') {\n          hex += '04';\n        } else {\n          hex += 'ff' + ('0' + composite.entrypoint.length.toString(16)).slice(-2) + composite.entrypoint.split('').map(c => c.charCodeAt(0).toString(16)).join('');\n        }\n\n        if (result === '030b') {\n          hex += '00';\n        } else {\n          hex += ('0000000' + (result.length / 2).toString(16)).slice(-8) + result;\n        }\n      }\n    } else {\n      hex += '00';\n    }\n\n    return hex;\n  }\n\n  TezosMessageCodec.encodeTransaction = encodeTransaction;\n\n  function parseOrigination(originationMessage, isFirst = true) {\n    let hexOperationType = isFirst ? originationMessage.substring(64, 66) : originationMessage.substring(0, 2);\n\n    if (getOperationType(hexOperationType) !== \"origination\") {\n      throw new Error(\"Provided operation is not an origination.\");\n    }\n\n    let fieldoffset = 0;\n    let branch = \"\";\n\n    if (isFirst) {\n      branch = TezosMessageUtil_1.TezosMessageUtils.readBranch(originationMessage.substring(fieldoffset, fieldoffset + 64));\n      fieldoffset += 64 + 2;\n    } else {\n      fieldoffset += 2;\n    }\n\n    let source = '';\n\n    if (parseInt(hexOperationType, 16) < 100) {\n      source = TezosMessageUtil_1.TezosMessageUtils.readAddress(originationMessage.substring(fieldoffset, fieldoffset + 44));\n      fieldoffset += 44;\n    } else {\n      source = TezosMessageUtil_1.TezosMessageUtils.readAddress(originationMessage.substring(fieldoffset, fieldoffset + 42));\n      fieldoffset += 42;\n    }\n\n    let feeInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(originationMessage, fieldoffset);\n    fieldoffset += feeInfo.length;\n    let counterInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(originationMessage, fieldoffset);\n    fieldoffset += counterInfo.length;\n    let gasInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(originationMessage, fieldoffset);\n    fieldoffset += gasInfo.length;\n    let storageInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(originationMessage, fieldoffset);\n    fieldoffset += storageInfo.length;\n    let manager_pubkey = '';\n\n    if (parseInt(hexOperationType, 16) < 100) {\n      manager_pubkey = TezosMessageUtil_1.TezosMessageUtils.readAddress(originationMessage.substring(fieldoffset, fieldoffset + 42));\n      fieldoffset += 42;\n    }\n\n    let balanceInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(originationMessage, fieldoffset);\n    fieldoffset += balanceInfo.length;\n    let spendable = false;\n    let delegatable = false;\n\n    if (parseInt(hexOperationType, 16) < 100) {\n      spendable = TezosMessageUtil_1.TezosMessageUtils.readBoolean(originationMessage.substring(fieldoffset, fieldoffset + 2));\n      fieldoffset += 2;\n      delegatable = TezosMessageUtil_1.TezosMessageUtils.readBoolean(originationMessage.substring(fieldoffset, fieldoffset + 2));\n      fieldoffset += 2;\n    }\n\n    let hasDelegate = TezosMessageUtil_1.TezosMessageUtils.readBoolean(originationMessage.substring(fieldoffset, fieldoffset + 2));\n    fieldoffset += 2;\n    let delegate = '';\n\n    if (hasDelegate) {\n      delegate = TezosMessageUtil_1.TezosMessageUtils.readAddress(originationMessage.substring(fieldoffset, fieldoffset + 42));\n      fieldoffset += 42;\n    }\n\n    let hasScript = true;\n\n    if (parseInt(hexOperationType, 16) < 100) {\n      hasScript = TezosMessageUtil_1.TezosMessageUtils.readBoolean(originationMessage.substring(fieldoffset, fieldoffset + 2));\n      fieldoffset += 2;\n    }\n\n    let script = {};\n\n    if (hasScript) {\n      let codesize = parseInt(originationMessage.substring(fieldoffset, fieldoffset + 8), 16);\n      fieldoffset += 8;\n      const code = TezosLanguageUtil_1.TezosLanguageUtil.hexToMicheline(originationMessage.substring(fieldoffset, fieldoffset + codesize * 2)).code;\n      fieldoffset += codesize * 2;\n      let storagesize = parseInt(originationMessage.substring(fieldoffset, fieldoffset + 8), 16);\n      fieldoffset += 8;\n      const storage = TezosLanguageUtil_1.TezosLanguageUtil.hexToMicheline(originationMessage.substring(fieldoffset, fieldoffset + storagesize * 2)).code;\n      fieldoffset += storagesize * 2;\n      script = JSON.parse(`{ \"script\": [ ${code}, ${storage} ] }`);\n    }\n\n    let next;\n\n    if (originationMessage.length > fieldoffset) {\n      next = getOperationType(originationMessage.substring(fieldoffset, fieldoffset + 2));\n    }\n\n    let origination = {\n      kind: \"origination\",\n      source: source,\n      balance: balanceInfo.value + \"\",\n      delegate: hasDelegate ? delegate : undefined,\n      fee: feeInfo.value + \"\",\n      gas_limit: gasInfo.value + \"\",\n      storage_limit: storageInfo.value + \"\",\n      counter: counterInfo.value + \"\",\n      script: hasScript ? script : undefined\n    };\n\n    if (parseInt(hexOperationType, 16) < 100) {\n      origination.manager_pubkey = manager_pubkey;\n      origination.spendable = spendable;\n      origination.delegatable = delegatable;\n    }\n\n    const envelope = {\n      operation: origination,\n      branch: branch,\n      next: next,\n      nextoffset: next ? fieldoffset : -1\n    };\n    return envelope;\n  }\n\n  TezosMessageCodec.parseOrigination = parseOrigination;\n\n  function encodeOrigination(origination) {\n    if (origination.kind !== 'origination') {\n      throw new Error('Incorrect operation type');\n    }\n\n    let hex = TezosMessageUtil_1.TezosMessageUtils.writeInt(sepyTnoitarepo['origination']);\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(origination.source).slice(2);\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(origination.fee));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(origination.counter));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(origination.gas_limit));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(origination.storage_limit));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(origination.balance));\n\n    if (origination.delegate !== undefined) {\n      hex += TezosMessageUtil_1.TezosMessageUtils.writeBoolean(true);\n      hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(origination.delegate).slice(2);\n    } else {\n      hex += TezosMessageUtil_1.TezosMessageUtils.writeBoolean(false);\n    }\n\n    if (!!origination.script) {\n      let parts = [];\n      parts.push(origination.script['code']);\n      parts.push(origination.script['storage']);\n      hex += parts.map(p => TezosLanguageUtil_1.TezosLanguageUtil.normalizeMichelineWhiteSpace(JSON.stringify(p))).map(p => TezosLanguageUtil_1.TezosLanguageUtil.translateMichelineToHex(p)).reduce((m, p) => {\n        return m += ('0000000' + (p.length / 2).toString(16)).slice(-8) + p;\n      }, '');\n    }\n\n    return hex;\n  }\n\n  TezosMessageCodec.encodeOrigination = encodeOrigination;\n\n  function parseDelegation(delegationMessage, isFirst = true) {\n    let hexOperationType = isFirst ? delegationMessage.substring(64, 66) : delegationMessage.substring(0, 2);\n\n    if (getOperationType(hexOperationType) !== \"delegation\") {\n      throw new Error(\"Provided operation is not a delegation.\");\n    }\n\n    let fieldoffset = 0;\n    let branch = \"\";\n\n    if (isFirst) {\n      branch = TezosMessageUtil_1.TezosMessageUtils.readBranch(delegationMessage.substring(fieldoffset, fieldoffset + 64));\n      fieldoffset += 64 + 2;\n    } else {\n      fieldoffset += 2;\n    }\n\n    let source = '';\n\n    if (parseInt(hexOperationType, 16) < 100) {\n      source = TezosMessageUtil_1.TezosMessageUtils.readAddress(delegationMessage.substring(fieldoffset, fieldoffset + 44));\n      fieldoffset += 44;\n    } else {\n      source = TezosMessageUtil_1.TezosMessageUtils.readAddress(delegationMessage.substring(fieldoffset, fieldoffset + 42));\n      fieldoffset += 42;\n    }\n\n    let feeInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(delegationMessage, fieldoffset);\n    fieldoffset += feeInfo.length;\n    let counterInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(delegationMessage, fieldoffset);\n    fieldoffset += counterInfo.length;\n    let gasInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(delegationMessage, fieldoffset);\n    fieldoffset += gasInfo.length;\n    let storageInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(delegationMessage, fieldoffset);\n    fieldoffset += storageInfo.length;\n    let hasDelegate = TezosMessageUtil_1.TezosMessageUtils.readBoolean(delegationMessage.substring(fieldoffset, fieldoffset + 2));\n    fieldoffset += 2;\n    let delegate = '';\n\n    if (hasDelegate) {\n      delegate = TezosMessageUtil_1.TezosMessageUtils.readAddress(delegationMessage.substring(fieldoffset, fieldoffset + 42));\n      fieldoffset += 42;\n    }\n\n    let next;\n\n    if (delegationMessage.length > fieldoffset) {\n      next = getOperationType(delegationMessage.substring(fieldoffset, fieldoffset + 2));\n    }\n\n    const delegation = {\n      kind: \"delegation\",\n      source: source,\n      delegate: hasDelegate ? delegate : undefined,\n      fee: feeInfo.value + \"\",\n      gas_limit: gasInfo.value + \"\",\n      storage_limit: storageInfo.value + \"\",\n      counter: counterInfo.value + \"\"\n    };\n    const envelope = {\n      operation: delegation,\n      branch: branch,\n      next: next,\n      nextoffset: next ? fieldoffset : -1\n    };\n    return envelope;\n  }\n\n  TezosMessageCodec.parseDelegation = parseDelegation;\n\n  function encodeDelegation(delegation) {\n    if (delegation.kind !== 'delegation') {\n      throw new Error('Incorrect operation type');\n    }\n\n    let hex = TezosMessageUtil_1.TezosMessageUtils.writeInt(sepyTnoitarepo['delegation']);\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(delegation.source).slice(2);\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(delegation.fee));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(delegation.counter));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(delegation.gas_limit));\n    hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(delegation.storage_limit));\n\n    if (delegation.delegate !== undefined && delegation.delegate !== '') {\n      hex += TezosMessageUtil_1.TezosMessageUtils.writeBoolean(true);\n      hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(delegation.delegate).slice(2);\n    } else {\n      hex += TezosMessageUtil_1.TezosMessageUtils.writeBoolean(false);\n    }\n\n    return hex;\n  }\n\n  TezosMessageCodec.encodeDelegation = encodeDelegation;\n\n  function parseOperationGroup(hex) {\n    let operations = [];\n    let envelope = parseOperation(hex, idFirstOperation(hex));\n    operations.push(envelope.operation);\n    let groupOffset = 0;\n\n    while (envelope.next) {\n      groupOffset += envelope.nextoffset;\n      envelope = parseOperation(hex.substring(groupOffset), envelope.next, false);\n      operations.push(envelope.operation);\n    }\n\n    return operations;\n  }\n\n  TezosMessageCodec.parseOperationGroup = parseOperationGroup;\n})(TezosMessageCodec = exports.TezosMessageCodec || (exports.TezosMessageCodec = {}));","map":{"version":3,"sources":["../../../src/chain/tezos/TezosMessageCodec.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst TezosMessageUtil_1 = require(\"./TezosMessageUtil\");\nconst TezosLanguageUtil_1 = require(\"./TezosLanguageUtil\");\nconst operationTypes = new Map([\n    [0, 'endorsement'],\n    [1, 'seedNonceRevelation'],\n    [2, 'doubleEndorsementEvidence'],\n    [3, 'doubleBakingEvidence'],\n    [4, 'accountActivation'],\n    [5, 'proposal'],\n    [6, 'ballot'],\n    [7, 'reveal'],\n    [8, 'transaction'],\n    [9, 'origination'],\n    [10, 'delegation'],\n    [107, 'reveal'],\n    [108, 'transaction'],\n    [109, 'origination'],\n    [110, 'delegation']\n]);\nconst sepyTnoitarepo = [...operationTypes.keys()].reduce((m, k) => { const v = operationTypes.get(k) || ''; if (m[v] > k) {\n    return m;\n} return Object.assign(Object.assign({}, m), { [v]: k }); }, new Map());\nvar TezosMessageCodec;\n(function (TezosMessageCodec) {\n    function getOperationType(hex) {\n        return operationTypes.get(TezosMessageUtil_1.TezosMessageUtils.readInt(hex)) || '';\n    }\n    TezosMessageCodec.getOperationType = getOperationType;\n    function idFirstOperation(hex) {\n        return getOperationType(hex.substring(64, 66));\n    }\n    TezosMessageCodec.idFirstOperation = idFirstOperation;\n    function parseOperation(hex, opType, isFirst = true) {\n        switch (opType) {\n            case \"endorsement\":\n                throw new Error(`Unsupported operation type: ${opType}`);\n            case \"seedNonceRevelation\":\n                throw new Error(`Unsupported operation type: ${opType}`);\n            case \"doubleEndorsementEvidence\":\n                throw new Error(`Unsupported operation type: ${opType}`);\n            case \"doubleBakingEvidence\":\n                throw new Error(`Unsupported operation type: ${opType}`);\n            case \"accountActivation\":\n                throw new Error(`Unsupported operation type: ${opType}`);\n            case \"proposal\":\n                throw new Error(`Unsupported operation type: ${opType}`);\n            case \"ballot\":\n                return parseBallot(hex, isFirst);\n            case \"reveal\":\n                return parseReveal(hex, isFirst);\n            case \"transaction\":\n                return parseTransaction(hex, isFirst);\n            case \"origination\":\n                return parseOrigination(hex, isFirst);\n            case \"delegation\":\n                return parseDelegation(hex, isFirst);\n            default:\n                throw new Error(`Unsupported operation type: ${opType}`);\n        }\n    }\n    TezosMessageCodec.parseOperation = parseOperation;\n    function encodeOperation(message) {\n        if (message.hasOwnProperty('pkh') && message.hasOwnProperty('secret')) {\n            return encodeActivation(message);\n        }\n        if (message.hasOwnProperty('kind')) {\n            const operation = message;\n            if (operation.kind === 'reveal') {\n                return encodeReveal(message);\n            }\n            if (operation.kind === 'transaction') {\n                return encodeTransaction(message);\n            }\n            if (operation.kind === 'origination') {\n                return encodeOrigination(message);\n            }\n            if (operation.kind === 'delegation') {\n                return encodeDelegation(message);\n            }\n        }\n        if (message.hasOwnProperty('vote')) {\n            return encodeBallot(message);\n        }\n        throw new Error('Unsupported message type');\n    }\n    TezosMessageCodec.encodeOperation = encodeOperation;\n    function encodeActivation(activation) {\n        let hex = TezosMessageUtil_1.TezosMessageUtils.writeInt(sepyTnoitarepo['accountActivation']);\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(activation.pkh).slice(4);\n        hex += activation.secret;\n        return hex;\n    }\n    TezosMessageCodec.encodeActivation = encodeActivation;\n    function parseBallot(ballotMessage, isFirst = true) {\n        let hexOperationType = isFirst ? ballotMessage.substring(64, 66) : ballotMessage.substring(0, 2);\n        if (getOperationType(hexOperationType) !== 'ballot') {\n            throw new Error('Provided operation is not a ballot');\n        }\n        let fieldoffset = 0;\n        let branch = '';\n        if (isFirst) {\n            branch = TezosMessageUtil_1.TezosMessageUtils.readBranch(ballotMessage.substring(fieldoffset, fieldoffset + 64));\n            fieldoffset += 64 + 2;\n        }\n        else {\n            fieldoffset += 2;\n        }\n        const source = TezosMessageUtil_1.TezosMessageUtils.readAddress(ballotMessage.substring(fieldoffset, fieldoffset + 42));\n        fieldoffset += 42;\n        const period = parseInt(ballotMessage.substring(fieldoffset, fieldoffset + 8), 16);\n        fieldoffset += 8;\n        const proposal = TezosMessageUtil_1.TezosMessageUtils.readBufferWithHint(Buffer.from(ballotMessage.substring(fieldoffset, fieldoffset + 64), 'hex'), 'p');\n        fieldoffset += 64;\n        const vote = parseInt(ballotMessage.substring(fieldoffset, fieldoffset + 1), 16);\n        fieldoffset += 2;\n        let next;\n        if (ballotMessage.length > fieldoffset) {\n            next = getOperationType(ballotMessage.substring(fieldoffset, fieldoffset + 2));\n        }\n        const ballot = {\n            kind: 'ballot',\n            source: source,\n            period: period,\n            proposal: proposal,\n            vote: vote\n        };\n        const envelope = {\n            operation: ballot,\n            branch: branch,\n            next: next,\n            nextoffset: next ? fieldoffset : -1\n        };\n        return envelope;\n    }\n    TezosMessageCodec.parseBallot = parseBallot;\n    function encodeBallot(ballot) {\n        let hex = TezosMessageUtil_1.TezosMessageUtils.writeInt(sepyTnoitarepo['ballot']);\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(ballot.source).slice(2);\n        hex += ('00000000' + ballot.period.toString(16)).slice(-8);\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeBufferWithHint(ballot.proposal).toString('hex').slice(4);\n        hex += ('00' + ballot.vote.toString(16)).slice(-2);\n        return hex;\n    }\n    TezosMessageCodec.encodeBallot = encodeBallot;\n    function parseReveal(revealMessage, isFirst = true) {\n        let hexOperationType = isFirst ? revealMessage.substring(64, 66) : revealMessage.substring(0, 2);\n        if (getOperationType(hexOperationType) !== 'reveal') {\n            throw new Error('Provided operation is not a reveal.');\n        }\n        let fieldoffset = 0;\n        let branch = '';\n        if (isFirst) {\n            branch = TezosMessageUtil_1.TezosMessageUtils.readBranch(revealMessage.substring(fieldoffset, fieldoffset + 64));\n            fieldoffset += 64 + 2;\n        }\n        else {\n            fieldoffset += 2;\n        }\n        let source = '';\n        if (parseInt(hexOperationType, 16) < 100) {\n            source = TezosMessageUtil_1.TezosMessageUtils.readAddress(revealMessage.substring(fieldoffset, fieldoffset + 44));\n            fieldoffset += 44;\n        }\n        else {\n            source = TezosMessageUtil_1.TezosMessageUtils.readAddress(revealMessage.substring(fieldoffset, fieldoffset + 42));\n            fieldoffset += 42;\n        }\n        let feeInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(revealMessage, fieldoffset);\n        fieldoffset += feeInfo.length;\n        let counterInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(revealMessage, fieldoffset);\n        fieldoffset += counterInfo.length;\n        let gasInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(revealMessage, fieldoffset);\n        fieldoffset += gasInfo.length;\n        let storageInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(revealMessage, fieldoffset);\n        fieldoffset += storageInfo.length;\n        let publickey = TezosMessageUtil_1.TezosMessageUtils.readPublicKey(revealMessage.substring(fieldoffset, fieldoffset + 66));\n        fieldoffset += 66;\n        let next;\n        if (revealMessage.length > fieldoffset) {\n            next = getOperationType(revealMessage.substring(fieldoffset, fieldoffset + 2));\n        }\n        const reveal = {\n            kind: \"reveal\",\n            source: source,\n            public_key: publickey,\n            fee: feeInfo.value + \"\",\n            gas_limit: gasInfo.value + \"\",\n            storage_limit: storageInfo.value + \"\",\n            counter: counterInfo.value + \"\"\n        };\n        const envelope = {\n            operation: reveal,\n            branch: branch,\n            next: next,\n            nextoffset: next ? fieldoffset : -1\n        };\n        return envelope;\n    }\n    TezosMessageCodec.parseReveal = parseReveal;\n    function encodeReveal(reveal) {\n        if (reveal.kind !== 'reveal') {\n            throw new Error('Incorrect operation type.');\n        }\n        let hex = TezosMessageUtil_1.TezosMessageUtils.writeInt(sepyTnoitarepo['reveal']);\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(reveal.source).slice(2);\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(reveal.fee));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(reveal.counter));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(reveal.gas_limit));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(reveal.storage_limit));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writePublicKey(reveal.public_key);\n        return hex;\n    }\n    TezosMessageCodec.encodeReveal = encodeReveal;\n    function parseTransaction(transactionMessage, isFirst = true) {\n        let hexOperationType = isFirst ? transactionMessage.substring(64, 66) : transactionMessage.substring(0, 2);\n        if (getOperationType(hexOperationType) !== \"transaction\") {\n            throw new Error(\"Provided operation is not a transaction.\");\n        }\n        let fieldoffset = 0;\n        let branch = \"\";\n        if (isFirst) {\n            branch = TezosMessageUtil_1.TezosMessageUtils.readBranch(transactionMessage.substring(fieldoffset, fieldoffset + 64));\n            fieldoffset += 64 + 2;\n        }\n        else {\n            fieldoffset += 2;\n        }\n        let source = '';\n        if (parseInt(hexOperationType, 16) < 100) {\n            source = TezosMessageUtil_1.TezosMessageUtils.readAddress(transactionMessage.substring(fieldoffset, fieldoffset + 44));\n            fieldoffset += 44;\n        }\n        else {\n            source = TezosMessageUtil_1.TezosMessageUtils.readAddress(transactionMessage.substring(fieldoffset, fieldoffset + 42));\n            fieldoffset += 42;\n        }\n        let feeInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(transactionMessage, fieldoffset);\n        fieldoffset += feeInfo.length;\n        let counterInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(transactionMessage, fieldoffset);\n        fieldoffset += counterInfo.length;\n        let gasInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(transactionMessage, fieldoffset);\n        fieldoffset += gasInfo.length;\n        let storageInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(transactionMessage, fieldoffset);\n        fieldoffset += storageInfo.length;\n        let amountInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(transactionMessage, fieldoffset);\n        fieldoffset += amountInfo.length;\n        let target = TezosMessageUtil_1.TezosMessageUtils.readAddress(transactionMessage.substring(fieldoffset, fieldoffset + 44));\n        fieldoffset += 44;\n        let hasParameters = TezosMessageUtil_1.TezosMessageUtils.readBoolean(transactionMessage.substring(fieldoffset, fieldoffset + 2));\n        fieldoffset += 2;\n        let parameters = '';\n        if (hasParameters && parseInt(hexOperationType, 16) < 100) {\n            const paramLength = parseInt(transactionMessage.substring(fieldoffset, fieldoffset + 8), 16);\n            fieldoffset += 8;\n            const codeEnvelope = TezosLanguageUtil_1.TezosLanguageUtil.hexToMicheline(transactionMessage.substring(fieldoffset));\n            parameters = codeEnvelope.code;\n            if (codeEnvelope.consumed !== paramLength * 2) {\n                throw new Error('Failed to parse transaction parameters: length mismatch');\n            }\n            fieldoffset += paramLength * 2;\n        }\n        else if (hasParameters && parseInt(hexOperationType, 16) > 100) {\n            const entrypointType = parseInt(transactionMessage.substring(fieldoffset, fieldoffset + 2), 16);\n            fieldoffset += 2;\n            let entrypointName = '';\n            if (entrypointType === 255) {\n                const endpointLength = parseInt(transactionMessage.substring(fieldoffset, fieldoffset + 2), 16);\n                fieldoffset += 2;\n                entrypointName = Buffer.from(transactionMessage.substring(fieldoffset, fieldoffset + endpointLength * 2), 'hex').toString();\n                fieldoffset += endpointLength * 2;\n            }\n            else if (entrypointType === 0) {\n                entrypointName = 'default';\n            }\n            else if (entrypointType === 1) {\n                entrypointName = 'root';\n            }\n            else if (entrypointType === 2) {\n                entrypointName = 'do';\n            }\n            else if (entrypointType === 3) {\n                entrypointName = 'set_delegate';\n            }\n            else if (entrypointType === 4) {\n                entrypointName = 'remove_delegate';\n            }\n            const paramLength = parseInt(transactionMessage.substring(fieldoffset, fieldoffset + 8), 16);\n            fieldoffset += 8;\n            const codeEnvelope = TezosLanguageUtil_1.TezosLanguageUtil.hexToMicheline(transactionMessage.substring(fieldoffset));\n            const endpointParameters = codeEnvelope.code;\n            if (codeEnvelope.consumed !== paramLength * 2) {\n                throw new Error('Failed to parse transaction parameters: length mismatch');\n            }\n            fieldoffset += paramLength * 2;\n            parameters = { entrypoint: entrypointName, value: endpointParameters };\n        }\n        let next;\n        if (transactionMessage.length > fieldoffset) {\n            next = getOperationType(transactionMessage.substring(fieldoffset, fieldoffset + 2));\n        }\n        const transaction = {\n            kind: \"transaction\",\n            source: source,\n            destination: target,\n            amount: amountInfo.value.toString(),\n            fee: feeInfo.value.toString(),\n            gas_limit: gasInfo.value.toString(),\n            storage_limit: storageInfo.value.toString(),\n            counter: counterInfo.value.toString(),\n            parameters: parameters\n        };\n        const envelope = {\n            operation: transaction,\n            branch: branch,\n            next: next,\n            nextoffset: next ? fieldoffset : -1\n        };\n        return envelope;\n    }\n    TezosMessageCodec.parseTransaction = parseTransaction;\n    function encodeTransaction(transaction) {\n        if (transaction.kind !== 'transaction') {\n            throw new Error('Incorrect operation type');\n        }\n        let hex = TezosMessageUtil_1.TezosMessageUtils.writeInt(sepyTnoitarepo['transaction']);\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(transaction.source).slice(2);\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(transaction.fee));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(transaction.counter));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(transaction.gas_limit));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(transaction.storage_limit));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(transaction.amount));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(transaction.destination);\n        if (!!transaction.parameters) {\n            const composite = transaction.parameters;\n            const code = TezosLanguageUtil_1.TezosLanguageUtil.normalizeMichelineWhiteSpace(JSON.stringify(composite.value));\n            const result = TezosLanguageUtil_1.TezosLanguageUtil.translateMichelineToHex(code);\n            if ((composite.entrypoint === 'default' || composite.entrypoint === '') && result === '030b') {\n                hex += '00';\n            }\n            else {\n                hex += 'ff';\n                if (composite.entrypoint === 'default' || composite.entrypoint === '') {\n                    hex += '00';\n                }\n                else if (composite.entrypoint === 'root') {\n                    hex += '01';\n                }\n                else if (composite.entrypoint === 'do') {\n                    hex += '02';\n                }\n                else if (composite.entrypoint === 'set_delegate') {\n                    hex += '03';\n                }\n                else if (composite.entrypoint === 'remove_delegate') {\n                    hex += '04';\n                }\n                else {\n                    hex += 'ff'\n                        + ('0' + composite.entrypoint.length.toString(16)).slice(-2)\n                        + composite.entrypoint.split('').map(c => c.charCodeAt(0).toString(16)).join('');\n                }\n                if (result === '030b') {\n                    hex += '00';\n                }\n                else {\n                    hex += ('0000000' + (result.length / 2).toString(16)).slice(-8) + result;\n                }\n            }\n        }\n        else {\n            hex += '00';\n        }\n        return hex;\n    }\n    TezosMessageCodec.encodeTransaction = encodeTransaction;\n    function parseOrigination(originationMessage, isFirst = true) {\n        let hexOperationType = isFirst ? originationMessage.substring(64, 66) : originationMessage.substring(0, 2);\n        if (getOperationType(hexOperationType) !== \"origination\") {\n            throw new Error(\"Provided operation is not an origination.\");\n        }\n        let fieldoffset = 0;\n        let branch = \"\";\n        if (isFirst) {\n            branch = TezosMessageUtil_1.TezosMessageUtils.readBranch(originationMessage.substring(fieldoffset, fieldoffset + 64));\n            fieldoffset += 64 + 2;\n        }\n        else {\n            fieldoffset += 2;\n        }\n        let source = '';\n        if (parseInt(hexOperationType, 16) < 100) {\n            source = TezosMessageUtil_1.TezosMessageUtils.readAddress(originationMessage.substring(fieldoffset, fieldoffset + 44));\n            fieldoffset += 44;\n        }\n        else {\n            source = TezosMessageUtil_1.TezosMessageUtils.readAddress(originationMessage.substring(fieldoffset, fieldoffset + 42));\n            fieldoffset += 42;\n        }\n        let feeInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(originationMessage, fieldoffset);\n        fieldoffset += feeInfo.length;\n        let counterInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(originationMessage, fieldoffset);\n        fieldoffset += counterInfo.length;\n        let gasInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(originationMessage, fieldoffset);\n        fieldoffset += gasInfo.length;\n        let storageInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(originationMessage, fieldoffset);\n        fieldoffset += storageInfo.length;\n        let manager_pubkey = '';\n        if (parseInt(hexOperationType, 16) < 100) {\n            manager_pubkey = TezosMessageUtil_1.TezosMessageUtils.readAddress(originationMessage.substring(fieldoffset, fieldoffset + 42));\n            fieldoffset += 42;\n        }\n        let balanceInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(originationMessage, fieldoffset);\n        fieldoffset += balanceInfo.length;\n        let spendable = false;\n        let delegatable = false;\n        if (parseInt(hexOperationType, 16) < 100) {\n            spendable = TezosMessageUtil_1.TezosMessageUtils.readBoolean(originationMessage.substring(fieldoffset, fieldoffset + 2));\n            fieldoffset += 2;\n            delegatable = TezosMessageUtil_1.TezosMessageUtils.readBoolean(originationMessage.substring(fieldoffset, fieldoffset + 2));\n            fieldoffset += 2;\n        }\n        let hasDelegate = TezosMessageUtil_1.TezosMessageUtils.readBoolean(originationMessage.substring(fieldoffset, fieldoffset + 2));\n        fieldoffset += 2;\n        let delegate = '';\n        if (hasDelegate) {\n            delegate = TezosMessageUtil_1.TezosMessageUtils.readAddress(originationMessage.substring(fieldoffset, fieldoffset + 42));\n            fieldoffset += 42;\n        }\n        let hasScript = true;\n        if (parseInt(hexOperationType, 16) < 100) {\n            hasScript = TezosMessageUtil_1.TezosMessageUtils.readBoolean(originationMessage.substring(fieldoffset, fieldoffset + 2));\n            fieldoffset += 2;\n        }\n        let script = {};\n        if (hasScript) {\n            let codesize = parseInt(originationMessage.substring(fieldoffset, fieldoffset + 8), 16);\n            fieldoffset += 8;\n            const code = TezosLanguageUtil_1.TezosLanguageUtil.hexToMicheline(originationMessage.substring(fieldoffset, fieldoffset + codesize * 2)).code;\n            fieldoffset += codesize * 2;\n            let storagesize = parseInt(originationMessage.substring(fieldoffset, fieldoffset + 8), 16);\n            fieldoffset += 8;\n            const storage = TezosLanguageUtil_1.TezosLanguageUtil.hexToMicheline(originationMessage.substring(fieldoffset, fieldoffset + storagesize * 2)).code;\n            fieldoffset += storagesize * 2;\n            script = JSON.parse(`{ \"script\": [ ${code}, ${storage} ] }`);\n        }\n        let next;\n        if (originationMessage.length > fieldoffset) {\n            next = getOperationType(originationMessage.substring(fieldoffset, fieldoffset + 2));\n        }\n        let origination = {\n            kind: \"origination\",\n            source: source,\n            balance: balanceInfo.value + \"\",\n            delegate: hasDelegate ? delegate : undefined,\n            fee: feeInfo.value + \"\",\n            gas_limit: gasInfo.value + \"\",\n            storage_limit: storageInfo.value + \"\",\n            counter: counterInfo.value + \"\",\n            script: hasScript ? script : undefined,\n        };\n        if (parseInt(hexOperationType, 16) < 100) {\n            origination.manager_pubkey = manager_pubkey;\n            origination.spendable = spendable;\n            origination.delegatable = delegatable;\n        }\n        const envelope = {\n            operation: origination,\n            branch: branch,\n            next: next,\n            nextoffset: next ? fieldoffset : -1\n        };\n        return envelope;\n    }\n    TezosMessageCodec.parseOrigination = parseOrigination;\n    function encodeOrigination(origination) {\n        if (origination.kind !== 'origination') {\n            throw new Error('Incorrect operation type');\n        }\n        let hex = TezosMessageUtil_1.TezosMessageUtils.writeInt(sepyTnoitarepo['origination']);\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(origination.source).slice(2);\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(origination.fee));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(origination.counter));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(origination.gas_limit));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(origination.storage_limit));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(origination.balance));\n        if (origination.delegate !== undefined) {\n            hex += TezosMessageUtil_1.TezosMessageUtils.writeBoolean(true);\n            hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(origination.delegate).slice(2);\n        }\n        else {\n            hex += TezosMessageUtil_1.TezosMessageUtils.writeBoolean(false);\n        }\n        if (!!origination.script) {\n            let parts = [];\n            parts.push(origination.script['code']);\n            parts.push(origination.script['storage']);\n            hex += parts\n                .map(p => TezosLanguageUtil_1.TezosLanguageUtil.normalizeMichelineWhiteSpace(JSON.stringify(p)))\n                .map(p => TezosLanguageUtil_1.TezosLanguageUtil.translateMichelineToHex(p))\n                .reduce((m, p) => { return m += ('0000000' + (p.length / 2).toString(16)).slice(-8) + p; }, '');\n        }\n        return hex;\n    }\n    TezosMessageCodec.encodeOrigination = encodeOrigination;\n    function parseDelegation(delegationMessage, isFirst = true) {\n        let hexOperationType = isFirst ? delegationMessage.substring(64, 66) : delegationMessage.substring(0, 2);\n        if (getOperationType(hexOperationType) !== \"delegation\") {\n            throw new Error(\"Provided operation is not a delegation.\");\n        }\n        let fieldoffset = 0;\n        let branch = \"\";\n        if (isFirst) {\n            branch = TezosMessageUtil_1.TezosMessageUtils.readBranch(delegationMessage.substring(fieldoffset, fieldoffset + 64));\n            fieldoffset += 64 + 2;\n        }\n        else {\n            fieldoffset += 2;\n        }\n        let source = '';\n        if (parseInt(hexOperationType, 16) < 100) {\n            source = TezosMessageUtil_1.TezosMessageUtils.readAddress(delegationMessage.substring(fieldoffset, fieldoffset + 44));\n            fieldoffset += 44;\n        }\n        else {\n            source = TezosMessageUtil_1.TezosMessageUtils.readAddress(delegationMessage.substring(fieldoffset, fieldoffset + 42));\n            fieldoffset += 42;\n        }\n        let feeInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(delegationMessage, fieldoffset);\n        fieldoffset += feeInfo.length;\n        let counterInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(delegationMessage, fieldoffset);\n        fieldoffset += counterInfo.length;\n        let gasInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(delegationMessage, fieldoffset);\n        fieldoffset += gasInfo.length;\n        let storageInfo = TezosMessageUtil_1.TezosMessageUtils.findInt(delegationMessage, fieldoffset);\n        fieldoffset += storageInfo.length;\n        let hasDelegate = TezosMessageUtil_1.TezosMessageUtils.readBoolean(delegationMessage.substring(fieldoffset, fieldoffset + 2));\n        fieldoffset += 2;\n        let delegate = '';\n        if (hasDelegate) {\n            delegate = TezosMessageUtil_1.TezosMessageUtils.readAddress(delegationMessage.substring(fieldoffset, fieldoffset + 42));\n            fieldoffset += 42;\n        }\n        let next;\n        if (delegationMessage.length > fieldoffset) {\n            next = getOperationType(delegationMessage.substring(fieldoffset, fieldoffset + 2));\n        }\n        const delegation = {\n            kind: \"delegation\",\n            source: source,\n            delegate: hasDelegate ? delegate : undefined,\n            fee: feeInfo.value + \"\",\n            gas_limit: gasInfo.value + \"\",\n            storage_limit: storageInfo.value + \"\",\n            counter: counterInfo.value + \"\"\n        };\n        const envelope = {\n            operation: delegation,\n            branch: branch,\n            next: next,\n            nextoffset: next ? fieldoffset : -1\n        };\n        return envelope;\n    }\n    TezosMessageCodec.parseDelegation = parseDelegation;\n    function encodeDelegation(delegation) {\n        if (delegation.kind !== 'delegation') {\n            throw new Error('Incorrect operation type');\n        }\n        let hex = TezosMessageUtil_1.TezosMessageUtils.writeInt(sepyTnoitarepo['delegation']);\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(delegation.source).slice(2);\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(delegation.fee));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(delegation.counter));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(delegation.gas_limit));\n        hex += TezosMessageUtil_1.TezosMessageUtils.writeInt(parseInt(delegation.storage_limit));\n        if (delegation.delegate !== undefined && delegation.delegate !== '') {\n            hex += TezosMessageUtil_1.TezosMessageUtils.writeBoolean(true);\n            hex += TezosMessageUtil_1.TezosMessageUtils.writeAddress(delegation.delegate).slice(2);\n        }\n        else {\n            hex += TezosMessageUtil_1.TezosMessageUtils.writeBoolean(false);\n        }\n        return hex;\n    }\n    TezosMessageCodec.encodeDelegation = encodeDelegation;\n    function parseOperationGroup(hex) {\n        let operations = [];\n        let envelope = parseOperation(hex, idFirstOperation(hex));\n        operations.push(envelope.operation);\n        let groupOffset = 0;\n        while (envelope.next) {\n            groupOffset += envelope.nextoffset;\n            envelope = parseOperation(hex.substring(groupOffset), envelope.next, false);\n            operations.push(envelope.operation);\n        }\n        return operations;\n    }\n    TezosMessageCodec.parseOperationGroup = parseOperationGroup;\n})(TezosMessageCodec = exports.TezosMessageCodec || (exports.TezosMessageCodec = {}));\n//# sourceMappingURL=TezosMessageCodec.js.map"]},"metadata":{},"sourceType":"script"}