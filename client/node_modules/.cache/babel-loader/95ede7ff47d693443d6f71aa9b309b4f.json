{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ConseilQueryBuilder_1 = require(\"../ConseilQueryBuilder\");\n\nconst QueryTypes_1 = require(\"../../types/conseil/QueryTypes\");\n\nconst ConseilDataClient_1 = require(\"../ConseilDataClient\");\n\nvar TezosConseilClient;\n\n(function (TezosConseilClient) {\n  const BLOCKS = 'blocks';\n  const ACCOUNTS = 'accounts';\n  const OPERATION_GROUPS = 'operation_groups';\n  const OPERATIONS = 'operations';\n  const FEES = 'fees';\n  const PROPOSALS = 'proposals';\n  const BAKERS = 'bakers';\n  const BALLOTS = 'ballots';\n\n  function getTezosEntityData(serverInfo, network, entity, query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ConseilDataClient_1.ConseilDataClient.executeEntityQuery(serverInfo, 'tezos', network, entity, query);\n    });\n  }\n\n  TezosConseilClient.getTezosEntityData = getTezosEntityData;\n\n  function getBlockHead(serverInfo, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const query = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addOrdering(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'level', QueryTypes_1.ConseilSortDirection.DESC), 1);\n      const r = yield getTezosEntityData(serverInfo, network, BLOCKS, query);\n      return r[0];\n    });\n  }\n\n  TezosConseilClient.getBlockHead = getBlockHead;\n\n  function getBlock(serverInfo, network, hash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (hash === 'head') {\n        return getBlockHead(serverInfo, network);\n      }\n\n      const query = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'hash', QueryTypes_1.ConseilOperator.EQ, [hash], false), 1);\n      const r = yield getTezosEntityData(serverInfo, network, BLOCKS, query);\n      return r[0];\n    });\n  }\n\n  TezosConseilClient.getBlock = getBlock;\n\n  function getBlockByLevel(serverInfo, network, level) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const query = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'level', QueryTypes_1.ConseilOperator.EQ, [level], false), 1);\n      const r = yield getTezosEntityData(serverInfo, network, BLOCKS, query);\n      return r[0];\n    });\n  }\n\n  TezosConseilClient.getBlockByLevel = getBlockByLevel;\n\n  function getAccount(serverInfo, network, accountID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const query = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'account_id', QueryTypes_1.ConseilOperator.EQ, [accountID], false), 1);\n      const r = yield getTezosEntityData(serverInfo, network, ACCOUNTS, query);\n      return r[0];\n    });\n  }\n\n  TezosConseilClient.getAccount = getAccount;\n\n  function getOperationGroup(serverInfo, network, operationGroupID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const query = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'hash', QueryTypes_1.ConseilOperator.EQ, [operationGroupID], false), 1);\n      const r = yield getTezosEntityData(serverInfo, network, OPERATION_GROUPS, query);\n      return r[0];\n    });\n  }\n\n  TezosConseilClient.getOperationGroup = getOperationGroup;\n\n  function getOperation(serverInfo, network, operationGroupID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const query = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'operation_group_hash', QueryTypes_1.ConseilOperator.EQ, [operationGroupID], false), 1);\n      const r = yield getTezosEntityData(serverInfo, network, OPERATIONS, query);\n      return r[0];\n    });\n  }\n\n  TezosConseilClient.getOperation = getOperation;\n\n  function getBlocks(serverInfo, network, query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return getTezosEntityData(serverInfo, network, BLOCKS, query);\n    });\n  }\n\n  TezosConseilClient.getBlocks = getBlocks;\n\n  function getAccounts(serverInfo, network, query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return getTezosEntityData(serverInfo, network, ACCOUNTS, query);\n    });\n  }\n\n  TezosConseilClient.getAccounts = getAccounts;\n\n  function getOperationGroups(serverInfo, network, query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return getTezosEntityData(serverInfo, network, OPERATION_GROUPS, query);\n    });\n  }\n\n  TezosConseilClient.getOperationGroups = getOperationGroups;\n\n  function getOperations(serverInfo, network, query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return getTezosEntityData(serverInfo, network, OPERATIONS, query);\n    });\n  }\n\n  TezosConseilClient.getOperations = getOperations;\n\n  function getFeeStatistics(serverInfo, network, operationType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let query = ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery();\n      query = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(query, 'kind', QueryTypes_1.ConseilOperator.EQ, [operationType]);\n      query = ConseilQueryBuilder_1.ConseilQueryBuilder.addOrdering(query, 'timestamp', QueryTypes_1.ConseilSortDirection.DESC);\n      query = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(query, 1);\n      return getTezosEntityData(serverInfo, network, FEES, query);\n    });\n  }\n\n  TezosConseilClient.getFeeStatistics = getFeeStatistics;\n\n  function getProposals(serverInfo, network, query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return getTezosEntityData(serverInfo, network, PROPOSALS, query);\n    });\n  }\n\n  TezosConseilClient.getProposals = getProposals;\n\n  function getBakers(serverInfo, network, query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return getTezosEntityData(serverInfo, network, BAKERS, query);\n    });\n  }\n\n  TezosConseilClient.getBakers = getBakers;\n\n  function getBallots(serverInfo, network, query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return getTezosEntityData(serverInfo, network, BALLOTS, query);\n    });\n  }\n\n  TezosConseilClient.getBallots = getBallots;\n\n  function awaitOperationConfirmation(serverInfo, network, hash, duration, blocktime = 60) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (duration <= 0) {\n        throw new Error('Invalid duration');\n      }\n\n      const initialLevel = (yield getBlockHead(serverInfo, network))['level'];\n      let currentLevel = initialLevel;\n      let operationQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery();\n      operationQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(operationQuery, 'operation_group_hash', QueryTypes_1.ConseilOperator.EQ, [hash], false);\n      operationQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(operationQuery, 'timestamp', QueryTypes_1.ConseilOperator.AFTER, [new Date().getTime() - 60000], false);\n      operationQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(operationQuery, 1);\n\n      while (initialLevel + duration > currentLevel) {\n        const group = yield getOperations(serverInfo, network, operationQuery);\n\n        if (group.length > 0) {\n          return group[0];\n        }\n\n        currentLevel = (yield getBlockHead(serverInfo, network))['level'];\n\n        if (initialLevel + duration < currentLevel) {\n          break;\n        }\n\n        yield new Promise(resolve => setTimeout(resolve, blocktime * 1000));\n      }\n\n      throw new Error(`Did not observe ${hash} on ${network} in ${duration} block${duration > 1 ? 's' : ''} since ${initialLevel}`);\n    });\n  }\n\n  TezosConseilClient.awaitOperationConfirmation = awaitOperationConfirmation;\n\n  function awaitOperationForkConfirmation(serverInfo, network, hash, duration, depth) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const op = yield awaitOperationConfirmation(serverInfo, network, hash, duration);\n      const initialLevel = op['block_level'];\n      const initialHash = op['block_hash'];\n      let currentLevel = initialLevel;\n      yield new Promise(resolve => setTimeout(resolve, depth * 50 * 1000));\n\n      while (currentLevel < initialLevel + depth) {\n        const currentBlock = yield getBlockHead(serverInfo, network);\n        currentLevel = currentBlock['level'];\n\n        if (currentLevel >= initialLevel + depth) {\n          break;\n        }\n\n        yield new Promise(resolve => setTimeout(resolve, 60 * 1000));\n      }\n\n      let blockSequenceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery();\n      blockSequenceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addFields(blockSequenceQuery, 'level', 'hash', 'predecessor');\n      blockSequenceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(blockSequenceQuery, 'level', QueryTypes_1.ConseilOperator.BETWEEN, [initialLevel - 1, initialLevel + depth]);\n      blockSequenceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(blockSequenceQuery, depth * 2);\n      const blockSequenceResult = yield getBlocks(serverInfo, network, blockSequenceQuery);\n\n      if (blockSequenceResult.length === depth + 2) {\n        return fastBlockContinuity(blockSequenceResult, initialLevel, initialHash);\n      } else {\n        return slowBlockContinuity(blockSequenceResult, initialLevel, initialHash, depth);\n      }\n    });\n  }\n\n  TezosConseilClient.awaitOperationForkConfirmation = awaitOperationForkConfirmation;\n\n  function getBigMapData(serverInfo, accountID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!accountID.startsWith('KT1')) {\n        throw new Error('Invalid address');\n      }\n\n      const ownerQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addFields(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'account_id', QueryTypes_1.ConseilOperator.EQ, [accountID], false), 'big_map_id'), 100);\n      const ownerResult = yield getTezosEntityData(serverInfo, serverInfo.network, 'originated_account_maps', ownerQuery);\n\n      if (ownerResult.length < 1) {\n        return undefined;\n      }\n\n      const definitionQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'big_map_id', ownerResult.length > 1 ? QueryTypes_1.ConseilOperator.IN : QueryTypes_1.ConseilOperator.EQ, ownerResult.map(r => r.big_map_id), false), 100);\n      const definitionResult = yield getTezosEntityData(serverInfo, serverInfo.network, 'big_maps', definitionQuery);\n      const contentQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addFields(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'big_map_id', ownerResult.length > 1 ? QueryTypes_1.ConseilOperator.IN : QueryTypes_1.ConseilOperator.EQ, ownerResult.map(r => r.big_map_id), false), 'big_map_id', 'key', 'value'), 1000);\n      const contentResult = yield getTezosEntityData(serverInfo, serverInfo.network, 'big_map_contents', contentQuery);\n      let maps = [];\n\n      for (const d of definitionResult) {\n        const definition = {\n          index: Number(d['big_map_id']),\n          key: d['key_type'],\n          value: d['value_type']\n        };\n        let content = [];\n\n        for (const c of contentResult.filter(r => r['big_map_id'] === definition.index)) {\n          content.push({\n            key: JSON.stringify(c['key']),\n            value: JSON.stringify(c['value'])\n          });\n        }\n\n        maps.push({\n          definition,\n          content\n        });\n      }\n\n      return {\n        contract: accountID,\n        maps\n      };\n    });\n  }\n\n  TezosConseilClient.getBigMapData = getBigMapData;\n\n  function fastBlockContinuity(blocks, initialLevel, initialHash) {\n    try {\n      return blocks.sort((a, b) => parseInt(a['level']) - parseInt(b['level'])).reduce((a, c, i) => {\n        if (!a) {\n          throw new Error('Block sequence mismatch');\n        }\n\n        if (i > 1) {\n          return c['predecessor'] === blocks[i - 1]['hash'];\n        }\n\n        if (i === 1) {\n          return a && c['level'] === initialLevel && c['hash'] === initialHash && c['predecessor'] === blocks[i - 1]['hash'];\n        }\n\n        if (i === 0) {\n          return true;\n        }\n      }, true);\n    } catch (_a) {\n      return false;\n    }\n  }\n\n  function slowBlockContinuity(blocks, initialLevel, initialHash, depth) {\n    throw new Error('Not implemented');\n  }\n\n  function getEntityQueryForId(id) {\n    let q = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 1);\n\n    if (typeof id === 'number') {\n      const n = Number(id);\n\n      if (n < 0) {\n        throw new Error('Invalid numeric id parameter');\n      }\n\n      return {\n        entity: BLOCKS,\n        query: ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(q, 'level', QueryTypes_1.ConseilOperator.EQ, [id], false)\n      };\n    } else if (typeof id === 'string') {\n      const s = String(id);\n\n      if (s.startsWith('tz1') || s.startsWith('tz2') || s.startsWith('tz3') || s.startsWith('KT1')) {\n        return {\n          entity: ACCOUNTS,\n          query: ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(q, 'account_id', QueryTypes_1.ConseilOperator.EQ, [id], false)\n        };\n      } else if (s.startsWith('B')) {\n        return {\n          entity: BLOCKS,\n          query: ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(q, 'hash', QueryTypes_1.ConseilOperator.EQ, [id], false)\n        };\n      } else if (s.startsWith('o')) {\n        q = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(q, 1000);\n        return {\n          entity: OPERATIONS,\n          query: ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(q, 'operation_group_hash', QueryTypes_1.ConseilOperator.EQ, [id], false)\n        };\n      }\n    }\n\n    throw new Error('Invalid id parameter');\n  }\n\n  TezosConseilClient.getEntityQueryForId = getEntityQueryForId;\n})(TezosConseilClient = exports.TezosConseilClient || (exports.TezosConseilClient = {}));","map":{"version":3,"sources":["../../../src/reporting/tezos/TezosConseilClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ConseilQueryBuilder_1 = require(\"../ConseilQueryBuilder\");\nconst QueryTypes_1 = require(\"../../types/conseil/QueryTypes\");\nconst ConseilDataClient_1 = require(\"../ConseilDataClient\");\nvar TezosConseilClient;\n(function (TezosConseilClient) {\n    const BLOCKS = 'blocks';\n    const ACCOUNTS = 'accounts';\n    const OPERATION_GROUPS = 'operation_groups';\n    const OPERATIONS = 'operations';\n    const FEES = 'fees';\n    const PROPOSALS = 'proposals';\n    const BAKERS = 'bakers';\n    const BALLOTS = 'ballots';\n    function getTezosEntityData(serverInfo, network, entity, query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return ConseilDataClient_1.ConseilDataClient.executeEntityQuery(serverInfo, 'tezos', network, entity, query);\n        });\n    }\n    TezosConseilClient.getTezosEntityData = getTezosEntityData;\n    function getBlockHead(serverInfo, network) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const query = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addOrdering(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'level', QueryTypes_1.ConseilSortDirection.DESC), 1);\n            const r = yield getTezosEntityData(serverInfo, network, BLOCKS, query);\n            return r[0];\n        });\n    }\n    TezosConseilClient.getBlockHead = getBlockHead;\n    function getBlock(serverInfo, network, hash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (hash === 'head') {\n                return getBlockHead(serverInfo, network);\n            }\n            const query = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'hash', QueryTypes_1.ConseilOperator.EQ, [hash], false), 1);\n            const r = yield getTezosEntityData(serverInfo, network, BLOCKS, query);\n            return r[0];\n        });\n    }\n    TezosConseilClient.getBlock = getBlock;\n    function getBlockByLevel(serverInfo, network, level) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const query = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'level', QueryTypes_1.ConseilOperator.EQ, [level], false), 1);\n            const r = yield getTezosEntityData(serverInfo, network, BLOCKS, query);\n            return r[0];\n        });\n    }\n    TezosConseilClient.getBlockByLevel = getBlockByLevel;\n    function getAccount(serverInfo, network, accountID) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const query = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'account_id', QueryTypes_1.ConseilOperator.EQ, [accountID], false), 1);\n            const r = yield getTezosEntityData(serverInfo, network, ACCOUNTS, query);\n            return r[0];\n        });\n    }\n    TezosConseilClient.getAccount = getAccount;\n    function getOperationGroup(serverInfo, network, operationGroupID) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const query = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'hash', QueryTypes_1.ConseilOperator.EQ, [operationGroupID], false), 1);\n            const r = yield getTezosEntityData(serverInfo, network, OPERATION_GROUPS, query);\n            return r[0];\n        });\n    }\n    TezosConseilClient.getOperationGroup = getOperationGroup;\n    function getOperation(serverInfo, network, operationGroupID) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const query = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'operation_group_hash', QueryTypes_1.ConseilOperator.EQ, [operationGroupID], false), 1);\n            const r = yield getTezosEntityData(serverInfo, network, OPERATIONS, query);\n            return r[0];\n        });\n    }\n    TezosConseilClient.getOperation = getOperation;\n    function getBlocks(serverInfo, network, query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return getTezosEntityData(serverInfo, network, BLOCKS, query);\n        });\n    }\n    TezosConseilClient.getBlocks = getBlocks;\n    function getAccounts(serverInfo, network, query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return getTezosEntityData(serverInfo, network, ACCOUNTS, query);\n        });\n    }\n    TezosConseilClient.getAccounts = getAccounts;\n    function getOperationGroups(serverInfo, network, query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return getTezosEntityData(serverInfo, network, OPERATION_GROUPS, query);\n        });\n    }\n    TezosConseilClient.getOperationGroups = getOperationGroups;\n    function getOperations(serverInfo, network, query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return getTezosEntityData(serverInfo, network, OPERATIONS, query);\n        });\n    }\n    TezosConseilClient.getOperations = getOperations;\n    function getFeeStatistics(serverInfo, network, operationType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let query = ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery();\n            query = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(query, 'kind', QueryTypes_1.ConseilOperator.EQ, [operationType]);\n            query = ConseilQueryBuilder_1.ConseilQueryBuilder.addOrdering(query, 'timestamp', QueryTypes_1.ConseilSortDirection.DESC);\n            query = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(query, 1);\n            return getTezosEntityData(serverInfo, network, FEES, query);\n        });\n    }\n    TezosConseilClient.getFeeStatistics = getFeeStatistics;\n    function getProposals(serverInfo, network, query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return getTezosEntityData(serverInfo, network, PROPOSALS, query);\n        });\n    }\n    TezosConseilClient.getProposals = getProposals;\n    function getBakers(serverInfo, network, query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return getTezosEntityData(serverInfo, network, BAKERS, query);\n        });\n    }\n    TezosConseilClient.getBakers = getBakers;\n    function getBallots(serverInfo, network, query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return getTezosEntityData(serverInfo, network, BALLOTS, query);\n        });\n    }\n    TezosConseilClient.getBallots = getBallots;\n    function awaitOperationConfirmation(serverInfo, network, hash, duration, blocktime = 60) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (duration <= 0) {\n                throw new Error('Invalid duration');\n            }\n            const initialLevel = (yield getBlockHead(serverInfo, network))['level'];\n            let currentLevel = initialLevel;\n            let operationQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery();\n            operationQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(operationQuery, 'operation_group_hash', QueryTypes_1.ConseilOperator.EQ, [hash], false);\n            operationQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(operationQuery, 'timestamp', QueryTypes_1.ConseilOperator.AFTER, [(new Date).getTime() - 60000], false);\n            operationQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(operationQuery, 1);\n            while (initialLevel + duration > currentLevel) {\n                const group = yield getOperations(serverInfo, network, operationQuery);\n                if (group.length > 0) {\n                    return group[0];\n                }\n                currentLevel = (yield getBlockHead(serverInfo, network))['level'];\n                if (initialLevel + duration < currentLevel) {\n                    break;\n                }\n                yield new Promise(resolve => setTimeout(resolve, blocktime * 1000));\n            }\n            throw new Error(`Did not observe ${hash} on ${network} in ${duration} block${duration > 1 ? 's' : ''} since ${initialLevel}`);\n        });\n    }\n    TezosConseilClient.awaitOperationConfirmation = awaitOperationConfirmation;\n    function awaitOperationForkConfirmation(serverInfo, network, hash, duration, depth) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const op = yield awaitOperationConfirmation(serverInfo, network, hash, duration);\n            const initialLevel = op['block_level'];\n            const initialHash = op['block_hash'];\n            let currentLevel = initialLevel;\n            yield new Promise(resolve => setTimeout(resolve, depth * 50 * 1000));\n            while (currentLevel < initialLevel + depth) {\n                const currentBlock = yield getBlockHead(serverInfo, network);\n                currentLevel = currentBlock['level'];\n                if (currentLevel >= initialLevel + depth) {\n                    break;\n                }\n                yield new Promise(resolve => setTimeout(resolve, 60 * 1000));\n            }\n            let blockSequenceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery();\n            blockSequenceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addFields(blockSequenceQuery, 'level', 'hash', 'predecessor');\n            blockSequenceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(blockSequenceQuery, 'level', QueryTypes_1.ConseilOperator.BETWEEN, [initialLevel - 1, initialLevel + depth]);\n            blockSequenceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(blockSequenceQuery, depth * 2);\n            const blockSequenceResult = yield getBlocks(serverInfo, network, blockSequenceQuery);\n            if (blockSequenceResult.length === depth + 2) {\n                return fastBlockContinuity(blockSequenceResult, initialLevel, initialHash);\n            }\n            else {\n                return slowBlockContinuity(blockSequenceResult, initialLevel, initialHash, depth);\n            }\n        });\n    }\n    TezosConseilClient.awaitOperationForkConfirmation = awaitOperationForkConfirmation;\n    function getBigMapData(serverInfo, accountID) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!accountID.startsWith('KT1')) {\n                throw new Error('Invalid address');\n            }\n            const ownerQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addFields(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'account_id', QueryTypes_1.ConseilOperator.EQ, [accountID], false), 'big_map_id'), 100);\n            const ownerResult = yield getTezosEntityData(serverInfo, serverInfo.network, 'originated_account_maps', ownerQuery);\n            if (ownerResult.length < 1) {\n                return undefined;\n            }\n            const definitionQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'big_map_id', (ownerResult.length > 1 ? QueryTypes_1.ConseilOperator.IN : QueryTypes_1.ConseilOperator.EQ), ownerResult.map(r => r.big_map_id), false), 100);\n            const definitionResult = yield getTezosEntityData(serverInfo, serverInfo.network, 'big_maps', definitionQuery);\n            const contentQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.addFields(ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 'big_map_id', (ownerResult.length > 1 ? QueryTypes_1.ConseilOperator.IN : QueryTypes_1.ConseilOperator.EQ), ownerResult.map(r => r.big_map_id), false), 'big_map_id', 'key', 'value'), 1000);\n            const contentResult = yield getTezosEntityData(serverInfo, serverInfo.network, 'big_map_contents', contentQuery);\n            let maps = [];\n            for (const d of definitionResult) {\n                const definition = { index: Number(d['big_map_id']), key: d['key_type'], value: d['value_type'] };\n                let content = [];\n                for (const c of contentResult.filter(r => r['big_map_id'] === definition.index)) {\n                    content.push({ key: JSON.stringify(c['key']), value: JSON.stringify(c['value']) });\n                }\n                maps.push({ definition, content });\n            }\n            return { contract: accountID, maps };\n        });\n    }\n    TezosConseilClient.getBigMapData = getBigMapData;\n    function fastBlockContinuity(blocks, initialLevel, initialHash) {\n        try {\n            return blocks.sort((a, b) => parseInt(a['level']) - parseInt(b['level'])).reduce((a, c, i) => {\n                if (!a) {\n                    throw new Error('Block sequence mismatch');\n                }\n                if (i > 1) {\n                    return c['predecessor'] === blocks[i - 1]['hash'];\n                }\n                if (i === 1) {\n                    return a && c['level'] === initialLevel\n                        && c['hash'] === initialHash\n                        && c['predecessor'] === blocks[i - 1]['hash'];\n                }\n                if (i === 0) {\n                    return true;\n                }\n            }, true);\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    function slowBlockContinuity(blocks, initialLevel, initialHash, depth) {\n        throw new Error('Not implemented');\n    }\n    function getEntityQueryForId(id) {\n        let q = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery(), 1);\n        if (typeof id === 'number') {\n            const n = Number(id);\n            if (n < 0) {\n                throw new Error('Invalid numeric id parameter');\n            }\n            return { entity: BLOCKS, query: ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(q, 'level', QueryTypes_1.ConseilOperator.EQ, [id], false) };\n        }\n        else if (typeof id === 'string') {\n            const s = String(id);\n            if (s.startsWith('tz1') || s.startsWith('tz2') || s.startsWith('tz3') || s.startsWith('KT1')) {\n                return { entity: ACCOUNTS, query: ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(q, 'account_id', QueryTypes_1.ConseilOperator.EQ, [id], false) };\n            }\n            else if (s.startsWith('B')) {\n                return { entity: BLOCKS, query: ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(q, 'hash', QueryTypes_1.ConseilOperator.EQ, [id], false) };\n            }\n            else if (s.startsWith('o')) {\n                q = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(q, 1000);\n                return { entity: OPERATIONS, query: ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(q, 'operation_group_hash', QueryTypes_1.ConseilOperator.EQ, [id], false) };\n            }\n        }\n        throw new Error('Invalid id parameter');\n    }\n    TezosConseilClient.getEntityQueryForId = getEntityQueryForId;\n})(TezosConseilClient = exports.TezosConseilClient || (exports.TezosConseilClient = {}));\n//# sourceMappingURL=TezosConseilClient.js.map"]},"metadata":{},"sourceType":"script"}