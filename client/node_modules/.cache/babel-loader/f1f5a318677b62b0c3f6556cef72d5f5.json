{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction id(d) {\n  return d[0];\n}\n\nconst moo = require(\"moo\");\n\nconst bigInt = require(\"big-integer\");\n\nconst MichelineKeywords = ['\"parameter\"', '\"storage\"', '\"code\"', '\"False\"', '\"Elt\"', '\"Left\"', '\"None\"', '\"Pair\"', '\"Right\"', '\"Some\"', '\"True\"', '\"Unit\"', '\"PACK\"', '\"UNPACK\"', '\"BLAKE2B\"', '\"SHA256\"', '\"SHA512\"', '\"ABS\"', '\"ADD\"', '\"AMOUNT\"', '\"AND\"', '\"BALANCE\"', '\"CAR\"', '\"CDR\"', '\"CHECK_SIGNATURE\"', '\"COMPARE\"', '\"CONCAT\"', '\"CONS\"', '\"CREATE_ACCOUNT\"', '\"CREATE_CONTRACT\"', '\"IMPLICIT_ACCOUNT\"', '\"DIP\"', '\"DROP\"', '\"DUP\"', '\"EDIV\"', '\"EMPTY_MAP\"', '\"EMPTY_SET\"', '\"EQ\"', '\"EXEC\"', '\"FAILWITH\"', '\"GE\"', '\"GET\"', '\"GT\"', '\"HASH_KEY\"', '\"IF\"', '\"IF_CONS\"', '\"IF_LEFT\"', '\"IF_NONE\"', '\"INT\"', '\"LAMBDA\"', '\"LE\"', '\"LEFT\"', '\"LOOP\"', '\"LSL\"', '\"LSR\"', '\"LT\"', '\"MAP\"', '\"MEM\"', '\"MUL\"', '\"NEG\"', '\"NEQ\"', '\"NIL\"', '\"NONE\"', '\"NOT\"', '\"NOW\"', '\"OR\"', '\"PAIR\"', '\"PUSH\"', '\"RIGHT\"', '\"SIZE\"', '\"SOME\"', '\"SOURCE\"', '\"SENDER\"', '\"SELF\"', '\"STEPS_TO_QUOTA\"', '\"SUB\"', '\"SWAP\"', '\"TRANSFER_TOKENS\"', '\"SET_DELEGATE\"', '\"UNIT\"', '\"UPDATE\"', '\"XOR\"', '\"ITER\"', '\"LOOP_LEFT\"', '\"ADDRESS\"', '\"CONTRACT\"', '\"ISNAT\"', '\"CAST\"', '\"RENAME\"', '\"bool\"', '\"contract\"', '\"int\"', '\"key\"', '\"key_hash\"', '\"lambda\"', '\"list\"', '\"map\"', '\"big_map\"', '\"nat\"', '\"option\"', '\"or\"', '\"pair\"', '\"set\"', '\"signature\"', '\"string\"', '\"bytes\"', '\"mutez\"', '\"timestamp\"', '\"unit\"', '\"operation\"', '\"address\"', '\"SLICE\"', '\"DIG\"', '\"DUG\"', '\"EMPTY_BIG_MAP\"', '\"APPLY\"', '\"chain_id\"', '\"CHAIN_ID\"'];\nconst lexer = moo.compile({\n  keyword: MichelineKeywords,\n  lbrace: '{',\n  rbrace: '}',\n  lbracket: '[',\n  rbracket: ']',\n  colon: \":\",\n  comma: \",\",\n  _: /[ \\t]+/,\n  quotedValue: /\\\"[\\S\\s]*?\\\"/\n});\n\nconst staticIntToHex = d => {\n  const prefix = '00';\n  const text = d[6].toString();\n  const value = writeSignedInt(parseInt(text.substring(1, text.length - 1)));\n  return prefix + value;\n};\n\nconst staticStringToHex = d => {\n  const prefix = '01';\n  let text = d[6].toString();\n  text = text.substring(1, text.length - 1);\n  const len = encodeLength(text.length);\n  text = text.split('').map(c => c.charCodeAt(0).toString(16)).join('');\n  return prefix + len + text;\n};\n\nconst staticBytesToHex = d => {\n  const prefix = '0a';\n  let bytes = d[6].toString();\n  bytes = bytes.substring(1, bytes.length - 1);\n  const len = encodeLength(bytes.length / 2);\n  return prefix + len + bytes;\n};\n\nconst staticArrayToHex = d => {\n  const matchedArray = d[2];\n  const prefix = '02';\n  const content = matchedArray.map(a => a[0]).join('');\n  const len = encodeLength(content.length / 2);\n  return prefix + len + content;\n};\n\nconst primBareToHex = d => {\n  const prefix = '03';\n  const prim = encodePrimitive(d[6].toString());\n  return prefix + prim;\n};\n\nconst primAnnToHex = d => {\n  const prefix = '04';\n  const prim = encodePrimitive(d[6].toString());\n  let ann = d[15].map(v => {\n    let t = v[0].toString();\n    t = t.substring(1, t.length - 1);\n    return t;\n  }).join(' ');\n  ann = ann.split('').map(c => c.charCodeAt(0).toString(16)).join('');\n  ann = encodeLength(ann.length / 2) + ann;\n  return prefix + prim + ann;\n};\n\nconst primArgToHex = d => {\n  let prefix = '05';\n\n  if (d[15].length == 2) {\n    prefix = '07';\n  } else if (d[15].length > 2) {\n    prefix = '09';\n  }\n\n  const prim = encodePrimitive(d[6].toString());\n  let args = d[15].map(v => v[0]).join('');\n\n  if (prefix === '09') {\n    args = ('0000000' + (args.length / 2).toString(16)).slice(-8) + args;\n    args += '00000000';\n  }\n\n  return prefix + prim + args;\n};\n\nconst primArgAnnToHex = d => {\n  let prefix = '06';\n\n  if (d[15].length == 2) {\n    prefix = '08';\n  } else if (d[15].length > 2) {\n    prefix = '09';\n  }\n\n  const prim = encodePrimitive(d[6].toString());\n  let args = d[15].map(v => v[0]).join('');\n  let ann = d[26].map(v => {\n    let t = v[0].toString();\n    t = t.substring(1, t.length - 1);\n    return t;\n  }).join(' ');\n  ann = ann.split('').map(c => c.charCodeAt(0).toString(16)).join('');\n  ann = encodeLength(ann.length / 2) + ann;\n\n  if (prefix === '09') {\n    args = ('0000000' + (args.length / 2).toString(16)).slice(-8) + args;\n  }\n\n  return prefix + prim + args + ann;\n};\n\nconst encodePrimitive = p => {\n  return ('00' + MichelineKeywords.indexOf(p).toString(16)).slice(-2);\n};\n\nconst encodeLength = l => {\n  return ('0000000' + l.toString(16)).slice(-8);\n};\n\nconst writeSignedInt = value => {\n  if (value === 0) {\n    return '00';\n  }\n\n  const n = bigInt(value).abs();\n  const l = n.bitLength().toJSNumber();\n  let arr = [];\n  let v = n;\n\n  for (let i = 0; i < l; i += 7) {\n    let byte = bigInt.zero;\n\n    if (i === 0) {\n      byte = v.and(0x3f);\n      v = v.shiftRight(6);\n    } else {\n      byte = v.and(0x7f);\n      v = v.shiftRight(7);\n    }\n\n    if (value < 0 && i === 0) {\n      byte = byte.or(0x40);\n    }\n\n    if (i + 7 < l) {\n      byte = byte.or(0x80);\n    }\n\n    arr.push(byte.toJSNumber());\n  }\n\n  if (l % 7 === 0) {\n    arr[arr.length - 1] = arr[arr.length - 1] | 0x80;\n    arr.push(1);\n  }\n\n  return arr.map(v => ('0' + v.toString(16)).slice(-2)).join('');\n};\n\n;\n;\n;\n;\nconst grammar = {\n  Lexer: lexer,\n  ParserRules: [{\n    \"name\": \"main\",\n    \"symbols\": [\"staticObject\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"main\",\n    \"symbols\": [\"primBare\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"main\",\n    \"symbols\": [\"primArg\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"main\",\n    \"symbols\": [\"primAnn\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"main\",\n    \"symbols\": [\"primArgAnn\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"main\",\n    \"symbols\": [\"anyArray\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"staticInt$ebnf$1\",\n    \"symbols\": []\n  }, {\n    \"name\": \"staticInt$ebnf$1\",\n    \"symbols\": [\"staticInt$ebnf$1\", lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"staticInt\",\n    \"symbols\": [lexer.has(\"lbrace\") ? {\n      type: \"lbrace\"\n    } : lbrace, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, {\n      \"literal\": \"\\\"int\\\"\"\n    }, \"staticInt$ebnf$1\", lexer.has(\"colon\") ? {\n      type: \"colon\"\n    } : colon, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"quotedValue\") ? {\n      type: \"quotedValue\"\n    } : quotedValue, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"rbrace\") ? {\n      type: \"rbrace\"\n    } : rbrace],\n    \"postprocess\": staticIntToHex\n  }, {\n    \"name\": \"staticString$ebnf$1\",\n    \"symbols\": []\n  }, {\n    \"name\": \"staticString$ebnf$1\",\n    \"symbols\": [\"staticString$ebnf$1\", lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"staticString\",\n    \"symbols\": [lexer.has(\"lbrace\") ? {\n      type: \"lbrace\"\n    } : lbrace, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, {\n      \"literal\": \"\\\"string\\\"\"\n    }, \"staticString$ebnf$1\", lexer.has(\"colon\") ? {\n      type: \"colon\"\n    } : colon, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"quotedValue\") ? {\n      type: \"quotedValue\"\n    } : quotedValue, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"rbrace\") ? {\n      type: \"rbrace\"\n    } : rbrace],\n    \"postprocess\": staticStringToHex\n  }, {\n    \"name\": \"staticBytes$ebnf$1\",\n    \"symbols\": []\n  }, {\n    \"name\": \"staticBytes$ebnf$1\",\n    \"symbols\": [\"staticBytes$ebnf$1\", lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"staticBytes\",\n    \"symbols\": [lexer.has(\"lbrace\") ? {\n      type: \"lbrace\"\n    } : lbrace, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, {\n      \"literal\": \"\\\"bytes\\\"\"\n    }, \"staticBytes$ebnf$1\", lexer.has(\"colon\") ? {\n      type: \"colon\"\n    } : colon, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"quotedValue\") ? {\n      type: \"quotedValue\"\n    } : quotedValue, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"rbrace\") ? {\n      type: \"rbrace\"\n    } : rbrace],\n    \"postprocess\": staticBytesToHex\n  }, {\n    \"name\": \"staticObject\",\n    \"symbols\": [\"staticInt\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"staticObject\",\n    \"symbols\": [\"staticString\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"staticObject\",\n    \"symbols\": [\"staticBytes\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primBare$ebnf$1\",\n    \"symbols\": []\n  }, {\n    \"name\": \"primBare$ebnf$1\",\n    \"symbols\": [\"primBare$ebnf$1\", lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"primBare\",\n    \"symbols\": [lexer.has(\"lbrace\") ? {\n      type: \"lbrace\"\n    } : lbrace, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, {\n      \"literal\": \"\\\"prim\\\"\"\n    }, \"primBare$ebnf$1\", lexer.has(\"colon\") ? {\n      type: \"colon\"\n    } : colon, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"keyword\") ? {\n      type: \"keyword\"\n    } : keyword, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"rbrace\") ? {\n      type: \"rbrace\"\n    } : rbrace],\n    \"postprocess\": primBareToHex\n  }, {\n    \"name\": \"primArg$ebnf$1\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArg$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArg$ebnf$2\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArg$ebnf$2\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArg$ebnf$3$subexpression$1$ebnf$1\",\n    \"symbols\": [lexer.has(\"comma\") ? {\n      type: \"comma\"\n    } : comma],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArg$ebnf$3$subexpression$1$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArg$ebnf$3$subexpression$1$ebnf$2\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArg$ebnf$3$subexpression$1$ebnf$2\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArg$ebnf$3$subexpression$1\",\n    \"symbols\": [\"any\", \"primArg$ebnf$3$subexpression$1$ebnf$1\", \"primArg$ebnf$3$subexpression$1$ebnf$2\"]\n  }, {\n    \"name\": \"primArg$ebnf$3\",\n    \"symbols\": [\"primArg$ebnf$3$subexpression$1\"]\n  }, {\n    \"name\": \"primArg$ebnf$3$subexpression$2$ebnf$1\",\n    \"symbols\": [lexer.has(\"comma\") ? {\n      type: \"comma\"\n    } : comma],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArg$ebnf$3$subexpression$2$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArg$ebnf$3$subexpression$2$ebnf$2\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArg$ebnf$3$subexpression$2$ebnf$2\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArg$ebnf$3$subexpression$2\",\n    \"symbols\": [\"any\", \"primArg$ebnf$3$subexpression$2$ebnf$1\", \"primArg$ebnf$3$subexpression$2$ebnf$2\"]\n  }, {\n    \"name\": \"primArg$ebnf$3\",\n    \"symbols\": [\"primArg$ebnf$3\", \"primArg$ebnf$3$subexpression$2\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"primArg\",\n    \"symbols\": [lexer.has(\"lbrace\") ? {\n      type: \"lbrace\"\n    } : lbrace, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, {\n      \"literal\": \"\\\"prim\\\"\"\n    }, \"primArg$ebnf$1\", lexer.has(\"colon\") ? {\n      type: \"colon\"\n    } : colon, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"keyword\") ? {\n      type: \"keyword\"\n    } : keyword, lexer.has(\"comma\") ? {\n      type: \"comma\"\n    } : comma, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, {\n      \"literal\": \"\\\"args\\\"\"\n    }, \"primArg$ebnf$2\", lexer.has(\"colon\") ? {\n      type: \"colon\"\n    } : colon, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"lbracket\") ? {\n      type: \"lbracket\"\n    } : lbracket, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, \"primArg$ebnf$3\", lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"rbracket\") ? {\n      type: \"rbracket\"\n    } : rbracket, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"rbrace\") ? {\n      type: \"rbrace\"\n    } : rbrace],\n    \"postprocess\": primArgToHex\n  }, {\n    \"name\": \"primAnn$ebnf$1\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primAnn$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primAnn$ebnf$2\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primAnn$ebnf$2\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primAnn$ebnf$3$subexpression$1$ebnf$1\",\n    \"symbols\": [lexer.has(\"comma\") ? {\n      type: \"comma\"\n    } : comma],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primAnn$ebnf$3$subexpression$1$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primAnn$ebnf$3$subexpression$1$ebnf$2\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primAnn$ebnf$3$subexpression$1$ebnf$2\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primAnn$ebnf$3$subexpression$1\",\n    \"symbols\": [lexer.has(\"quotedValue\") ? {\n      type: \"quotedValue\"\n    } : quotedValue, \"primAnn$ebnf$3$subexpression$1$ebnf$1\", \"primAnn$ebnf$3$subexpression$1$ebnf$2\"]\n  }, {\n    \"name\": \"primAnn$ebnf$3\",\n    \"symbols\": [\"primAnn$ebnf$3$subexpression$1\"]\n  }, {\n    \"name\": \"primAnn$ebnf$3$subexpression$2$ebnf$1\",\n    \"symbols\": [lexer.has(\"comma\") ? {\n      type: \"comma\"\n    } : comma],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primAnn$ebnf$3$subexpression$2$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primAnn$ebnf$3$subexpression$2$ebnf$2\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primAnn$ebnf$3$subexpression$2$ebnf$2\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primAnn$ebnf$3$subexpression$2\",\n    \"symbols\": [lexer.has(\"quotedValue\") ? {\n      type: \"quotedValue\"\n    } : quotedValue, \"primAnn$ebnf$3$subexpression$2$ebnf$1\", \"primAnn$ebnf$3$subexpression$2$ebnf$2\"]\n  }, {\n    \"name\": \"primAnn$ebnf$3\",\n    \"symbols\": [\"primAnn$ebnf$3\", \"primAnn$ebnf$3$subexpression$2\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"primAnn\",\n    \"symbols\": [lexer.has(\"lbrace\") ? {\n      type: \"lbrace\"\n    } : lbrace, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, {\n      \"literal\": \"\\\"prim\\\"\"\n    }, \"primAnn$ebnf$1\", lexer.has(\"colon\") ? {\n      type: \"colon\"\n    } : colon, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"keyword\") ? {\n      type: \"keyword\"\n    } : keyword, lexer.has(\"comma\") ? {\n      type: \"comma\"\n    } : comma, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, {\n      \"literal\": \"\\\"annots\\\"\"\n    }, \"primAnn$ebnf$2\", lexer.has(\"colon\") ? {\n      type: \"colon\"\n    } : colon, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"lbracket\") ? {\n      type: \"lbracket\"\n    } : lbracket, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, \"primAnn$ebnf$3\", lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"rbracket\") ? {\n      type: \"rbracket\"\n    } : rbracket, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"rbrace\") ? {\n      type: \"rbrace\"\n    } : rbrace],\n    \"postprocess\": primAnnToHex\n  }, {\n    \"name\": \"primArgAnn$ebnf$1\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArgAnn$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArgAnn$ebnf$2\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArgAnn$ebnf$2\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArgAnn$ebnf$3$subexpression$1$ebnf$1\",\n    \"symbols\": [lexer.has(\"comma\") ? {\n      type: \"comma\"\n    } : comma],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArgAnn$ebnf$3$subexpression$1$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArgAnn$ebnf$3$subexpression$1$ebnf$2\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArgAnn$ebnf$3$subexpression$1$ebnf$2\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArgAnn$ebnf$3$subexpression$1\",\n    \"symbols\": [\"any\", \"primArgAnn$ebnf$3$subexpression$1$ebnf$1\", \"primArgAnn$ebnf$3$subexpression$1$ebnf$2\"]\n  }, {\n    \"name\": \"primArgAnn$ebnf$3\",\n    \"symbols\": [\"primArgAnn$ebnf$3$subexpression$1\"]\n  }, {\n    \"name\": \"primArgAnn$ebnf$3$subexpression$2$ebnf$1\",\n    \"symbols\": [lexer.has(\"comma\") ? {\n      type: \"comma\"\n    } : comma],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArgAnn$ebnf$3$subexpression$2$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArgAnn$ebnf$3$subexpression$2$ebnf$2\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArgAnn$ebnf$3$subexpression$2$ebnf$2\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArgAnn$ebnf$3$subexpression$2\",\n    \"symbols\": [\"any\", \"primArgAnn$ebnf$3$subexpression$2$ebnf$1\", \"primArgAnn$ebnf$3$subexpression$2$ebnf$2\"]\n  }, {\n    \"name\": \"primArgAnn$ebnf$3\",\n    \"symbols\": [\"primArgAnn$ebnf$3\", \"primArgAnn$ebnf$3$subexpression$2\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"primArgAnn$ebnf$4\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArgAnn$ebnf$4\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArgAnn$ebnf$5$subexpression$1$ebnf$1\",\n    \"symbols\": [lexer.has(\"comma\") ? {\n      type: \"comma\"\n    } : comma],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArgAnn$ebnf$5$subexpression$1$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArgAnn$ebnf$5$subexpression$1$ebnf$2\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArgAnn$ebnf$5$subexpression$1$ebnf$2\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArgAnn$ebnf$5$subexpression$1\",\n    \"symbols\": [lexer.has(\"quotedValue\") ? {\n      type: \"quotedValue\"\n    } : quotedValue, \"primArgAnn$ebnf$5$subexpression$1$ebnf$1\", \"primArgAnn$ebnf$5$subexpression$1$ebnf$2\"]\n  }, {\n    \"name\": \"primArgAnn$ebnf$5\",\n    \"symbols\": [\"primArgAnn$ebnf$5$subexpression$1\"]\n  }, {\n    \"name\": \"primArgAnn$ebnf$5$subexpression$2$ebnf$1\",\n    \"symbols\": [lexer.has(\"comma\") ? {\n      type: \"comma\"\n    } : comma],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArgAnn$ebnf$5$subexpression$2$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArgAnn$ebnf$5$subexpression$2$ebnf$2\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primArgAnn$ebnf$5$subexpression$2$ebnf$2\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"primArgAnn$ebnf$5$subexpression$2\",\n    \"symbols\": [lexer.has(\"quotedValue\") ? {\n      type: \"quotedValue\"\n    } : quotedValue, \"primArgAnn$ebnf$5$subexpression$2$ebnf$1\", \"primArgAnn$ebnf$5$subexpression$2$ebnf$2\"]\n  }, {\n    \"name\": \"primArgAnn$ebnf$5\",\n    \"symbols\": [\"primArgAnn$ebnf$5\", \"primArgAnn$ebnf$5$subexpression$2\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"primArgAnn\",\n    \"symbols\": [lexer.has(\"lbrace\") ? {\n      type: \"lbrace\"\n    } : lbrace, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, {\n      \"literal\": \"\\\"prim\\\"\"\n    }, \"primArgAnn$ebnf$1\", lexer.has(\"colon\") ? {\n      type: \"colon\"\n    } : colon, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"keyword\") ? {\n      type: \"keyword\"\n    } : keyword, lexer.has(\"comma\") ? {\n      type: \"comma\"\n    } : comma, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, {\n      \"literal\": \"\\\"args\\\"\"\n    }, \"primArgAnn$ebnf$2\", lexer.has(\"colon\") ? {\n      type: \"colon\"\n    } : colon, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"lbracket\") ? {\n      type: \"lbracket\"\n    } : lbracket, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, \"primArgAnn$ebnf$3\", lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"rbracket\") ? {\n      type: \"rbracket\"\n    } : rbracket, lexer.has(\"comma\") ? {\n      type: \"comma\"\n    } : comma, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, {\n      \"literal\": \"\\\"annots\\\"\"\n    }, \"primArgAnn$ebnf$4\", lexer.has(\"colon\") ? {\n      type: \"colon\"\n    } : colon, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"lbracket\") ? {\n      type: \"lbracket\"\n    } : lbracket, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, \"primArgAnn$ebnf$5\", lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"rbracket\") ? {\n      type: \"rbracket\"\n    } : rbracket, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"rbrace\") ? {\n      type: \"rbrace\"\n    } : rbrace],\n    \"postprocess\": primArgAnnToHex\n  }, {\n    \"name\": \"primAny\",\n    \"symbols\": [\"primBare\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primAny\",\n    \"symbols\": [\"primArg\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primAny\",\n    \"symbols\": [\"primAnn\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"primAny\",\n    \"symbols\": [\"primArgAnn\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"any\",\n    \"symbols\": [\"primAny\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"any\",\n    \"symbols\": [\"staticObject\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"any\",\n    \"symbols\": [\"anyArray\"],\n    \"postprocess\": id\n  }, {\n    \"name\": \"anyArray\",\n    \"symbols\": [lexer.has(\"lbracket\") ? {\n      type: \"lbracket\"\n    } : lbracket, lexer.has(\"rbracket\") ? {\n      type: \"rbracket\"\n    } : rbracket],\n    \"postprocess\": function (d) {\n      return '0200000000';\n    }\n  }, {\n    \"name\": \"anyArray$ebnf$1$subexpression$1$ebnf$1\",\n    \"symbols\": [lexer.has(\"comma\") ? {\n      type: \"comma\"\n    } : comma],\n    \"postprocess\": id\n  }, {\n    \"name\": \"anyArray$ebnf$1$subexpression$1$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"anyArray$ebnf$1$subexpression$1$ebnf$2\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"anyArray$ebnf$1$subexpression$1$ebnf$2\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"anyArray$ebnf$1$subexpression$1\",\n    \"symbols\": [\"any\", \"anyArray$ebnf$1$subexpression$1$ebnf$1\", \"anyArray$ebnf$1$subexpression$1$ebnf$2\"]\n  }, {\n    \"name\": \"anyArray$ebnf$1\",\n    \"symbols\": [\"anyArray$ebnf$1$subexpression$1\"]\n  }, {\n    \"name\": \"anyArray$ebnf$1$subexpression$2$ebnf$1\",\n    \"symbols\": [lexer.has(\"comma\") ? {\n      type: \"comma\"\n    } : comma],\n    \"postprocess\": id\n  }, {\n    \"name\": \"anyArray$ebnf$1$subexpression$2$ebnf$1\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"anyArray$ebnf$1$subexpression$2$ebnf$2\",\n    \"symbols\": [lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _],\n    \"postprocess\": id\n  }, {\n    \"name\": \"anyArray$ebnf$1$subexpression$2$ebnf$2\",\n    \"symbols\": [],\n    \"postprocess\": () => null\n  }, {\n    \"name\": \"anyArray$ebnf$1$subexpression$2\",\n    \"symbols\": [\"any\", \"anyArray$ebnf$1$subexpression$2$ebnf$1\", \"anyArray$ebnf$1$subexpression$2$ebnf$2\"]\n  }, {\n    \"name\": \"anyArray$ebnf$1\",\n    \"symbols\": [\"anyArray$ebnf$1\", \"anyArray$ebnf$1$subexpression$2\"],\n    \"postprocess\": d => d[0].concat([d[1]])\n  }, {\n    \"name\": \"anyArray\",\n    \"symbols\": [lexer.has(\"lbracket\") ? {\n      type: \"lbracket\"\n    } : lbracket, lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, \"anyArray$ebnf$1\", lexer.has(\"_\") ? {\n      type: \"_\"\n    } : _, lexer.has(\"rbracket\") ? {\n      type: \"rbracket\"\n    } : rbracket],\n    \"postprocess\": staticArrayToHex\n  }],\n  ParserStart: \"main\"\n};\nexports.default = grammar;","map":{"version":3,"sources":["../../../../src/chain/tezos/lexer/Micheline.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction id(d) { return d[0]; }\nconst moo = require(\"moo\");\nconst bigInt = require(\"big-integer\");\nconst MichelineKeywords = ['\"parameter\"', '\"storage\"', '\"code\"', '\"False\"', '\"Elt\"', '\"Left\"', '\"None\"', '\"Pair\"', '\"Right\"', '\"Some\"', '\"True\"', '\"Unit\"', '\"PACK\"', '\"UNPACK\"', '\"BLAKE2B\"', '\"SHA256\"', '\"SHA512\"', '\"ABS\"', '\"ADD\"', '\"AMOUNT\"', '\"AND\"', '\"BALANCE\"', '\"CAR\"', '\"CDR\"', '\"CHECK_SIGNATURE\"', '\"COMPARE\"', '\"CONCAT\"', '\"CONS\"', '\"CREATE_ACCOUNT\"', '\"CREATE_CONTRACT\"', '\"IMPLICIT_ACCOUNT\"', '\"DIP\"', '\"DROP\"', '\"DUP\"', '\"EDIV\"', '\"EMPTY_MAP\"', '\"EMPTY_SET\"', '\"EQ\"', '\"EXEC\"', '\"FAILWITH\"', '\"GE\"', '\"GET\"', '\"GT\"', '\"HASH_KEY\"', '\"IF\"', '\"IF_CONS\"', '\"IF_LEFT\"', '\"IF_NONE\"', '\"INT\"', '\"LAMBDA\"', '\"LE\"', '\"LEFT\"', '\"LOOP\"', '\"LSL\"', '\"LSR\"', '\"LT\"', '\"MAP\"', '\"MEM\"', '\"MUL\"', '\"NEG\"', '\"NEQ\"', '\"NIL\"', '\"NONE\"', '\"NOT\"', '\"NOW\"', '\"OR\"', '\"PAIR\"', '\"PUSH\"', '\"RIGHT\"', '\"SIZE\"', '\"SOME\"', '\"SOURCE\"', '\"SENDER\"', '\"SELF\"', '\"STEPS_TO_QUOTA\"', '\"SUB\"', '\"SWAP\"', '\"TRANSFER_TOKENS\"', '\"SET_DELEGATE\"', '\"UNIT\"', '\"UPDATE\"', '\"XOR\"', '\"ITER\"', '\"LOOP_LEFT\"', '\"ADDRESS\"', '\"CONTRACT\"', '\"ISNAT\"', '\"CAST\"', '\"RENAME\"', '\"bool\"', '\"contract\"', '\"int\"', '\"key\"', '\"key_hash\"', '\"lambda\"', '\"list\"', '\"map\"', '\"big_map\"', '\"nat\"', '\"option\"', '\"or\"', '\"pair\"', '\"set\"', '\"signature\"', '\"string\"', '\"bytes\"', '\"mutez\"', '\"timestamp\"', '\"unit\"', '\"operation\"', '\"address\"', '\"SLICE\"', '\"DIG\"', '\"DUG\"', '\"EMPTY_BIG_MAP\"', '\"APPLY\"', '\"chain_id\"', '\"CHAIN_ID\"'];\nconst lexer = moo.compile({\n    keyword: MichelineKeywords,\n    lbrace: '{',\n    rbrace: '}',\n    lbracket: '[',\n    rbracket: ']',\n    colon: \":\",\n    comma: \",\",\n    _: /[ \\t]+/,\n    quotedValue: /\\\"[\\S\\s]*?\\\"/\n});\nconst staticIntToHex = d => {\n    const prefix = '00';\n    const text = d[6].toString();\n    const value = writeSignedInt(parseInt(text.substring(1, text.length - 1)));\n    return prefix + value;\n};\nconst staticStringToHex = d => {\n    const prefix = '01';\n    let text = d[6].toString();\n    text = text.substring(1, text.length - 1);\n    const len = encodeLength(text.length);\n    text = text.split('').map(c => c.charCodeAt(0).toString(16)).join('');\n    return prefix + len + text;\n};\nconst staticBytesToHex = d => {\n    const prefix = '0a';\n    let bytes = d[6].toString();\n    bytes = bytes.substring(1, bytes.length - 1);\n    const len = encodeLength(bytes.length / 2);\n    return prefix + len + bytes;\n};\nconst staticArrayToHex = d => {\n    const matchedArray = d[2];\n    const prefix = '02';\n    const content = matchedArray.map(a => a[0]).join('');\n    const len = encodeLength(content.length / 2);\n    return prefix + len + content;\n};\nconst primBareToHex = d => {\n    const prefix = '03';\n    const prim = encodePrimitive(d[6].toString());\n    return prefix + prim;\n};\nconst primAnnToHex = d => {\n    const prefix = '04';\n    const prim = encodePrimitive(d[6].toString());\n    let ann = d[15].map(v => {\n        let t = v[0].toString();\n        t = t.substring(1, t.length - 1);\n        return t;\n    }).join(' ');\n    ann = ann.split('').map(c => c.charCodeAt(0).toString(16)).join('');\n    ann = encodeLength(ann.length / 2) + ann;\n    return prefix + prim + ann;\n};\nconst primArgToHex = d => {\n    let prefix = '05';\n    if (d[15].length == 2) {\n        prefix = '07';\n    }\n    else if (d[15].length > 2) {\n        prefix = '09';\n    }\n    const prim = encodePrimitive(d[6].toString());\n    let args = d[15].map(v => v[0]).join('');\n    if (prefix === '09') {\n        args = ('0000000' + (args.length / 2).toString(16)).slice(-8) + args;\n        args += '00000000';\n    }\n    return prefix + prim + args;\n};\nconst primArgAnnToHex = d => {\n    let prefix = '06';\n    if (d[15].length == 2) {\n        prefix = '08';\n    }\n    else if (d[15].length > 2) {\n        prefix = '09';\n    }\n    const prim = encodePrimitive(d[6].toString());\n    let args = d[15].map(v => v[0]).join('');\n    let ann = d[26].map(v => {\n        let t = v[0].toString();\n        t = t.substring(1, t.length - 1);\n        return t;\n    }).join(' ');\n    ann = ann.split('').map(c => c.charCodeAt(0).toString(16)).join('');\n    ann = encodeLength(ann.length / 2) + ann;\n    if (prefix === '09') {\n        args = ('0000000' + (args.length / 2).toString(16)).slice(-8) + args;\n    }\n    return prefix + prim + args + ann;\n};\nconst encodePrimitive = p => {\n    return ('00' + MichelineKeywords.indexOf(p).toString(16)).slice(-2);\n};\nconst encodeLength = l => {\n    return ('0000000' + l.toString(16)).slice(-8);\n};\nconst writeSignedInt = value => {\n    if (value === 0) {\n        return '00';\n    }\n    const n = bigInt(value).abs();\n    const l = n.bitLength().toJSNumber();\n    let arr = [];\n    let v = n;\n    for (let i = 0; i < l; i += 7) {\n        let byte = bigInt.zero;\n        if (i === 0) {\n            byte = v.and(0x3f);\n            v = v.shiftRight(6);\n        }\n        else {\n            byte = v.and(0x7f);\n            v = v.shiftRight(7);\n        }\n        if (value < 0 && i === 0) {\n            byte = byte.or(0x40);\n        }\n        if (i + 7 < l) {\n            byte = byte.or(0x80);\n        }\n        arr.push(byte.toJSNumber());\n    }\n    if (l % 7 === 0) {\n        arr[arr.length - 1] = arr[arr.length - 1] | 0x80;\n        arr.push(1);\n    }\n    return arr.map(v => ('0' + v.toString(16)).slice(-2)).join('');\n};\n;\n;\n;\n;\nconst grammar = {\n    Lexer: lexer,\n    ParserRules: [\n        { \"name\": \"main\", \"symbols\": [\"staticObject\"], \"postprocess\": id },\n        { \"name\": \"main\", \"symbols\": [\"primBare\"], \"postprocess\": id },\n        { \"name\": \"main\", \"symbols\": [\"primArg\"], \"postprocess\": id },\n        { \"name\": \"main\", \"symbols\": [\"primAnn\"], \"postprocess\": id },\n        { \"name\": \"main\", \"symbols\": [\"primArgAnn\"], \"postprocess\": id },\n        { \"name\": \"main\", \"symbols\": [\"anyArray\"], \"postprocess\": id },\n        { \"name\": \"staticInt$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"staticInt$ebnf$1\", \"symbols\": [\"staticInt$ebnf$1\", (lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"staticInt\", \"symbols\": [(lexer.has(\"lbrace\") ? { type: \"lbrace\" } : lbrace), (lexer.has(\"_\") ? { type: \"_\" } : _), { \"literal\": \"\\\"int\\\"\" }, \"staticInt$ebnf$1\", (lexer.has(\"colon\") ? { type: \"colon\" } : colon), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"quotedValue\") ? { type: \"quotedValue\" } : quotedValue), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"rbrace\") ? { type: \"rbrace\" } : rbrace)], \"postprocess\": staticIntToHex },\n        { \"name\": \"staticString$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"staticString$ebnf$1\", \"symbols\": [\"staticString$ebnf$1\", (lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"staticString\", \"symbols\": [(lexer.has(\"lbrace\") ? { type: \"lbrace\" } : lbrace), (lexer.has(\"_\") ? { type: \"_\" } : _), { \"literal\": \"\\\"string\\\"\" }, \"staticString$ebnf$1\", (lexer.has(\"colon\") ? { type: \"colon\" } : colon), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"quotedValue\") ? { type: \"quotedValue\" } : quotedValue), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"rbrace\") ? { type: \"rbrace\" } : rbrace)], \"postprocess\": staticStringToHex },\n        { \"name\": \"staticBytes$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"staticBytes$ebnf$1\", \"symbols\": [\"staticBytes$ebnf$1\", (lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"staticBytes\", \"symbols\": [(lexer.has(\"lbrace\") ? { type: \"lbrace\" } : lbrace), (lexer.has(\"_\") ? { type: \"_\" } : _), { \"literal\": \"\\\"bytes\\\"\" }, \"staticBytes$ebnf$1\", (lexer.has(\"colon\") ? { type: \"colon\" } : colon), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"quotedValue\") ? { type: \"quotedValue\" } : quotedValue), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"rbrace\") ? { type: \"rbrace\" } : rbrace)], \"postprocess\": staticBytesToHex },\n        { \"name\": \"staticObject\", \"symbols\": [\"staticInt\"], \"postprocess\": id },\n        { \"name\": \"staticObject\", \"symbols\": [\"staticString\"], \"postprocess\": id },\n        { \"name\": \"staticObject\", \"symbols\": [\"staticBytes\"], \"postprocess\": id },\n        { \"name\": \"primBare$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"primBare$ebnf$1\", \"symbols\": [\"primBare$ebnf$1\", (lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"primBare\", \"symbols\": [(lexer.has(\"lbrace\") ? { type: \"lbrace\" } : lbrace), (lexer.has(\"_\") ? { type: \"_\" } : _), { \"literal\": \"\\\"prim\\\"\" }, \"primBare$ebnf$1\", (lexer.has(\"colon\") ? { type: \"colon\" } : colon), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"keyword\") ? { type: \"keyword\" } : keyword), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"rbrace\") ? { type: \"rbrace\" } : rbrace)], \"postprocess\": primBareToHex },\n        { \"name\": \"primArg$ebnf$1\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primArg$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArg$ebnf$2\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primArg$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArg$ebnf$3$subexpression$1$ebnf$1\", \"symbols\": [(lexer.has(\"comma\") ? { type: \"comma\" } : comma)], \"postprocess\": id },\n        { \"name\": \"primArg$ebnf$3$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArg$ebnf$3$subexpression$1$ebnf$2\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primArg$ebnf$3$subexpression$1$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArg$ebnf$3$subexpression$1\", \"symbols\": [\"any\", \"primArg$ebnf$3$subexpression$1$ebnf$1\", \"primArg$ebnf$3$subexpression$1$ebnf$2\"] },\n        { \"name\": \"primArg$ebnf$3\", \"symbols\": [\"primArg$ebnf$3$subexpression$1\"] },\n        { \"name\": \"primArg$ebnf$3$subexpression$2$ebnf$1\", \"symbols\": [(lexer.has(\"comma\") ? { type: \"comma\" } : comma)], \"postprocess\": id },\n        { \"name\": \"primArg$ebnf$3$subexpression$2$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArg$ebnf$3$subexpression$2$ebnf$2\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primArg$ebnf$3$subexpression$2$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArg$ebnf$3$subexpression$2\", \"symbols\": [\"any\", \"primArg$ebnf$3$subexpression$2$ebnf$1\", \"primArg$ebnf$3$subexpression$2$ebnf$2\"] },\n        { \"name\": \"primArg$ebnf$3\", \"symbols\": [\"primArg$ebnf$3\", \"primArg$ebnf$3$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"primArg\", \"symbols\": [(lexer.has(\"lbrace\") ? { type: \"lbrace\" } : lbrace), (lexer.has(\"_\") ? { type: \"_\" } : _), { \"literal\": \"\\\"prim\\\"\" }, \"primArg$ebnf$1\", (lexer.has(\"colon\") ? { type: \"colon\" } : colon), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"keyword\") ? { type: \"keyword\" } : keyword), (lexer.has(\"comma\") ? { type: \"comma\" } : comma), (lexer.has(\"_\") ? { type: \"_\" } : _), { \"literal\": \"\\\"args\\\"\" }, \"primArg$ebnf$2\", (lexer.has(\"colon\") ? { type: \"colon\" } : colon), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"lbracket\") ? { type: \"lbracket\" } : lbracket), (lexer.has(\"_\") ? { type: \"_\" } : _), \"primArg$ebnf$3\", (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"rbracket\") ? { type: \"rbracket\" } : rbracket), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"rbrace\") ? { type: \"rbrace\" } : rbrace)], \"postprocess\": primArgToHex },\n        { \"name\": \"primAnn$ebnf$1\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primAnn$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primAnn$ebnf$2\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primAnn$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primAnn$ebnf$3$subexpression$1$ebnf$1\", \"symbols\": [(lexer.has(\"comma\") ? { type: \"comma\" } : comma)], \"postprocess\": id },\n        { \"name\": \"primAnn$ebnf$3$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primAnn$ebnf$3$subexpression$1$ebnf$2\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primAnn$ebnf$3$subexpression$1$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primAnn$ebnf$3$subexpression$1\", \"symbols\": [(lexer.has(\"quotedValue\") ? { type: \"quotedValue\" } : quotedValue), \"primAnn$ebnf$3$subexpression$1$ebnf$1\", \"primAnn$ebnf$3$subexpression$1$ebnf$2\"] },\n        { \"name\": \"primAnn$ebnf$3\", \"symbols\": [\"primAnn$ebnf$3$subexpression$1\"] },\n        { \"name\": \"primAnn$ebnf$3$subexpression$2$ebnf$1\", \"symbols\": [(lexer.has(\"comma\") ? { type: \"comma\" } : comma)], \"postprocess\": id },\n        { \"name\": \"primAnn$ebnf$3$subexpression$2$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primAnn$ebnf$3$subexpression$2$ebnf$2\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primAnn$ebnf$3$subexpression$2$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primAnn$ebnf$3$subexpression$2\", \"symbols\": [(lexer.has(\"quotedValue\") ? { type: \"quotedValue\" } : quotedValue), \"primAnn$ebnf$3$subexpression$2$ebnf$1\", \"primAnn$ebnf$3$subexpression$2$ebnf$2\"] },\n        { \"name\": \"primAnn$ebnf$3\", \"symbols\": [\"primAnn$ebnf$3\", \"primAnn$ebnf$3$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"primAnn\", \"symbols\": [(lexer.has(\"lbrace\") ? { type: \"lbrace\" } : lbrace), (lexer.has(\"_\") ? { type: \"_\" } : _), { \"literal\": \"\\\"prim\\\"\" }, \"primAnn$ebnf$1\", (lexer.has(\"colon\") ? { type: \"colon\" } : colon), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"keyword\") ? { type: \"keyword\" } : keyword), (lexer.has(\"comma\") ? { type: \"comma\" } : comma), (lexer.has(\"_\") ? { type: \"_\" } : _), { \"literal\": \"\\\"annots\\\"\" }, \"primAnn$ebnf$2\", (lexer.has(\"colon\") ? { type: \"colon\" } : colon), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"lbracket\") ? { type: \"lbracket\" } : lbracket), (lexer.has(\"_\") ? { type: \"_\" } : _), \"primAnn$ebnf$3\", (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"rbracket\") ? { type: \"rbracket\" } : rbracket), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"rbrace\") ? { type: \"rbrace\" } : rbrace)], \"postprocess\": primAnnToHex },\n        { \"name\": \"primArgAnn$ebnf$1\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primArgAnn$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArgAnn$ebnf$2\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primArgAnn$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArgAnn$ebnf$3$subexpression$1$ebnf$1\", \"symbols\": [(lexer.has(\"comma\") ? { type: \"comma\" } : comma)], \"postprocess\": id },\n        { \"name\": \"primArgAnn$ebnf$3$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArgAnn$ebnf$3$subexpression$1$ebnf$2\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primArgAnn$ebnf$3$subexpression$1$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArgAnn$ebnf$3$subexpression$1\", \"symbols\": [\"any\", \"primArgAnn$ebnf$3$subexpression$1$ebnf$1\", \"primArgAnn$ebnf$3$subexpression$1$ebnf$2\"] },\n        { \"name\": \"primArgAnn$ebnf$3\", \"symbols\": [\"primArgAnn$ebnf$3$subexpression$1\"] },\n        { \"name\": \"primArgAnn$ebnf$3$subexpression$2$ebnf$1\", \"symbols\": [(lexer.has(\"comma\") ? { type: \"comma\" } : comma)], \"postprocess\": id },\n        { \"name\": \"primArgAnn$ebnf$3$subexpression$2$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArgAnn$ebnf$3$subexpression$2$ebnf$2\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primArgAnn$ebnf$3$subexpression$2$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArgAnn$ebnf$3$subexpression$2\", \"symbols\": [\"any\", \"primArgAnn$ebnf$3$subexpression$2$ebnf$1\", \"primArgAnn$ebnf$3$subexpression$2$ebnf$2\"] },\n        { \"name\": \"primArgAnn$ebnf$3\", \"symbols\": [\"primArgAnn$ebnf$3\", \"primArgAnn$ebnf$3$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"primArgAnn$ebnf$4\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primArgAnn$ebnf$4\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArgAnn$ebnf$5$subexpression$1$ebnf$1\", \"symbols\": [(lexer.has(\"comma\") ? { type: \"comma\" } : comma)], \"postprocess\": id },\n        { \"name\": \"primArgAnn$ebnf$5$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArgAnn$ebnf$5$subexpression$1$ebnf$2\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primArgAnn$ebnf$5$subexpression$1$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArgAnn$ebnf$5$subexpression$1\", \"symbols\": [(lexer.has(\"quotedValue\") ? { type: \"quotedValue\" } : quotedValue), \"primArgAnn$ebnf$5$subexpression$1$ebnf$1\", \"primArgAnn$ebnf$5$subexpression$1$ebnf$2\"] },\n        { \"name\": \"primArgAnn$ebnf$5\", \"symbols\": [\"primArgAnn$ebnf$5$subexpression$1\"] },\n        { \"name\": \"primArgAnn$ebnf$5$subexpression$2$ebnf$1\", \"symbols\": [(lexer.has(\"comma\") ? { type: \"comma\" } : comma)], \"postprocess\": id },\n        { \"name\": \"primArgAnn$ebnf$5$subexpression$2$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArgAnn$ebnf$5$subexpression$2$ebnf$2\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"primArgAnn$ebnf$5$subexpression$2$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"primArgAnn$ebnf$5$subexpression$2\", \"symbols\": [(lexer.has(\"quotedValue\") ? { type: \"quotedValue\" } : quotedValue), \"primArgAnn$ebnf$5$subexpression$2$ebnf$1\", \"primArgAnn$ebnf$5$subexpression$2$ebnf$2\"] },\n        { \"name\": \"primArgAnn$ebnf$5\", \"symbols\": [\"primArgAnn$ebnf$5\", \"primArgAnn$ebnf$5$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"primArgAnn\", \"symbols\": [(lexer.has(\"lbrace\") ? { type: \"lbrace\" } : lbrace), (lexer.has(\"_\") ? { type: \"_\" } : _), { \"literal\": \"\\\"prim\\\"\" }, \"primArgAnn$ebnf$1\", (lexer.has(\"colon\") ? { type: \"colon\" } : colon), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"keyword\") ? { type: \"keyword\" } : keyword), (lexer.has(\"comma\") ? { type: \"comma\" } : comma), (lexer.has(\"_\") ? { type: \"_\" } : _), { \"literal\": \"\\\"args\\\"\" }, \"primArgAnn$ebnf$2\", (lexer.has(\"colon\") ? { type: \"colon\" } : colon), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"lbracket\") ? { type: \"lbracket\" } : lbracket), (lexer.has(\"_\") ? { type: \"_\" } : _), \"primArgAnn$ebnf$3\", (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"rbracket\") ? { type: \"rbracket\" } : rbracket), (lexer.has(\"comma\") ? { type: \"comma\" } : comma), (lexer.has(\"_\") ? { type: \"_\" } : _), { \"literal\": \"\\\"annots\\\"\" }, \"primArgAnn$ebnf$4\", (lexer.has(\"colon\") ? { type: \"colon\" } : colon), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"lbracket\") ? { type: \"lbracket\" } : lbracket), (lexer.has(\"_\") ? { type: \"_\" } : _), \"primArgAnn$ebnf$5\", (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"rbracket\") ? { type: \"rbracket\" } : rbracket), (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"rbrace\") ? { type: \"rbrace\" } : rbrace)], \"postprocess\": primArgAnnToHex },\n        { \"name\": \"primAny\", \"symbols\": [\"primBare\"], \"postprocess\": id },\n        { \"name\": \"primAny\", \"symbols\": [\"primArg\"], \"postprocess\": id },\n        { \"name\": \"primAny\", \"symbols\": [\"primAnn\"], \"postprocess\": id },\n        { \"name\": \"primAny\", \"symbols\": [\"primArgAnn\"], \"postprocess\": id },\n        { \"name\": \"any\", \"symbols\": [\"primAny\"], \"postprocess\": id },\n        { \"name\": \"any\", \"symbols\": [\"staticObject\"], \"postprocess\": id },\n        { \"name\": \"any\", \"symbols\": [\"anyArray\"], \"postprocess\": id },\n        { \"name\": \"anyArray\", \"symbols\": [(lexer.has(\"lbracket\") ? { type: \"lbracket\" } : lbracket), (lexer.has(\"rbracket\") ? { type: \"rbracket\" } : rbracket)], \"postprocess\": function (d) { return '0200000000'; } },\n        { \"name\": \"anyArray$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [(lexer.has(\"comma\") ? { type: \"comma\" } : comma)], \"postprocess\": id },\n        { \"name\": \"anyArray$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"anyArray$ebnf$1$subexpression$1$ebnf$2\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"anyArray$ebnf$1$subexpression$1$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"anyArray$ebnf$1$subexpression$1\", \"symbols\": [\"any\", \"anyArray$ebnf$1$subexpression$1$ebnf$1\", \"anyArray$ebnf$1$subexpression$1$ebnf$2\"] },\n        { \"name\": \"anyArray$ebnf$1\", \"symbols\": [\"anyArray$ebnf$1$subexpression$1\"] },\n        { \"name\": \"anyArray$ebnf$1$subexpression$2$ebnf$1\", \"symbols\": [(lexer.has(\"comma\") ? { type: \"comma\" } : comma)], \"postprocess\": id },\n        { \"name\": \"anyArray$ebnf$1$subexpression$2$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"anyArray$ebnf$1$subexpression$2$ebnf$2\", \"symbols\": [(lexer.has(\"_\") ? { type: \"_\" } : _)], \"postprocess\": id },\n        { \"name\": \"anyArray$ebnf$1$subexpression$2$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"anyArray$ebnf$1$subexpression$2\", \"symbols\": [\"any\", \"anyArray$ebnf$1$subexpression$2$ebnf$1\", \"anyArray$ebnf$1$subexpression$2$ebnf$2\"] },\n        { \"name\": \"anyArray$ebnf$1\", \"symbols\": [\"anyArray$ebnf$1\", \"anyArray$ebnf$1$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"anyArray\", \"symbols\": [(lexer.has(\"lbracket\") ? { type: \"lbracket\" } : lbracket), (lexer.has(\"_\") ? { type: \"_\" } : _), \"anyArray$ebnf$1\", (lexer.has(\"_\") ? { type: \"_\" } : _), (lexer.has(\"rbracket\") ? { type: \"rbracket\" } : rbracket)], \"postprocess\": staticArrayToHex }\n    ],\n    ParserStart: \"main\",\n};\nexports.default = grammar;\n//# sourceMappingURL=Micheline.js.map"]},"metadata":{},"sourceType":"script"}