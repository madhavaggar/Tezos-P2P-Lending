{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst blakejs = __importStar(require(\"blakejs\"));\n\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\n\nconst TezosLanguageUtil_1 = require(\"../TezosLanguageUtil\");\n\nconst TezosMessageUtil_1 = require(\"../TezosMessageUtil\");\n\nconst TezosNodeReader_1 = require(\"../TezosNodeReader\");\n\nconst TezosNodeWriter_1 = require(\"../TezosNodeWriter\");\n\nconst TezosTypes = __importStar(require(\"../../../types/tezos/TezosChainTypes\"));\n\nvar TzbtcTokenHelper;\n\n(function (TzbtcTokenHelper) {\n  function verifyDestination(server, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const contract = yield TezosNodeReader_1.TezosNodeReader.getAccountForBlock(server, 'head', address);\n\n      if (!!!contract.script) {\n        throw new Error(`No code found at ${address}`);\n      }\n\n      const k = Buffer.from(blakejs.blake2s(JSON.stringify(contract.script.code), null, 16)).toString('hex');\n\n      if (k !== '187c967006ca95a648c770fdd76947ef') {\n        throw new Error(`Contract does not match the expected code hash: ${k}, '187c967006ca95a648c770fdd76947ef'`);\n      }\n\n      return true;\n    });\n  }\n\n  TzbtcTokenHelper.verifyDestination = verifyDestination;\n\n  function verifyScript(script) {\n    const k = Buffer.from(blakejs.blake2s(TezosLanguageUtil_1.TezosLanguageUtil.preProcessMichelsonScript(script).join('\\n'), null, 16)).toString('hex');\n\n    if (k !== 'ffcad1e376a6c8915780fe6676aceec6') {\n      throw new Error(`Contract does not match the expected code hash: ${k}, 'ffcad1e376a6c8915780fe6676aceec6'`);\n    }\n\n    return true;\n  }\n\n  TzbtcTokenHelper.verifyScript = verifyScript;\n\n  function getAccountBalance(server, mapid, account) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const value = yield queryMap(server, mapid, `(Pair \"ledger\" 0x${TezosMessageUtil_1.TezosMessageUtils.writeAddress(account)})`);\n      return Number(jsonpath_plus_1.JSONPath({\n        path: '$.args[0].int',\n        json: value\n      })[0]);\n    });\n  }\n\n  TzbtcTokenHelper.getAccountBalance = getAccountBalance;\n\n  function getOperatorList(server, mapid) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const value = yield queryMap(server, mapid, '\"operators\"');\n      let addresses = [];\n\n      for (const a of value) {\n        addresses.push(TezosMessageUtil_1.TezosMessageUtils.readAddress(a.bytes));\n      }\n\n      return addresses;\n    });\n  }\n\n  TzbtcTokenHelper.getOperatorList = getOperatorList;\n\n  function getTokenMetadata(server, mapid) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield queryMap(server, mapid, '\"tokenMetadata\"');\n    });\n  }\n\n  TzbtcTokenHelper.getTokenMetadata = getTokenMetadata;\n\n  function getSimpleStorage(server, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);\n      return {\n        mapid: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].int',\n          json: storageResult\n        })[0]),\n        scale: 8\n      };\n    });\n  }\n\n  TzbtcTokenHelper.getSimpleStorage = getSimpleStorage;\n\n  function transferBalance(server, keystore, contract, fee, source, destination, amount, gas = 250000, freight = 1000) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parameters = `(Pair \"${source}\" (Pair \"${destination}\" ${amount}))`;\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, 0, fee, keystore.derivationPath, freight, gas, 'transfer', parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  TzbtcTokenHelper.transferBalance = transferBalance;\n\n  function approveBalance(server, keystore, contract, fee, destination, amount, gas = 250000, freight = 1000) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parameters = `(Right (Right (Right (Right (Left (Right (Right (Right (Pair \"${destination}\" ${amount})))))))))`;\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, 0, fee, keystore.derivationPath, freight, gas, '', parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  TzbtcTokenHelper.approveBalance = approveBalance;\n\n  function mintBalance(server, keystore, contract, fee, destination, amount, gas = 250000, freight = 1000) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parameters = `(Right (Right (Right (Right (Right (Left (Left (Left (Pair \"${destination}\" ${amount})))))))))`;\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, 0, fee, keystore.derivationPath, freight, gas, '', parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  TzbtcTokenHelper.mintBalance = mintBalance;\n\n  function addOperator(server, keystore, contract, fee, operator, gas = 250000, freight = 1000) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parameters = `(Right (Right (Right (Right (Right (Left (Right (Left \"${operator}\" ))))))))`;\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, 0, fee, keystore.derivationPath, freight, gas, '', parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  TzbtcTokenHelper.addOperator = addOperator;\n\n  function queryMap(server, mapid, query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const key = Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(query, '', TezosTypes.TezosParameterFormat.Michelson), 'hex');\n      const packedKey = TezosMessageUtil_1.TezosMessageUtils.writePackedData(key, 'bytes');\n      const encodedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(packedKey, 'hex'));\n      const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, encodedKey);\n\n      if (mapResult === undefined) {\n        throw new Error(`Could not get data from map ${mapid} for '${query}'`);\n      }\n\n      const bytes = jsonpath_plus_1.JSONPath({\n        path: '$.bytes',\n        json: mapResult\n      })[0];\n      return JSON.parse(TezosLanguageUtil_1.TezosLanguageUtil.hexToMicheline(bytes.slice(2)).code);\n    });\n  }\n\n  function clearRPCOperationGroupHash(hash) {\n    return hash.replace(/\\\"/g, '').replace(/\\n/, '');\n  }\n})(TzbtcTokenHelper = exports.TzbtcTokenHelper || (exports.TzbtcTokenHelper = {}));","map":{"version":3,"sources":["../../../../src/chain/tezos/contracts/TzbtcTokenHelper.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst blakejs = __importStar(require(\"blakejs\"));\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\nconst TezosLanguageUtil_1 = require(\"../TezosLanguageUtil\");\nconst TezosMessageUtil_1 = require(\"../TezosMessageUtil\");\nconst TezosNodeReader_1 = require(\"../TezosNodeReader\");\nconst TezosNodeWriter_1 = require(\"../TezosNodeWriter\");\nconst TezosTypes = __importStar(require(\"../../../types/tezos/TezosChainTypes\"));\nvar TzbtcTokenHelper;\n(function (TzbtcTokenHelper) {\n    function verifyDestination(server, address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const contract = yield TezosNodeReader_1.TezosNodeReader.getAccountForBlock(server, 'head', address);\n            if (!!!contract.script) {\n                throw new Error(`No code found at ${address}`);\n            }\n            const k = Buffer.from(blakejs.blake2s(JSON.stringify(contract.script.code), null, 16)).toString('hex');\n            if (k !== '187c967006ca95a648c770fdd76947ef') {\n                throw new Error(`Contract does not match the expected code hash: ${k}, '187c967006ca95a648c770fdd76947ef'`);\n            }\n            return true;\n        });\n    }\n    TzbtcTokenHelper.verifyDestination = verifyDestination;\n    function verifyScript(script) {\n        const k = Buffer.from(blakejs.blake2s(TezosLanguageUtil_1.TezosLanguageUtil.preProcessMichelsonScript(script).join('\\n'), null, 16)).toString('hex');\n        if (k !== 'ffcad1e376a6c8915780fe6676aceec6') {\n            throw new Error(`Contract does not match the expected code hash: ${k}, 'ffcad1e376a6c8915780fe6676aceec6'`);\n        }\n        return true;\n    }\n    TzbtcTokenHelper.verifyScript = verifyScript;\n    function getAccountBalance(server, mapid, account) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const value = yield queryMap(server, mapid, `(Pair \"ledger\" 0x${TezosMessageUtil_1.TezosMessageUtils.writeAddress(account)})`);\n            return Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].int', json: value })[0]);\n        });\n    }\n    TzbtcTokenHelper.getAccountBalance = getAccountBalance;\n    function getOperatorList(server, mapid) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const value = yield queryMap(server, mapid, '\"operators\"');\n            let addresses = [];\n            for (const a of value) {\n                addresses.push(TezosMessageUtil_1.TezosMessageUtils.readAddress(a.bytes));\n            }\n            return addresses;\n        });\n    }\n    TzbtcTokenHelper.getOperatorList = getOperatorList;\n    function getTokenMetadata(server, mapid) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield queryMap(server, mapid, '\"tokenMetadata\"');\n        });\n    }\n    TzbtcTokenHelper.getTokenMetadata = getTokenMetadata;\n    function getSimpleStorage(server, address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);\n            return {\n                mapid: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].int', json: storageResult })[0]),\n                scale: 8\n            };\n        });\n    }\n    TzbtcTokenHelper.getSimpleStorage = getSimpleStorage;\n    function transferBalance(server, keystore, contract, fee, source, destination, amount, gas = 250000, freight = 1000) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parameters = `(Pair \"${source}\" (Pair \"${destination}\" ${amount}))`;\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, 0, fee, keystore.derivationPath, freight, gas, 'transfer', parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    TzbtcTokenHelper.transferBalance = transferBalance;\n    function approveBalance(server, keystore, contract, fee, destination, amount, gas = 250000, freight = 1000) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parameters = `(Right (Right (Right (Right (Left (Right (Right (Right (Pair \"${destination}\" ${amount})))))))))`;\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, 0, fee, keystore.derivationPath, freight, gas, '', parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    TzbtcTokenHelper.approveBalance = approveBalance;\n    function mintBalance(server, keystore, contract, fee, destination, amount, gas = 250000, freight = 1000) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parameters = `(Right (Right (Right (Right (Right (Left (Left (Left (Pair \"${destination}\" ${amount})))))))))`;\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, 0, fee, keystore.derivationPath, freight, gas, '', parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    TzbtcTokenHelper.mintBalance = mintBalance;\n    function addOperator(server, keystore, contract, fee, operator, gas = 250000, freight = 1000) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parameters = `(Right (Right (Right (Right (Right (Left (Right (Left \"${operator}\" ))))))))`;\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, keystore, contract, 0, fee, keystore.derivationPath, freight, gas, '', parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    TzbtcTokenHelper.addOperator = addOperator;\n    function queryMap(server, mapid, query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(query, '', TezosTypes.TezosParameterFormat.Michelson), 'hex');\n            const packedKey = TezosMessageUtil_1.TezosMessageUtils.writePackedData(key, 'bytes');\n            const encodedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(packedKey, 'hex'));\n            const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, encodedKey);\n            if (mapResult === undefined) {\n                throw new Error(`Could not get data from map ${mapid} for '${query}'`);\n            }\n            const bytes = jsonpath_plus_1.JSONPath({ path: '$.bytes', json: mapResult })[0];\n            return JSON.parse(TezosLanguageUtil_1.TezosLanguageUtil.hexToMicheline(bytes.slice(2)).code);\n        });\n    }\n    function clearRPCOperationGroupHash(hash) {\n        return hash.replace(/\\\"/g, '').replace(/\\n/, '');\n    }\n})(TzbtcTokenHelper = exports.TzbtcTokenHelper || (exports.TzbtcTokenHelper = {}));\n//# sourceMappingURL=TzbtcTokenHelper.js.map"]},"metadata":{},"sourceType":"script"}