"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ColdObservable_1 = require("rxjs/internal/testing/ColdObservable");
var HotObservable_1 = require("rxjs/internal/testing/HotObservable");
var parseSubscriptionMarble_1 = require("../marbles/parseSubscriptionMarble");
var calculateSubscriptionFrame = function (observable, unsubscriptionMarbles, frameTimeFactor) {
    var _a = parseSubscriptionMarble_1.parseSubscriptionMarble(unsubscriptionMarbles, frameTimeFactor), subscribedFrame = _a.subscribedFrame, unsubscribedFrame = _a.unsubscribedFrame;
    if (subscribedFrame === Number.POSITIVE_INFINITY) {
        return { subscribedFrame: 0, unsubscribedFrame: unsubscribedFrame };
    }
    //looks internal of Observable implementation to determine source is hot or cold observable.
    //if source is hot, subscription / unsubscription works as specified,
    //if source is cold, subscription always triggers start of observable - adjust unsubscription frame as well
    var source = observable;
    while (!!source) {
        if (source instanceof HotObservable_1.HotObservable) {
            return { subscribedFrame: subscribedFrame, unsubscribedFrame: unsubscribedFrame };
        }
        else if (source instanceof ColdObservable_1.ColdObservable) {
            return {
                subscribedFrame: 0,
                unsubscribedFrame: unsubscribedFrame === Number.POSITIVE_INFINITY ? unsubscribedFrame : unsubscribedFrame - subscribedFrame
            };
        }
        source = source.source;
    }
    throw new Error('Cannot detect source observable type');
};
exports.calculateSubscriptionFrame = calculateSubscriptionFrame;
//# sourceMappingURL=calculateSubscriptionFrame.js.map