"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var SubscriptionLog_1 = require("rxjs/internal/testing/SubscriptionLog");
/**
 * Represents single metadata value emitted by HotObservable<T> or ColdObservable<T>
 *
 */
var TestMessageValue = /** @class */ (function () {
    function TestMessageValue(frame, notification) {
        this.frame = frame;
        this.notification = notification;
    }
    return TestMessageValue;
}());
exports.TestMessageValue = TestMessageValue;
/**
 * Utility function to generate TestMessage represents value for Observer::next()
 * @param frame virtual frame time when value will be emitted
 * @param value
 */
var next = function (frame, value) {
    return new TestMessageValue(frame, rxjs_1.Notification.createNext(value));
};
exports.next = next;
/**
 * Utility function to generate TestMessage represents error for Observer::error()
 * @param frame virtual frame time when value will be emitted
 * @param value
 */
var error = function (frame, error) {
    if (error === void 0) { error = '#'; }
    return new TestMessageValue(frame, rxjs_1.Notification.createError(error));
};
exports.error = error;
/**
 * Utility function to generate TestMessage represents completion for Observer::complete()
 * @param frame virtual frame time when value will be emitted
 */
var complete = function (frame) {
    return new TestMessageValue(frame, rxjs_1.Notification.createComplete());
};
exports.complete = complete;
var subscribe = function (subscribedFrame, unsubscribedFrame) {
    if (subscribedFrame === void 0) { subscribedFrame = Number.POSITIVE_INFINITY; }
    if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }
    return new SubscriptionLog_1.SubscriptionLog(subscribedFrame, unsubscribedFrame);
};
exports.subscribe = subscribe;
//# sourceMappingURL=TestMessage.js.map