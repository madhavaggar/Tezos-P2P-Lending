"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var ColdObservable_1 = require("rxjs/internal/testing/ColdObservable");
var HotObservable_1 = require("rxjs/internal/testing/HotObservable");
var marbleAssert_1 = require("./assert/marbleAssert");
var parseObservableMarble_1 = require("./marbles/parseObservableMarble");
var parseSubscriptionMarble_1 = require("./marbles/parseSubscriptionMarble");
var TestMessage_1 = require("./message/TestMessage");
exports.complete = TestMessage_1.complete;
exports.error = TestMessage_1.error;
exports.next = TestMessage_1.next;
exports.subscribe = TestMessage_1.subscribe;
var TestScheduler_1 = require("./scheduler/TestScheduler");
//workaround TS4029 by explicitly import types and avoid unused import error
(function () { return rxjs_1.Observable.toString(); })();
(function () { return ColdObservable_1.ColdObservable.toString(); })();
(function () { return HotObservable_1.HotObservable.toString(); })();
var rxSandbox = {
    create: function (autoFlush, frameTimeFactor, maxFrameValue) {
        if (autoFlush === void 0) { autoFlush = false; }
        if (frameTimeFactor === void 0) { frameTimeFactor = 1; }
        if (maxFrameValue === void 0) { maxFrameValue = 1000; }
        var scheduler = new TestScheduler_1.TestScheduler(autoFlush, frameTimeFactor, Math.round(maxFrameValue / frameTimeFactor));
        return {
            scheduler: scheduler,
            hot: scheduler.createHotObservable.bind(scheduler),
            cold: scheduler.createColdObservable.bind(scheduler),
            flush: scheduler.flush.bind(scheduler),
            advanceTo: scheduler.advanceTo.bind(scheduler),
            getMessages: scheduler.getMessages.bind(scheduler),
            e: function (marble, value, error) {
                return parseObservableMarble_1.parseObservableMarble(marble, value, error, true, frameTimeFactor, frameTimeFactor * maxFrameValue);
            },
            s: function (marble) { return parseSubscriptionMarble_1.parseSubscriptionMarble(marble, frameTimeFactor, frameTimeFactor * maxFrameValue); }
        };
    },
    marbleAssert: marbleAssert_1.marbleAssert
};
exports.rxSandbox = rxSandbox;
//# sourceMappingURL=index.js.map