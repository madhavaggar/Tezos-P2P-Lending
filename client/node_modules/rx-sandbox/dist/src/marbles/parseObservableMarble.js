"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ObservableMarbleToken_1 = require("./ObservableMarbleToken");
var SubscriptionMarbleToken_1 = require("./SubscriptionMarbleToken");
var tokenParseReducer_1 = require("./tokenParseReducer");
/**
 * Parse marble DSL diagram, generates array of TestMessageValue for metadata of each marble values to be scheduled into.
 *
 * @param {string} marble Marble diagram to parse
 * @param {{ [key: string]: T }} [value] Custom value for marble value
 * @param {any} [error] Custom error for marble error
 * @param {boolean} [materializeInnerObservables] Flatten inner observables in cold observable. False by default.
 * @param {number} [frameTimeFactor] Custom frametime factor for virtual time frame. 1 by default.
 */
var parseObservableMarble = function (marble, value, error, materializeInnerObservables, frameTimeFactor, maxFrame) {
    if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }
    if (frameTimeFactor === void 0) { frameTimeFactor = 1; }
    if (maxFrame === void 0) { maxFrame = 1000; }
    if (marble.indexOf(SubscriptionMarbleToken_1.SubscriptionMarbleToken.UNSUBSCRIBE) !== -1) {
        throw new Error("Observable marble cannot have unsubscription marker " + SubscriptionMarbleToken_1.SubscriptionMarbleToken.UNSUBSCRIBE);
    }
    var marbleTokenArray = Array.from(marble).filter(function (token) { return token !== ObservableMarbleToken_1.ObservableMarbleToken.NOOP; });
    var subscriptionIndex = marbleTokenArray.join('').indexOf(SubscriptionMarbleToken_1.SubscriptionMarbleToken.SUBSCRIBE) * frameTimeFactor;
    var frameOffset = subscriptionIndex < 0 ? 0 : -subscriptionIndex;
    var values = marbleTokenArray.reduce(tokenParseReducer_1.observableTokenParseReducer(value || null, error, materializeInnerObservables, frameTimeFactor, maxFrame), {
        currentTimeFrame: frameOffset,
        messages: [],
        simultaneousGrouped: false,
        expandingTokenCount: 0,
        expandingValue: []
    });
    return values.messages;
};
exports.parseObservableMarble = parseObservableMarble;
//# sourceMappingURL=parseObservableMarble.js.map