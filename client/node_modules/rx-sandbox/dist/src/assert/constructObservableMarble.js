"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ObservableMarbleToken_1 = require("../marbles/ObservableMarbleToken");
var SubscriptionMarbleToken_1 = require("../marbles/SubscriptionMarbleToken");
/**
 * If marble provided custom values, we don't know original token - instead display
 * pseudo alphabet for object based values. If custom value is single-length char or number,
 * it'll be displayed as-is.
 *
 */
var token = Array.from("\u00E4\u1E05\u010B\u1E0B\u00EB\u1E1F\u0121\u1E27\u00EFj\u1E33\u1E37\u1E41\u1E45\u00F6\u1E57q\u1E5B\u1E61\u1E97\u00FC\u1E7F\u1E85\u1E8D\u00FF\u017C\u00C4\u1E04\u010A\u1E0A\u0401\u1E1E\u0120\u1E26\u0407J\u1E32\u1E36\u1E40\u1E44\u00D6\u1E56Q\u1E5A\u1E60\u1E6A\u00DC\u1E7E\u1E84\u1E8C\u0178\u017B" +
    "\u24D0\u24D1\u24D2\u24D3\u24D4\u24D5\u24D6\u24D7\u24D8\u24D9\u24DA\u24DB\u24DC\u24DD\u24DE\u24DF\u24E0\u24E1\u24E2\u24E3\u24E4\u24E5\u24E6\u24E7\u24E8\u24E9\u24B6\u24B7\u24B8\u24B9\u24BA\u24BB\u24BC\u24BD\u24BE\u24BF\u24C0\u24C1\u24C2\u24C3\u24C4\u24C5\u24C6\u24C7\u24C8\u24C9\u24CA\u24CB\u24CC\u24CD\u24CE\u24CF" +
    "\uD83C\uDD50\uD83C\uDD51\uD83C\uDD52\uD83C\uDD53\uD83C\uDD54\uD83C\uDD55\uD83C\uDD56\uD83C\uDD57\uD83C\uDD58\uD83C\uDD59\uD83C\uDD5A\uD83C\uDD5B\uD83C\uDD5C\uD83C\uDD5D\uD83C\uDD5E\uD83C\uDD5F\uD83C\uDD60\uD83C\uDD61\uD83C\uDD62\uD83C\uDD63\uD83C\uDD64\uD83C\uDD65\uD83C\uDD66\uD83C\uDD67\uD83C\uDD68\uD83C\uDD69\uD83C\uDD50\uD83C\uDD51\uD83C\uDD52\uD83C\uDD53\uD83C\uDD54\uD83C\uDD55\uD83C\uDD56\uD83C\uDD57\uD83C\uDD58\uD83C\uDD59\uD83C\uDD5A\uD83C\uDD5B\uD83C\uDD5C\uD83C\uDD5D\uD83C\uDD5E\uD83C\uDD5F\uD83C\uDD60\uD83C\uDD61\uD83C\uDD62\uD83C\uDD63\uD83C\uDD64\uD83C\uDD65\uD83C\uDD66\uD83C\uDD67\uD83C\uDD68\uD83C\uDD69" +
    "\u249C\u249D\u249E\u249F\u24A0\u24A1\u24A2\u24A3\u24A4\u24A5\u24A6\u24A7\u24A8\u24A9\u24AA\u24AB\u24AC\u24AD\u24AE\u24AF\u24B0\u24B1\u24B2\u24B3\u24B4\u24B5\u249C\u249D\u249E\u249F\u24A0\u24A1\u24A2\u24A3\u24A4\u24A5\u24A6\u24A7\u24A8\u24A9\u24AA\u24AB\u24AC\u24AD\u24AE\u24AF\u24B0\u24B1\u24B2\u24B3\u24B4\u24B5");
/**
 * Take flattened array of test message, aggregate same-frame value into nested arrays.
 *
 */
var marbleGroupReducer = function (acc, value) {
    var latestGroup = acc[acc.length - 1];
    if (!latestGroup || latestGroup.length === 0) {
        acc.push([value]);
    }
    else {
        var latestFrame = latestGroup[latestGroup.length - 1].frame;
        if (value.frame === latestFrame) {
            latestGroup.push(value);
        }
        else {
            acc.push([value]);
        }
    }
    return acc;
};
//we don't restore identical marble to original - preserve metadata only
var constructObservableMarble = function (value) {
    if (value.length === 0) {
        return Array.from(Array(30))
            .map(function () { return ObservableMarbleToken_1.ObservableMarbleToken.TIMEFRAME; })
            .join('');
    }
    var groupedMarble = value.reduce(marbleGroupReducer, []);
    var tokens = token.slice();
    var group;
    var completed = false;
    var timeFrame = 0;
    var marbleString = '';
    var shiftedFrame = Number.NEGATIVE_INFINITY;
    var appendNotificationValue = function (message) {
        var completed = message.notification.kind === 'C' || message.notification.kind === 'E';
        if (completed) {
            marbleString += message.notification.kind === 'C' ? ObservableMarbleToken_1.ObservableMarbleToken.COMPLETE : ObservableMarbleToken_1.ObservableMarbleToken.ERROR;
            return true;
        }
        else {
            var value_1 = message.notification.value;
            if (!!value_1 && value_1.toString().length === 1) {
                marbleString += message.notification.value;
            }
            else {
                //we can't recover original token when notification metadata has custom value, use pseudo alphabet instead.
                //do not support marble longer than predefined token char.
                marbleString += tokens.shift();
            }
        }
        return false;
    };
    //iterate each groups of message per timeframe
    while ((group = groupedMarble.shift())) {
        var single = group.length === 1;
        var message = void 0;
        //interate each message in single group
        while ((message = group.shift())) {
            //determine if there's hot observable subscription, and value emitted before subscription
            if (message.frame < 0 && shiftedFrame < 0) {
                shiftedFrame = Math.abs(message.frame);
            }
            //calcuate frame and calibrate frame to start from 0
            var adjustedFrame = shiftedFrame < 0 ? message.frame : message.frame + shiftedFrame;
            //if frame's 0, value's immediately appended
            if (adjustedFrame === 0) {
                timeFrame++;
            }
            if (adjustedFrame !== 0) {
                //if interval between message's long
                if (adjustedFrame - timeFrame >= 15) {
                    while (timeFrame < adjustedFrame) {
                        marbleString += "-";
                        var expandedTime = adjustedFrame - timeFrame - 2;
                        marbleString += "..." + expandedTime + "...-";
                        timeFrame = adjustedFrame;
                    }
                }
                else {
                    while (adjustedFrame !== 0 && timeFrame++ < adjustedFrame) {
                        marbleString +=
                            timeFrame === shiftedFrame + 1 ? SubscriptionMarbleToken_1.SubscriptionMarbleToken.SUBSCRIBE : ObservableMarbleToken_1.ObservableMarbleToken.TIMEFRAME;
                    }
                }
            }
            //append single message value
            if (single) {
                if ((completed = appendNotificationValue(message))) {
                    break;
                }
            }
            else {
                //append grouped message value
                marbleString += "(";
                completed = appendNotificationValue(message);
                while ((message = group.shift())) {
                    if ((completed = appendNotificationValue(message))) {
                        break;
                    }
                }
                marbleString += ")";
            }
        }
    }
    if (!completed) {
        marbleString += "-----";
    }
    return marbleString;
};
exports.constructObservableMarble = constructObservableMarble;
//# sourceMappingURL=constructObservableMarble.js.map